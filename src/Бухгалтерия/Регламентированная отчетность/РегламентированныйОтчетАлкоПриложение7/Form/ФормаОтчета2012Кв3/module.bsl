// Поля табличного документа
Перем ПТД_Титульный;
Перем ПТД_Лицензии;
Перем ПТД_Декларация;
Перем ПТД_Возвраты; 

// Хранят сведения о должностных лицах
Перем мОргТип;
Перем мОргКодИМНС;
Перем мИННДиректор;
Перем мИННБухгалтер;
Перем мИННУпПред;

Перем мВидыДеятельности;
Перем мКодыВидовПродукции;

// Хранят имена многострочных разделов для внутренних структур.
Перем мИдГруппы11;
Перем мИдГруппы12;
Перем мИдГруппы21;
Перем мИдГруппы22;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

Перем мОписаниеТиповЧислоЕ;

// в случае, если отчет открывается, то они мВерсияФормы = мСтараяВерсияФормы
Перем мСтараяВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Настройка свойств листов
Перем мСвойстваРазделовДекларации Экспорт;

// Хранит название макета состава показателей
Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

Перем мРежимПечати;

Перем мОписаниеТиповБулево;

Перем мБезОткрытияФормы Экспорт;

Перем мПустойОбразЛистаФЛ;

Перем мВерсияФормата;

Перем ТаблицаСообщений Экспорт;

Перем НаименованиеОтчетаДляВыгрузки;
Перем КодНО Экспорт;
Перем КППТек Экспорт;

Перем мДанныеОтчета Экспорт;

Перем СвойстваПоказателей;

Перем ДополнительныеДанные; // Данные, не отображаемых на одностраничных разделах

// Переменные используются для передачи данных из ПроверитьПоказатели()
// чтобы не дублировать формирование информации при выгрузке.
Перем ПараметрыВыгрузки, ДеревоВыгрузки;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Инициализация();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)
	
	Если ФлажокОтклАвтоРасчет = Ложь Тогда
		Ответ = Вопрос("Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			ФлажокОтклАвтоРасчет = Истина;
			Возврат;
		КонецЕсли;
		Расчет();
	КонецЕсли;
	
	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	
	УстановитьДоступностьПолейДекларация();
	УстановитьДоступностьПолейВозвраты();
	
КонецПроцедуры

Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	
	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьДатуВЯчейках();
	
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)
	
	ВыбранКорректирующийВидДок = (ВидДокумента = 1);
	
	ЭлементыФормы.НомерКорректировки.Доступность = ВыбранКорректирующийВидДок;
	
	Если ВыбранКорректирующийВидДок Тогда
		ПТД_Титульный.Области.ВидДокументаПервичный.Значение = "";
		ПТД_Титульный.Области.ВидДокументаКорректирующий.Значение = "V";
		
	Иначе
		ПТД_Титульный.Области.ВидДокументаПервичный.Значение = "V";
		ПТД_Титульный.Области.ВидДокументаКорректирующий.Значение = "";
		
	КонецЕсли;
	
	ЗаполнитьПоляНомераКорректировки();
	
КонецПроцедуры

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)
	
	ЗаполнитьПоляНомераКорректировки();
	
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	
	Перем ТекущаяОбласть;
	
	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе") > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
		// Принудительная раскраска после восстановления исходной раскраски ячеек.
		УстановитьДоступностьПолейДекларация();
		УстановитьДоступностьПолейВозвраты();
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

Процедура ПолеВыбораПризнакФормыОтчетностиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	
	УстановитьДоступностьПолейДекларация();
	УстановитьДоступностьПолейВозвраты();
	ПронумероватьТаблицыДекларации();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)
	
	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	
	КППТек = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, КППТек, "КПП1_", , , , Ложь);
	
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)
	
	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДействийЗаписать(Кнопка)
	
	Сохранить();
	
КонецПроцедуры

// Титульный лист.
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
КонецПроцедуры

// Лицензии.
Процедура ПолеТабличногоДокументаЛицензииВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаЛицензииПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаЛицензииНажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Лицензии");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаЛицензииНажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Лицензии");
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуЛицензииНажатие(Элемент)
	
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лицензии");
	
	Если мДатаКонцаПериодаОтчета >= '20131101' И Не ЛицензируемаяДеятельность() Тогда
		НомерПоследнейСтраницы = мСтруктураМногостраничныхРазделов.Лицензии.Количество() - 1;
		ПоследняяСтраница = мСтруктураМногостраничныхРазделов.Лицензии[НомерПоследнейСтраницы];
		ПерваяСтраница = мСтруктураМногостраничныхРазделов.Лицензии[0];
		ПоследняяСтраница.ДополнительныеДанные = Новый Структура;
		ПоследняяСтраница.ДополнительныеДанные.Вставить("П000000000105", ПерваяСтраница.ДополнительныеДанные.П000000000105);
		ПТД_Лицензии.Области.П000000000105.Значение = ПерваяСтраница.Данные.П000000000105;
	КонецЕсли;
	
	РасставитьНомераСтраниц();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуЛицензииНажатие(Элемент)
	
	УдалитьДополнительнуюСтраницу("Лицензии");
	РасставитьНомераСтраниц();
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуЛицензииНажатие(Элемент)
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лицензии");
	
КонецПроцедуры

// Таблица 1.
Процедура ПолеТабличногоДокументаДекларацияВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаДекларацияПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
	
	УстановитьДоступностьКнопокДопСтрокТаблицы1(Элемент);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаДекларацияПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаДекларацияНажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Декларация");
	
	УстановитьДоступностьПолейДекларация();
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаДекларацияНажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Декларация");
	
	УстановитьДоступностьПолейДекларация();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуДекларацияНажатие(Элемент)
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Декларация");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Декларация");
	
	УстановитьДоступностьПолейДекларация();
	РасчетДекларация();
	ПронумероватьТаблицыДекларации();
	РасставитьНомераСтраниц();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуДекларацияНажатие(Элемент)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Декларация");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Декларация");
	
	УстановитьДоступностьПолейДекларация();
	РасставитьНомераСтраниц();
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуДекларацияНажатие(Элемент)
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Декларация");
	
	УстановитьДоступностьПолейДекларация();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиДекларацияНажатие(Элемент)
	
	ВставитьДополнительнуюСтроку();
	ПронумероватьТаблицыДекларации();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиДекларацияНажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
	ПронумероватьТаблицыДекларации();
	РасчетДекларация();
	
КонецПроцедуры

// Таблица 2.
Процедура ПолеТабличногоДокументаВозвратыВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаВозвратыПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
	
	УстановитьДоступностьКнопокДопСтрокТаблицы2(Элемент);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаВозвратыПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаВозвратыНажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Возвраты");
	
	УстановитьДоступностьПолейВозвраты();
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаВозвратыНажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Возвраты");
	
	УстановитьДоступностьПолейВозвраты();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуВозвратыНажатие(Элемент)
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Возвраты");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Возвраты");
	
	УстановитьДоступностьПолейВозвраты();
	РасчетВозвраты();
	ПронумероватьТаблицыДекларации();
	РасставитьНомераСтраниц();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуВозвратыНажатие(Элемент)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Возвраты");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Возвраты");
	
	УстановитьДоступностьПолейВозвраты();
	РасставитьНомераСтраниц();
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуВозвратыНажатие(Элемент)
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Возвраты");
	
	УстановитьДоступностьПолейВозвраты();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиВозвратыНажатие(Элемент)
	
	ВставитьДополнительнуюСтроку();
	ПронумероватьТаблицыДекларации();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиВозвратыНажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
	ПронумероватьТаблицыДекларации();
	РасчетВозвраты();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьОбособленноеПодразделение(Подразделение)
	
	Если Подразделение.ОбособленноеПодразделение Тогда
		Возврат Подразделение;
	ИначеЕсли ЗначениеЗаполнено(Подразделение.Родитель) Тогда
		Возврат ПолучитьОбособленноеПодразделение(Подразделение.Родитель);
	ИначеЕсли ЗначениеЗаполнено(Подразделение.Владелец) Тогда
		Возврат Подразделение.Владелец;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура РасставитьНомераСтраниц()
	
	ПорядковыйНомер = 1;
	
	ОтображаемыйНомер = Формат(ПорядковыйНомер, "ЧЦ=3; ЧВН=");
	
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "НомСтр", 3, ОтображаемыйНомер);
	ПорядковыйНомер = ПорядковыйНомер + 1;
	
	РасставитьНомераСтраницВМногостраничномРазделе("Лицензии", ПорядковыйНомер);
	РасставитьНомераСтраницВМногостраничномРазделе("Декларация", ПорядковыйНомер);
	РасставитьНомераСтраницВМногостраничномРазделе("Возвраты", ПорядковыйНомер);
	
КонецПроцедуры

Процедура РасставитьНомераСтраницВМногостраничномРазделе(ИмяРаздела, ПорядковыйНомер)
	
	Перем ТаблицаСтраниц;
	
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Страница Из ТаблицаСтраниц Цикл
		ДанныеСтраницы = Страница.Данные;
		ЭтоАктивнаяСтраница = Страница.АктивнаяСтраница;
		
		ОтображаемыйНомер = Формат(ПорядковыйНомер, "ЧЦ=3; ЧВН=");
		
		Если ЭтоАктивнаяСтраница Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяРаздела, "НомСтр", 3, ОтображаемыйНомер);
		Иначе
			ДанныеСтраницы.НомСтр1 = Сред(ОтображаемыйНомер, 1, 1);
			ДанныеСтраницы.НомСтр2 = Сред(ОтображаемыйНомер, 2, 1);
			ДанныеСтраницы.НомСтр3 = Сред(ОтображаемыйНомер, 3, 1);
		КонецЕсли;
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	ИмяОбласти = Область.Имя;
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ИмяОбласти = "ОбособленноеПодразделение") Тогда 
		ВвестиСведенияОбОП(Элемент, Область, СтандартнаяОбработка);
	КонецЕсли;
	
	ЭтоКППМестаДеятельности = (Найти(ИмяОбласти, "П000000000201") = 1);
	Если ЭтоКППМестаДеятельности Тогда
		ВвестиКППМестаДеятельности(Элемент, Область, СтандартнаяОбработка);
	КонецЕсли;
	
	ЭтоАдресМестаДеятельности = Найти(ИмяОбласти, "П000000000202") = 1
	                        ИЛИ Найти(ИмяОбласти, "П000000000203") = 1
	                        ИЛИ Найти(ИмяОбласти, "П000000000204") = 1
	                        ИЛИ Найти(ИмяОбласти, "П000000000205") = 1
	                        ИЛИ Найти(ИмяОбласти, "П000000000206") = 1
	                        ИЛИ Найти(ИмяОбласти, "П000000000207") = 1;
	Если ЭтоАдресМестаДеятельности Тогда
		ВвестиАдресМестаДеятельности(Элемент, Область, СтандартнаяОбработка);
	КонецЕсли;
	
	ЭтоАдресВМногострочнойЧасти = Найти(ИмяОбласти, "П000010000107") = 1
	                          ИЛИ Найти(ИмяОбласти, "П000010000307") = 1
	                          ИЛИ Найти(ИмяОбласти, "П000020000107") = 1
	                          ИЛИ Найти(ИмяОбласти, "П000020000307") = 1;
	Если ЭтоАдресВМногострочнойЧасти Тогда
		ВвестиАдресКонтрагента(Элемент, Область, СтандартнаяОбработка);
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.Найти(Область.Имя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		ИмяПоказателя = ?(РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяОбласти) > 0, ИмяОбласти, ПараметрВводаПоля.Показатель);
		ВвестиПоказатель(Область, ИмяПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВвестиСведенияОбОП(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяРаздела = Сред(Элемент.Имя, 24);
	СтраницыРаздела = мСтруктураМногостраничныхРазделов[ИмяРаздела];
	
	АктивнаяСтраница = СтраницыРаздела.Найти(Истина, "АктивнаяСтраница");
	
	Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные) <> Тип("Структура") Тогда
		АктивнаяСтраница.ДополнительныеДанные = Новый Структура;
	КонецЕсли;
	
	СведенияОбОП = Новый Структура;
	СведенияОбОП.Вставить("Наименование", "");
	СведенияОбОП.Вставить("ИНН",          "");
	СведенияОбОП.Вставить("КПП",          "");
	
	СведенияОбОП.Вставить("Индекс",          "");
	СведенияОбОП.Вставить("КодРегиона",      "");
	СведенияОбОП.Вставить("Район",           "");
	СведенияОбОП.Вставить("Город",           "");
	СведенияОбОП.Вставить("НаселенныйПункт", "");
	СведенияОбОП.Вставить("Улица",           "");
	СведенияОбОП.Вставить("Дом",             "");
	СведенияОбОП.Вставить("Корпус",          "");
	СведенияОбОП.Вставить("Квартира",        "");
	СведенияОбОП.Вставить("ТипДома",         "");
	СведенияОбОП.Вставить("ТипКорпуса",      "");
	СведенияОбОП.Вставить("ТипКвартиры",     "");
	
	СведенияОбОП.Вставить("ПредставлениеАдреса", "");
	
	СохраненныеСведения = Неопределено;
	ИмяЭлементаСтруктуры = "СведенияОбОП";
	
	Если АктивнаяСтраница.ДополнительныеДанные.Свойство(ИмяЭлементаСтруктуры, СохраненныеСведения) Тогда
		ЗаполнитьЗначенияСвойств(СведенияОбОП, СохраненныеСведения);
	КонецЕсли;
	
	Если ПустаяСтрока(СведенияОбОП.ИНН) Тогда
		ИНН = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ИНН1_");
		Если Лев(ИНН, 2) = "00" Тогда
			ИНН = Сред (ИНН, 3); // Удаление нулей, добавленных в соответствии с порядком заполнения
		КонецЕсли;
		СведенияОбОП.ИНН = ИНН;
	КонецЕсли;
	
	ФормаВводаРеквизитов = ПолучитьФорму("ВводРеквизитовОП");
	ФормаВводаРеквизитов.ПараметрыФормы = СведенияОбОП;
	
	РезультатВвода = ФормаВводаРеквизитов.ОткрытьМодально();
	
	Если РезультатВвода <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СведенияОбОП, РезультатВвода);
		АктивнаяСтраница.ДополнительныеДанные.Вставить(ИмяЭлементаСтруктуры, СведенияОбОП);
		
		ВыводитьРеквизиты = (НЕ ПустаяСтрока(РезультатВвода.Наименование) 
		                ИЛИ НЕ ПустаяСтрока(РезультатВвода.ИНН) 
		                ИЛИ НЕ ПустаяСтрока(РезультатВвода.КПП)
		                ИЛИ НЕ ПустаяСтрока(РезультатВвода.ПредставлениеАдреса));
		
		Если ВыводитьРеквизиты Тогда
			НаименованиеОП = "";
			Если НЕ ПустаяСтрока(РезультатВвода.Наименование) Тогда
				НаименованиеОП = РезультатВвода.Наименование;
			КонецЕсли;
			Если НЕ ПустаяСтрока(РезультатВвода.ИНН) Тогда
				НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", ", ") + "ИНН " + РезультатВвода.ИНН;
			КонецЕсли;
			Если НЕ ПустаяСтрока(РезультатВвода.КПП) Тогда
				НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", ", ") + "КПП " + РезультатВвода.КПП;
			КонецЕсли;
			Если НЕ ПустаяСтрока(РезультатВвода.ПредставлениеАдреса) Тогда
				НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", Символы.ПС) + РезультатВвода.ПредставлениеАдреса;
			КонецЕсли;
		Иначе
			НаименованиеОП = "";
		КонецЕсли;
		
		Элемент.Области.ОбособленноеПодразделение.Значение = НаименованиеОП;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВвестиКППМестаДеятельности(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяОбласти = Область.Имя;
	
	МассивКомпонентИмени = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяОбласти, "_");
	Если МассивКомпонентИмени.Количество() <= 1 Тогда
		// У имени нет постфикса порядкового номера.
		Возврат;
	КонецЕсли;
	
	ПорядковыйНомер = МассивКомпонентИмени[МассивКомпонентИмени.Количество()-1];
	
	КППМестаДеятельности = "";
	Для Инд = 1 По 9 Цикл
		ИмяОбластиСчитывания = "П000000000201_" + Инд + "_" + ПорядковыйНомер;
		КППМестаДеятельности = КППМестаДеятельности + СокрЛП(ПТД_Лицензии.Области[ИмяОбластиСчитывания].Значение);
	КонецЦикла;
	
	ВводЗавершен = Ложь;
	Пока НЕ ВводЗавершен Цикл
		Если НЕ ВвестиСтроку(КППМестаДеятельности, "Введите КПП", 9) Тогда
			Возврат;
		КонецЕсли;
		
		Если КППМестаДеятельности = ""
		 ИЛИ (ОбщегоНазначения.ТолькоЦифрыВСтроке(КППМестаДеятельности) И СтрДлина(КППМестаДеятельности) = 9) Тогда
			
			Для Инд = 1 По 9 Цикл
				ИмяОбластиДляВывода = "П000000000201_" + Инд + "_" + ПорядковыйНомер;
				ЗначениеДляВывода = Сред(КППМестаДеятельности, Инд, 1);
				ПТД_Лицензии.Области[ИмяОбластиДляВывода].Значение = ЗначениеДляВывода;
			КонецЦикла;
			
			Модифицированность = Истина;
			ВводЗавершен = Истина;
		Иначе
			Сообщить("КПП должен состоять из 9 цифр.");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВвестиАдресМестаДеятельности(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяОбласти = Область.Имя;
	
	МассивКомпонентИмени = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяОбласти, "_");
	Если МассивКомпонентИмени.Количество() <= 1 Тогда
		// У имени нет постфикса порядкового номера.
		Возврат;
	КонецЕсли;
	
	ПорядковыйНомер = МассивКомпонентИмени[МассивКомпонентИмени.Количество()-1];
	
	СтраницыРазделаЛицензии = мСтруктураМногостраничныхРазделов.Лицензии;
	
	АктивнаяСтраница = СтраницыРазделаЛицензии.Найти(Истина, "АктивнаяСтраница");
	
	Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные) <> Тип("Структура") Тогда
		АктивнаяСтраница.ДополнительныеДанные = Новый Структура;
	КонецЕсли;
	
	АдресМестаДеятельности = Новый Структура;
	АдресМестаДеятельности.Вставить("КодСтраны",       "");
	АдресМестаДеятельности.Вставить("Индекс",          "");
	АдресМестаДеятельности.Вставить("КодРегиона",      "");
	АдресМестаДеятельности.Вставить("Район",           "");
	АдресМестаДеятельности.Вставить("Город",           "");
	АдресМестаДеятельности.Вставить("НаселенныйПункт", "");
	АдресМестаДеятельности.Вставить("Улица",           "");
	АдресМестаДеятельности.Вставить("Дом",             "");
	АдресМестаДеятельности.Вставить("Корпус",          "");
	АдресМестаДеятельности.Вставить("Квартира",        "");
	АдресМестаДеятельности.Вставить("ТипДома",         "");
	АдресМестаДеятельности.Вставить("ТипКорпуса",      "");
	АдресМестаДеятельности.Вставить("ТипКвартиры",     "");
	
	ИмяЭлементаСтруктуры = "АдресМестаДеятельности" + ПорядковыйНомер;
	СохраненныйАдресМестаДеятельности = Неопределено;
	Если АктивнаяСтраница.ДополнительныеДанные.Свойство(ИмяЭлементаСтруктуры, СохраненныйАдресМестаДеятельности) Тогда
		ЗаполнитьЗначенияСвойств(АдресМестаДеятельности, СохраненныйАдресМестаДеятельности);
	КонецЕсли;
	
	ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
	
	СтруктураАдресныхДанных = Новый Структура;
	СтруктураАдресныхДанных.Вставить("Индекс",          АдресМестаДеятельности.Индекс);
	СтруктураАдресныхДанных.Вставить("Регион",          АдресМестаДеятельности.КодРегиона);
	СтруктураАдресныхДанных.Вставить("Район",           АдресМестаДеятельности.Район);
	СтруктураАдресныхДанных.Вставить("Город",           АдресМестаДеятельности.Город);
	СтруктураАдресныхДанных.Вставить("НаселенныйПункт", АдресМестаДеятельности.НаселенныйПункт);
	СтруктураАдресныхДанных.Вставить("Улица",           АдресМестаДеятельности.Улица);
	СтруктураАдресныхДанных.Вставить("Дом",             АдресМестаДеятельности.Дом);
	СтруктураАдресныхДанных.Вставить("Корпус",          АдресМестаДеятельности.Корпус);
	СтруктураАдресныхДанных.Вставить("Квартира",        АдресМестаДеятельности.Квартира);
	
	ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;
	ЗаполнитьЗначенияСвойств(ФормаВводаАдреса, АдресМестаДеятельности, "ТипДома, ТипКорпуса, ТипКвартиры");
	
	Если ФормаВводаАдреса.ОткрытьМодально() Тогда
		
		Если ФормаВводаАдреса.ПроизвольныйАдрес Тогда
			// российские адреса должны быть в формате КЛАДР
			Предупреждение("Российские адреса должны вводиться
							|только ""раздельно по полям адреса"" !
							|
							|Введите адрес еще раз.");
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(АдресМестаДеятельности, ФормаВводаАдреса.НачальноеЗначениеВыбора);
		ЗаполнитьЗначенияСвойств(АдресМестаДеятельности, ФормаВводаАдреса, "ТипДома, ТипКорпуса, ТипКвартиры");
		АдресМестаДеятельности.КодРегиона = ФормаВводаАдреса.НачальноеЗначениеВыбора.Регион;
		
		Модифицированность = Истина;
		
		Для Инд = 1 По 6 Цикл
			ИмяОбластиДляВывода = "П000000000202_" + Инд + "_" + ПорядковыйНомер;
			ЗначениеДляВывода = Сред(АдресМестаДеятельности.Индекс, Инд, 1);
			ПТД_Лицензии.Области[ИмяОбластиДляВывода].Значение = ЗначениеДляВывода;
		КонецЦикла;
		
		Для Инд = 1 По 2 Цикл
			ИмяОбластиДляВывода = "П000000000203_" + Инд + "_" + ПорядковыйНомер;
			ЗначениеДляВывода = Сред(АдресМестаДеятельности.КодРегиона, Инд, 1);
			ПТД_Лицензии.Области[ИмяОбластиДляВывода].Значение = ЗначениеДляВывода;
		КонецЦикла;
		
		ПТД_Лицензии.Области["П000000000204_" + ПорядковыйНомер].Значение = АдресМестаДеятельности.Район;
		ПТД_Лицензии.Области["П000000000205_" + ПорядковыйНомер].Значение = ?(ПустаяСтрока(АдресМестаДеятельности.Город), АдресМестаДеятельности.НаселенныйПункт, АдресМестаДеятельности.Город);
		ПТД_Лицензии.Области["П000000000206_" + ПорядковыйНомер].Значение = АдресМестаДеятельности.Улица;
		
		СтрокаДома = АдресМестаДеятельности.Дом;
		СтрокаДома = СтрокаДома + ?(ПустаяСтрока(АдресМестаДеятельности.Корпус), "", ", " + АдресМестаДеятельности.Корпус);
		СтрокаДома = СтрокаДома + ?(ПустаяСтрока(АдресМестаДеятельности.Квартира), "", ", " + АдресМестаДеятельности.Квартира);
		ПТД_Лицензии.Области["П000000000207_" + ПорядковыйНомер].Значение = СтрокаДома;
		
	КонецЕсли;
	
	АктивнаяСтраница.ДополнительныеДанные.Вставить(ИмяЭлементаСтруктуры, АдресМестаДеятельности);
	
КонецПроцедуры

Процедура ВвестиАдресКонтрагента(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяОбласти = Область.Имя;
	
	ИмяРаздела = Сред(Элемент.Имя, 24);
	
	СтраницыРаздела = мСтруктураМногостраничныхРазделов[ИмяРаздела];
	
	АктивнаяСтраница = СтраницыРаздела.Найти(Истина, "АктивнаяСтраница");
	
	Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные) <> Тип("Структура") Тогда
		АктивнаяСтраница.ДополнительныеДанные = Новый Структура;
	КонецЕсли;
	
	ДополнительныеДанныеСтраницы = АктивнаяСтраница.ДополнительныеДанные;
	
	Адрес = Новый Структура;
	Адрес.Вставить("Страна",          "");
	Адрес.Вставить("Индекс",          "");
	Адрес.Вставить("Регион",          "");
	Адрес.Вставить("Район",           "");
	Адрес.Вставить("Город",           "");
	Адрес.Вставить("НаселенныйПункт", "");
	Адрес.Вставить("Улица",           "");
	Адрес.Вставить("Дом",             "");
	Адрес.Вставить("Корпус",          "");
	Адрес.Вставить("Квартира",        "");
	Адрес.Вставить("ТипДома",         "");
	
	Адрес.Вставить("ТипКорпуса",      "");
	Адрес.Вставить("ТипКвартиры",     "");
	Адрес.Вставить("Адрес",           "");
	
	СохраненныйАдрес = Неопределено;
	Если ДополнительныеДанныеСтраницы.Свойство(ИмяОбласти, СохраненныйАдрес) Тогда
		ЗаполнитьЗначенияСвойств(Адрес, СохраненныйАдрес);
	КонецЕсли;
	
	ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
	ФормаВводаАдреса.ДоступностьОбъекта = Ложь;
	ФормаВводаАдреса.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	
	Если ПустаяСтрока(Адрес.Страна) Тогда
		
		ФормаВводаАдреса.Поле1 = Адрес.Индекс;
		ФормаВводаАдреса.Поле2 = РегламентированнаяОтчетность.ПолучитьНазваниеРегионаПоКоду(Адрес.Регион);
		ФормаВводаАдреса.Поле3 = Адрес.Район;
		ФормаВводаАдреса.Поле4 = Адрес.Город;
		ФормаВводаАдреса.Поле5 = Адрес.НаселенныйПункт;
		ФормаВводаАдреса.Поле6 = Адрес.Улица;
		ФормаВводаАдреса.Поле7 = Адрес.Дом;
		ФормаВводаАдреса.Поле8 = Адрес.Корпус;
		ФормаВводаАдреса.Поле9 = Адрес.Квартира;
		
		ФормаВводаАдреса.ТипДома     = Адрес.ТипДома;
		ФормаВводаАдреса.ТипКорпуса  = Адрес.ТипКорпуса;
		ФормаВводаАдреса.ТипКвартиры = Адрес.ТипКвартиры;
		
		ФормаВводаАдреса.Представление = Адрес.Адрес;
		
	Иначе
		
		Если НЕ ПустаяСтрока(Адрес.Страна) Тогда
			ФормаВводаАдреса.Поле1 = Справочники.КлассификаторСтранМира.НайтиПоКоду(Адрес.Страна);
		КонецЕсли;
		ФормаВводаАдреса.Представление = Область.Значение;
		
	КонецЕсли;
	
	Если ФормаВводаАдреса.ОткрытьМодально() Тогда
		
		Если ФормаВводаАдреса.ПроизвольныйАдрес Тогда
			
			Адрес.Страна =          ?(ЗначениеЗаполнено(ФормаВводаАдреса.Поле1), Справочники.КлассификаторСтранМира.НайтиПоНаименованию(ФормаВводаАдреса.Поле1).Код, "");
			
			Если Адрес.Страна = "643" Тогда
			    // ввели российский адрес в произвольной форме
				// но российские адреса должны быть в формате КЛАДР
				Предупреждение("Российские адреса должны вводиться
								|только ""раздельно по полям адреса"" !
								|
								|Введите адрес еще раз.");
				Возврат;
			Иначе
				Адрес.Индекс =          "";
				Адрес.Регион =          "";
				Адрес.Район =           "";
				Адрес.Город =           "";
				Адрес.НаселенныйПункт = "";
				Адрес.Улица =           "";
				Адрес.Дом =             "";
				Адрес.Корпус =          "";
				Адрес.Квартира =        "";
				
				Адрес.Адрес = ФормаВводаАдреса.Представление;
				Область.Значение = ФормаВводаАдреса.Представление;	
			КонецЕсли;
			
		Иначе
			Адрес.Страна =          "";
			Адрес.Индекс =          ФормаВводаАдреса.Поле1;
			Адрес.Регион =          РегламентированнаяОтчетность.КодРегионаПоНазванию(ФормаВводаАдреса.Поле2);
			Адрес.Район =           ФормаВводаАдреса.Поле3;
			Адрес.Город =           ФормаВводаАдреса.Поле4;
			Адрес.НаселенныйПункт = ФормаВводаАдреса.Поле5;
			Адрес.Улица =           ФормаВводаАдреса.Поле6;
			Адрес.Дом =             ФормаВводаАдреса.Поле7;
			Адрес.Корпус =          ФормаВводаАдреса.Поле8;
			Адрес.Квартира =        ФормаВводаАдреса.Поле9;
			
			Адрес.ТипДома     = ФормаВводаАдреса.ТипДома;
			Адрес.ТипКорпуса  = ФормаВводаАдреса.ТипКорпуса;
			Адрес.ТипКвартиры = ФормаВводаАдреса.ТипКвартиры;
			
			Адрес.Адрес = ФормаВводаАдреса.Представление;
			Область.Значение = ФормаВводаАдреса.Представление;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		АктивнаяСтраница.ДополнительныеДанные.Вставить(ИмяОбласти, Адрес);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьПолейДекларация()
	
	СтраницыРаздела = мСтруктураМногостраничныхРазделов.Декларация;
	АктивнаяСтраница = СтраницыРаздела.Найти(Истина, "АктивнаяСтраница");
	ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
	
	РазрешитьВвод = (ИндексСтраницы = 0);
	
	ВариантРучногоВвода = ?(РазрешитьВвод, 0, 5);
	ВариантАвторасчета = ?(РазрешитьВвод, ?(ФлажокОтклАвтоРасчет, 0, 4), 5);
	
	НомерСтроки = 1;
	Постфикс = Формат(НомерСтроки, "ЧГ=0");
	Пока ПТД_Декларация.Области.Найти("П000010000101_" + Постфикс) <> Неопределено Цикл
		
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000101_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000102_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000103_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000104_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000105_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000106_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000107_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000108_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000109_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000121_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000122_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000111_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000112_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000113_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000114_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000115_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000116_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000117_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000118_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000119_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000120_" + Постфикс, ВариантРучногоВвода);
		
		НомерСтроки = НомерСтроки + 1;
		Постфикс = Формат(НомерСтроки, "ЧГ=0");
	КонецЦикла;
	
	ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000216", ВариантАвторасчета);
	ИзменитьВариантЗаполненияОбласти(ПТД_Декларация, "П000010000220", ВариантАвторасчета);
	
КонецПроцедуры

Процедура УстановитьДоступностьПолейВозвраты()
	
	СтраницыРаздела = мСтруктураМногостраничныхРазделов.Возвраты;
	АктивнаяСтраница = СтраницыРаздела.Найти(Истина, "АктивнаяСтраница");
	ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
	
	РазрешитьВвод = (ИндексСтраницы = 0);
	
	ВариантРучногоВвода = ?(РазрешитьВвод, 0, 5);
	ВариантАвторасчета = ?(РазрешитьВвод, ?(ФлажокОтклАвтоРасчет, 0, 4), 5);
	
	НомерСтроки = 1;
	Постфикс = Формат(НомерСтроки, "ЧГ=0");
	Пока ПТД_Возвраты.Области.Найти("П000020000101_" + Постфикс) <> Неопределено Цикл
		
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000101_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000102_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000103_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000104_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000105_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000106_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000107_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000108_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000109_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000121_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000122_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000111_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000112_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000113_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000114_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000115_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000116_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000117_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000118_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000119_" + Постфикс, ВариантРучногоВвода);
		ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000120_" + Постфикс, ВариантРучногоВвода);
		
		НомерСтроки = НомерСтроки + 1;
		Постфикс = Формат(НомерСтроки, "ЧГ=0");
	КонецЦикла;
	
	ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000216", ВариантАвторасчета);
	ИзменитьВариантЗаполненияОбласти(ПТД_Возвраты, "П000020000220", ВариантАвторасчета);
	
КонецПроцедуры

Процедура ИзменитьВариантЗаполненияОбласти(ПолеТабличногоДокумента, ИмяОбласти, ВариантЗаполнения);
	
	ОбрабатываемаяОбласть = ПолеТабличногоДокумента.Области[ИмяОбласти];
	
	Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
		ОбрабатываемаяОбласть.Защита = Истина;
	Иначе
		ОбрабатываемаяОбласть.Защита = Ложь;
	КонецЕсли;
	
	КлючЦветаФона = "_" + ВариантЗаполнения;
	ЦветФона = Неопределено;
	мСтруктураЦветовРаскраски.Свойство(КлючЦветаФона, ЦветФона);
	
	ОбрабатываемаяОбласть.ЦветФона = ЦветФона;
	
	Если ВариантЗаполнения = 5 Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьКнопокДопСтрокТаблицы1(ПолеТабличногоДокумента)
	
	СтраницыРаздела = мСтруктураМногостраничныхРазделов.Декларация;
	АктивнаяСтраница = СтраницыРаздела.Найти(Истина, "АктивнаяСтраница");
	ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
	
	Если ИндексСтраницы <> 0 Тогда
		
		ИмяКолонки = Лев(ПолеТабличногоДокумента.ТекущаяОбласть.Имя, 13);
		Если мСтруктураМногострочныхРазделов[мИдГруппы11].Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
			ЭлементыФормы.КнопкаДобавитьДопСтрокиДекларация.Доступность = Ложь;
			ЭлементыФормы.КнопкаУдалитьДопСтрокиДекларация.Доступность =  Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьКнопокДопСтрокТаблицы2(ПолеТабличногоДокумента)
	
	СтраницыРаздела = мСтруктураМногостраничныхРазделов.Возвраты;
	АктивнаяСтраница = СтраницыРаздела.Найти(Истина, "АктивнаяСтраница");
	ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
	
	Если ИндексСтраницы <> 0 Тогда
		
		ИмяКолонки = Лев(ПолеТабличногоДокумента.ТекущаяОбласть.Имя, 13);
		Если мСтруктураМногострочныхРазделов[мИдГруппы21].Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
			ЭлементыФормы.КнопкаДобавитьДопСтрокиВозвраты.Доступность = Ложь;
			ЭлементыФормы.КнопкаУдалитьДопСтрокиВозвраты.Доступность =  Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСпискиВыбора()

	Если мДатаКонцаПериодаОтчета < '20131101' Тогда
		ИмяМакета = "Списки2012Кв3";
	Иначе
		// С 3-го квартала 2015 года действует новый список.
		// Отчет квартальный, поэтому можно указать 01.09 как границу
		ИмяМакета = ?(мДатаКонцаПериодаОтчета < '20150901', "Списки2012Кв3_20131101", "Списки2015Кв3"); 
	КонецЕсли;
	
	МакетСоставаПоказателей = ПолучитьМакет(ИмяМакета);
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000000000105", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыДеятельности"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000101", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000102", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000301", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000302", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000101", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000102", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000301", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000302", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	
КонецПроцедуры // СформироватьСпискиВыбора()

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура УстановитьВариантДляЯчеекЛицензии(Вариант)
	Цвет = мСтруктураЦветовРаскраски["_" + Вариант];
	Защита = Вариант > 0;
	
	ТабличныйДокумент = ЭтаФорма.ЭлементыФормы.ПолеТабличногоДокументаЛицензии;
	
	ТабличныйДокумент.Области.П000000000101.ЦветФона = Цвет;
	ТабличныйДокумент.Области.П000000000101.Защита = Защита;
	ТабличныйДокумент.Области.П000000000102.ЦветФона = Цвет;
	ТабличныйДокумент.Области.П000000000102.Защита = Защита;
	ТабличныйДокумент.Области.П000000000103.ЦветФона = Цвет;
	ТабличныйДокумент.Области.П000000000103.Защита = Защита;
	ТабличныйДокумент.Области.П000000000104.ЦветФона = Цвет;
	ТабличныйДокумент.Области.П000000000104.Защита = Защита;
	
	Если Защита Тогда
		ТабличныйДокумент.Области.П000000000101.Значение = "";
		ТабличныйДокумент.Области.П000000000102.Значение = "";
		ТабличныйДокумент.Области.П000000000103.Значение = '00010101';
		ТабличныйДокумент.Области.П000000000104.Значение = '00010101';
	КонецЕсли;
КонецПроцедуры

Процедура ЗаменитьВидДеятельностиНаВсехСтраницах(Код, Название)

    ИмяТекущейСтраницыПанели = "ТаблицаСтраницыЛицензии";
	ТаблицаСтраницРаздела = мСтруктураМногостраничныхРазделов.Лицензии;

	Для Каждого СтрТаблицаСтраницы Из ТаблицаСтраницРаздела Цикл
		Если СтрТаблицаСтраницы.АктивнаяСтраница Тогда
			Продолжить;
		КонецЕсли;
		СтрТаблицаСтраницы.Данные.П000000000101 = "";
		СтрТаблицаСтраницы.Данные.П000000000102 = "";
		СтрТаблицаСтраницы.Данные.П000000000103 = '00010101';
		СтрТаблицаСтраницы.Данные.П000000000104 = '00010101';
		СтрТаблицаСтраницы.Данные.П000000000105 = Название;
		
		Если СтрТаблицаСтраницы.ДополнительныеДанные = Неопределено Тогда
			СтрТаблицаСтраницы.ДополнительныеДанные = Новый Структура;
		КонецЕсли;
		СтрТаблицаСтраницы.ДополнительныеДанные.Вставить("П000000000105", Код);
	КонецЦикла;
КонецПроцедуры

Функция ЛицензируемаяДеятельность()
	Если мСтруктураМногостраничныхРазделов.Лицензии.Количество() < 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Данные = мСтруктураМногостраничныхРазделов.Лицензии[0].ДополнительныеДанные;
	
	ИмяОбласти = "П000000000105";
	
	Значение = Неопределено;
	Если Данные <> Неопределено 
		И Данные.Свойство(ИмяОбласти, Значение) 
		И Не ПустаяСтрока(Значение) Тогда
		Возврат Число(Значение) < 8;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	// Показатели спаренные по списку выбора.
	Если Найти(КодПоказателя, "П000010000101") = 1 ИЛИ Найти(КодПоказателя, "П000010000301") = 1
	 ИЛИ Найти(КодПоказателя, "П000020000101") = 1 ИЛИ Найти(КодПоказателя, "П000020000301") = 1
	 ИЛИ Найти(КодПоказателя, "П000000000105") = 1 Тогда
		КолонкаПоиска = "Название";
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	ФормаВыбора = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.Заголовок = ТекстВыбора;
	ФормаВыбора.СписокКодов = ТаблицаВыбора;
	Если ИсходнаяСтрока <> Неопределено Тогда
		ФормаВыбора.КодИсходнойСтроки = ИсходнаяСтрока.Код;
	КонецЕсли;
	
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Если КодПоказателя = "П000000000105" И мДатаКонцаПериодаОтчета >= '20131101' Тогда
			БылаЛицензируемая = ЛицензируемаяДеятельность();
			СталаЛицензируемая = ?(ПустаяСтрока(РезультатВыбора.Код), Истина, Число(РезультатВыбора.Код) < 8);
			
			// В отчете нельзя совмещать лицензионную или нелицензионную деятельность
			Если Не СталаЛицензируемая 
				И СталаЛицензируемая <> БылаЛицензируемая 
				И мСтруктураМногостраничныхРазделов.Лицензии.Количество() > 1 Тогда
				Результат = Вопрос(НСтр("ru='Выбор этого вида деятельности приведет к очистке сведений о лицензиях организации со всех страниц этого раздела. Если в отчете есть нелицензионный вид деятельности, он должен быть единственным." + Символы.ПС + "Продолжить?'"), 
					   РежимДиалогаВопрос.ДаНет);
				Если Результат = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Код = РезультатВыбора.Код;
			Название = ?(ПустаяСтрока(Код), "", РезультатВыбора.Название);
			
			Если СталаЛицензируемая И НЕ БылаЛицензируемая Тогда
				ЗаменитьВидДеятельностиНаВсехСтраницах("", "");
			ИначеЕсли Не СталаЛицензируемая Тогда
				ЗаменитьВидДеятельностиНаВсехСтраницах(Код, Название);
			КонецЕсли;
			
			Если СталаЛицензируемая Тогда
			    УстановитьВариантДляЯчеекЛицензии(0);
			Иначе
				УстановитьВариантДляЯчеекЛицензии(5);
			КонецЕсли;
		КонецЕсли;
		
		Область.Значение = РезультатВыбора[КолонкаПоиска];
		ЗаполнитьСвязанныеПоказатели(Область.Имя, РезультатВыбора);
		
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Расчет();
	
КонецПроцедуры

Процедура ЗаполнитьСвязанныеПоказатели(ИмяОбласти, РезультатВыбора)
	
	Если Найти(ИмяОбласти, "П000000000105") = 1 Тогда
		ИмяДополнительныхДанных = "П000000000105";
		
		ТаблицаСтраницЛицензии = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство("Лицензии", ТаблицаСтраницЛицензии);
		
		АктивнаяСтраница = ТаблицаСтраницЛицензии.Найти(Истина, "АктивнаяСтраница");
		
		Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные) <> Тип("Структура") Тогда
			АктивнаяСтраница.ДополнительныеДанные = Новый Структура;
		КонецЕсли;
		АктивнаяСтраница.ДополнительныеДанные.Вставить(ИмяДополнительныхДанных, РезультатВыбора.Код);
		
		Если ПустаяСтрока(РезультатВыбора.Код) Тогда
			ПТД_Лицензии.Области[ИмяОбласти].Значение = "";
		КонецЕсли;
		
	ИначеЕсли Найти(ИмяОбласти, "П000010000101") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000102" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ПТД_Декларация.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = РезультатВыбора.Код;
		Если ПустаяСтрока(РезультатВыбора.Код) Тогда
			ПТД_Декларация.Области[ИмяОбласти].Значение = "";
		КонецЕсли;
		
	ИначеЕсли Найти(ИмяОбласти, "П000010000102") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000101" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ПТД_Декларация.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = ?(ПустаяСтрока(РезультатВыбора.Код), "", РезультатВыбора.Название);
		
	ИначеЕсли Найти(ИмяОбласти, "П000010000301") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000302" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ПТД_Декларация.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = РезультатВыбора.Код;
		Если ПустаяСтрока(РезультатВыбора.Код) Тогда
			ПТД_Декларация.Области[ИмяОбласти].Значение = "";
		КонецЕсли;
		
	ИначеЕсли Найти(ИмяОбласти, "П000010000302") = 1 Тогда
		ИмяСвязаннойОбласти = "П000010000301" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ПТД_Декларация.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = ?(ПустаяСтрока(РезультатВыбора.Код), "", РезультатВыбора.Название);
		
	ИначеЕсли Найти(ИмяОбласти, "П000020000101") = 1 Тогда
		ИмяСвязаннойОбласти = "П000020000102" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ПТД_Возвраты.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = РезультатВыбора.Код;
		Если ПустаяСтрока(РезультатВыбора.Код) Тогда
			ПТД_Возвраты.Области[ИмяОбласти].Значение = "";
		КонецЕсли;
		
	ИначеЕсли Найти(ИмяОбласти, "П000020000102") = 1 Тогда
		ИмяСвязаннойОбласти = "П000020000101" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ПТД_Возвраты.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = ?(ПустаяСтрока(РезультатВыбора.Код), "", РезультатВыбора.Название);
		
	ИначеЕсли Найти(ИмяОбласти, "П000020000301") = 1 Тогда
		ИмяСвязаннойОбласти = "П000020000302" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ПТД_Возвраты.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = РезультатВыбора.Код;
		Если ПустаяСтрока(РезультатВыбора.Код) Тогда
			ПТД_Возвраты.Области[ИмяОбласти].Значение = "";
		КонецЕсли;
		
	ИначеЕсли Найти(ИмяОбласти, "П000020000302") = 1 Тогда
		ИмяСвязаннойОбласти = "П000020000301" + Сред(ИмяОбласти, 14);
		СвязаннаяОбласть = ПТД_Возвраты.Области[ИмяСвязаннойОбласти];
		СвязаннаяОбласть.Значение = ?(ПустаяСтрока(РезультатВыбора.Код), "", РезультатВыбора.Название);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)
	
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

Процедура Очистить() Экспорт
	
	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСлужебныеДанныеРаздела(ИмяСтраницыПанели)
	
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
		СтраницыРазделаПриложение = мСтруктураМногостраничныхРазделов[ИмяСтраницыПанели];
		
		АктивнаяСтраница = СтраницыРазделаПриложение.Найти(Истина, "АктивнаяСтраница");
		Если АктивнаяСтраница = Неопределено ИЛИ ТипЗнч(АктивнаяСтраница.ДополнительныеДанные) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		АктивнаяСтраница.ДополнительныеДанные = Новый Структура;
		
	Иначе
		ДополнительныеДанные[ИмяСтраницыПанели] = Неопределено;
		ВосстановитьСтруктуруДополнительныхДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСтруктуру(ОчищаемаяСтруктура)
	
	Если ТипЗнч(ОчищаемаяСтруктура) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ОчищаемаяСтруктура Цикл
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Структура") Тогда
			ОчиститьСтруктуру(ОчищаемаяСтруктура[ЭлементСтруктуры.Ключ]);
		Иначе
			ОчищаемаяСтруктура[ЭлементСтруктуры.Ключ] = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(ЭлементСтруктуры.Значение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в нее данные текущего табличного поля
//
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры

// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
//  Шаг                      - число,  номер страницы, на которую необходимо перейти;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)
	
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		УстановитьДоступностьПолейДекларация()
	ИначеЕсли ИмяТекущейСтраницыПанели = "Возвраты" Тогда
		УстановитьДоступностьПолейВозвраты()
	КонецЕсли;;
	
КонецПроцедуры

// Определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	
	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе
	
	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да
	
	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да
	
	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);
	
	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);
	
	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да
	
	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("ПерестановкаСтраницЗапрещена", мОписаниеТиповБулево);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", мОписаниеТиповБулево);
	
	мСвойстваРазделовДекларации.Строки.Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Лицензии";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Декларация";
	СтрокаУровня1.МногострочностьВРазделе              = 2;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь; // Не инициализировать элементы  управления корректировкой автозаполняемых значений
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Возвраты";
	СтрокаУровня1.МногострочностьВРазделе              = 2;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь; // Не инициализировать элементы  управления корректировкой автозаполняемых значений
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницы) Экспорт
	
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяСтраницы = "Декларация" Тогда
		
		// Так как раздел содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы11);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы12);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		// Обновим структуру, хранящую данные строк многострочных блоков.
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы11, ПромежуточнаяТаблица);
		ТаблицаДопСтрокГруппы11 = ПромежуточнаяТаблица.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы11, ТаблицаДопСтрокГруппы11);
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы12, ПромежуточнаяТаблица);
		ТаблицаДопСтрокГруппы12 = ПромежуточнаяТаблица.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы12, ТаблицаДопСтрокГруппы12);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Возвраты" Тогда
		
		// Так как раздел содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы11);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы12);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		// Обновим структуру, хранящую данные строк многострочных блоков.
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы21, ПромежуточнаяТаблица);
		ТаблицаДопСтрокГруппы21 = ПромежуточнаяТаблица.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы21, ТаблицаДопСтрокГруппы21);
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы22, ПромежуточнаяТаблица);
		ТаблицаДопСтрокГруппы22 = ПромежуточнаяТаблица.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы22, ТаблицаДопСтрокГруппы22);
		
	КонецЕсли;
	
	Возврат СтруктураДанныхДопСтрокРаздела;
	
КонецФункции

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы11 ИЛИ ИдГруппы = мИдГруппы12 Тогда
		ТекТабличноеПоле = ПТД_Декларация;
		
	ИначеЕсли ИдГруппы = мИдГруппы21 ИЛИ  ИдГруппы = мИдГруппы22 Тогда
		ТекТабличноеПоле = ПТД_Возвраты;
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ПТД_Декларация.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Возвраты" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ПТД_Возвраты.ТекущаяОбласть);
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт
	
	ТабличноеПолеИмя = ТабличноеПоле.Имя;
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции // СобратьДанныеТекущегоТаблПоля()

Процедура ЗаполнитьПоляНомераКорректировки()
	
	ВыбранКорректирующийВидДок = (ВидДокумента = 1);
	
	Если ВыбранКорректирующийВидДок Тогда
		ПредставлениеНомера = Формат(НомерКорректировки, "ЧЦ=2; ЧВН=");
	Иначе
		ПредставлениеНомера = "";
	КонецЕсли;
	
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "НомКорр", 2, ПредставлениеНомера);
	
КонецПроцедуры

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	ЕстьИзменения = Ложь;
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// В новой версии формы не предусмотрено задание вариантов автозаполнения для текущей страницы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			Иначе
				// Актуализация вариантов автозаполнения текущей страницы.
				Для Каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для Каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						ДействующийВариантАвтозаполнения = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
						Если ДействующийВариантАвтозаполнения = Неопределено Тогда
							// Новый автозаполняемый показатель.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
							
						Иначе
							// Показатель должен соответствовать эталону, кроме удовлетворяющих следующим критериям:
							// - вариант эталона не 4 (авторасчет)и не 5 (запрет ввода значения);
							// - действующий вариант допускает корректировку (варианты 1-3).
							ИспользоватьДействующийВариант = ((ДействующийВариантАвтозаполнения.ВариантЗаполнения = 1
							                             ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 2
							                             ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 3)
							                               И (ВариантЗаполнения <> 4) И (ВариантЗаполнения <> 5));
							Если Не ИспользоватьДействующийВариант Тогда
								ДействующийВариантАвтозаполнения.КодПоказателя     = КодПоказателя;
								ДействующийВариантАвтозаполнения.ВариантЗаполнения = ВариантЗаполнения;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ТаблДляЦикла = ЭлементМассива.Скопировать();
					Для Каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// В новой версии отчета автозаполнение показателя не предусмотрено.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Обработка флага авторасчета отчета.
		ЭлементДереваСтраниц = мДеревоСтраницОтчета.Строки.Найти(ИмяСтраницы, "ИмяСтраницы");
		Если ЭлементДереваСтраниц <> Неопределено Тогда
			
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницы);
			
			Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда
				
				Для Каждого СтрокаВариантаЗаполнения Из ТаблицаВариантыЗаполнения Цикл
					Если СтрокаВариантаЗаполнения.ВариантЗаполнения = 4 ИЛИ СтрокаВариантаЗаполнения.ВариантЗаполнения = 0 Тогда
						СтрокаВариантаЗаполнения.ВариантЗаполнения = ?(ФлажокОтклАвтоРасчет, 0, 4);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			УстановитьЦветФонаЯчейки(, , ИмяСтраницы);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;
	
	Если мБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
		КонецЕсли;
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;
				
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				//ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
				
				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт

	Перем СтруктураГруппы;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");

			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;

			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;

		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

Процедура ПоказатьПериод()
	
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	// Период в заголовке формы отчета.
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
	
	Если (мДокументВосстановлен) И (мСкопированаФорма = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	//Если мСтруктураМногостраничныхРазделов.Титульный.Количество() > 1 Тогда
	//	НомерАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Титульный.Найти(Истина, "АктивнаяСтраница");
	//	ИндексАктивногоЭкз = мСтруктураМногостраничныхРазделов.Титульный.Индекс(НомерАктивнойСтраницы);
	//	Если ИндексАктивногоЭкз > 0 Тогда
	//		// Переход на первый экземпляр титульного листа.
	//		ПоказатьСтраницуМногостраничногоРаздела(0, "Титульный", Истина);
	//	КонецЕсли;
	//КонецЕсли;
	
	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	// Отображение на титульном листе отчетного периода.
	Значение1Кв = ?(НомерКвартала = "1", "V", "");
	ПТД_Титульный.Области.ОтчетныйПериод1Кв.Значение = Значение1Кв;
	
	Значение2Кв = ?(НомерКвартала = "2", "V", "");
	ПТД_Титульный.Области.ОтчетныйПериод2Кв.Значение = Значение2Кв;
	
	Значение3Кв = ?(НомерКвартала = "3", "V", "");
	ПТД_Титульный.Области.ОтчетныйПериод3Кв.Значение = Значение3Кв;
	
	Значение4Кв = ?(НомерКвартала = "4", "V", "");
	ПТД_Титульный.Области.ОтчетныйПериод4Кв.Значение = Значение4Кв;
	
	ПТД_Титульный.Области.ОтчетныйГод1.Значение   = Сред(НомерГода, 1, 1);
	ПТД_Титульный.Области.ОтчетныйГод2.Значение   = Сред(НомерГода, 2, 1);
	ПТД_Титульный.Области.ОтчетныйГод3.Значение   = Сред(НомерГода, 3, 1);
	ПТД_Титульный.Области.ОтчетныйГод4.Значение   = Сред(НомерГода, 4, 1);
	
	//Если мСтруктураМногостраничныхРазделов.Титульный.Количество() > 1 Тогда
	//	Если ИндексАктивногоЭкз > 0 Тогда
	//		ПоказатьСтраницуМногостраничногоРаздела(ИндексАктивногоЭкз, "Титульный", Истина);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук = "";
	ДатаПодписиБух = "";
	ДатаПодписиУП = "";

	Если РегламентированнаяОтчетность.ПустоеЗначение(ПТД_Титульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = "        ";
	Иначе
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	Если РегламентированнаяОтчетность.ПустоеЗначение(ПТД_Титульный.Области.ОргБухгалтер.Значение) Тогда
		ДатаПодписиБух = "        ";
	Иначе
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	Для НомЯчейки = 1 По 8 Цикл
		
		ПТД_Титульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		ПТД_Титульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в декларацию
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	
	Сведения = "";
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ТелОрганизации, " + ?(ЭтоПБОЮЛ, "АдрПрописки, ", "АдрЮР, ");
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		Для Инд = СтрДлина(ИНН) + 1 По 12 Цикл
			ИНН = "0" + ИНН ;
		КонецЦикла;
		ПроставитьНаВсехЛистах("ИНН1_", ИНН);
		
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		ПроставитьНаВсехЛистах("КПП1_", КПП);
		
		Если ЭтоПБОЮЛ Тогда
			ЮридическийАдрес = СведенияОбОрганизации.АдрПрописки;
		Иначе
			ЮридическийАдрес = СведенияОбОрганизации.АдрЮр;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЮридическийАдрес) Тогда
			СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(ЮридическийАдрес);
		КонецЕсли;
		
		АдресОрганизации = ДополнительныеДанные.Титульный.АдресОрганизации;
		ОчиститьСтруктуру(АдресОрганизации);
		
		Если Не СтруктураАдреса = Неопределено Тогда
			АдресОрганизации.КодСтраны       = СокрЛП(СтруктураАдреса.Страна);
			АдресОрганизации.Индекс          = СокрЛП(СтруктураАдреса.Индекс);
			АдресОрганизации.КодРегиона      = РегламентированнаяОтчетность.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион));
			АдресОрганизации.Район           = СокрЛП(СтруктураАдреса.Район);
			АдресОрганизации.Город           = СокрЛП(СтруктураАдреса.Город);
			АдресОрганизации.НаселенныйПункт = СокрЛП(СтруктураАдреса.НаселенныйПункт);
			АдресОрганизации.Улица           = СокрЛП(СтруктураАдреса.Улица);
			АдресОрганизации.Дом             = СокрЛП(СтруктураАдреса.Дом);
			АдресОрганизации.Корпус          = СокрЛП(СтруктураАдреса.Корпус);
			АдресОрганизации.Квартира        = СокрЛП(СтруктураАдреса.Квартира);
			АдресОрганизации.Адрес           = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(ЮридическийАдрес);
		КонецЕсли;
		
		ЗаполнитьПоляАдресаОрганизации(АдресОрганизации);
		ДополнительныеДанные.Титульный.Вставить("АдресОрганизации", АдресОрганизации);
		
	КонецЕсли;
	Сведения = Сведения + "ФИОРук, ФИОБух";
	
	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);
	
	ФИОРук = ""; ФИОБух = "";	
	Если ЭтоПБОЮЛ Тогда
		ФИОРук = Организация.ИндивидуальныйПредприниматель.Наименование;
	ИначеЕсли Результат <> Неопределено Тогда
		ФИОРук = Результат.ФИОРук;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		ФИОБух = Результат.ФИОБух;		
	КонецЕсли;
	
	ЗаполнитьСведенияОбОтвественныхЛицах(ФИОРук, ФИОБух);
	
КонецПроцедуры

Процедура ЗаполнитьПоляАдресаОрганизации(Адрес)
	
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ПочтовыйИндекс", 6, Адрес.Индекс);
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "КодРегиона", 2, Адрес.КодРегиона);
	ПТД_Титульный.Области.АдресРайон.Значение = Адрес.Район;
	ПТД_Титульный.Области.АдресГород.Значение = ?(ПустаяСтрока(Адрес.Город), Адрес.НаселенныйПункт, Адрес.Город);
	ПТД_Титульный.Области.АдресУлица.Значение = Адрес.Улица;
	
	СтрокаДома = Адрес.Дом;
	СтрокаДома = СтрокаДома + ?(ПустаяСтрока(Адрес.Корпус), "", ", " + Адрес.Корпус);
	СтрокаДома = СтрокаДома + ?(ПустаяСтрока(Адрес.Квартира), "", ", " + Адрес.Квартира);
	ПТД_Титульный.Области.АдресДом.Значение = СтрокаДома;
	
КонецПроцедуры

// Процедура проставить на всех страницах раздела 1 требуемые значения
// Параметры:
//  ОргДиректор    - ФИО директора
//  ОргБухгалтер   - ФИО бухгалтера
//
Процедура ЗаполнитьСведенияОбОтвественныхЛицах(Знач ОргДиректор, Знач ОргБухгалтер) // , Знач Исполнитель
	
	ПТД_Титульный.Области.ОргДиректор.Значение = ОргДиректор;
	ПТД_Титульный.Области.ОргБухгалтер.Значение = ОргБухгалтер;
	
	ПТД_Декларация.Области.Руководитель.Значение = ОргДиректор;
	ПТД_Декларация.Области.Бухгалтер.Значение = ОргБухгалтер;
	
	ПТД_Возвраты.Области.Руководитель.Значение = ОргДиректор;
	ПТД_Возвраты.Области.Бухгалтер.Значение = ОргБухгалтер;
	
КонецПроцедуры

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт
	// Процедура "заглушка". Для совместимости с общими механизмами работы с многостраничными разделами.
	Возврат;
КонецПроцедуры // УправлениеЛистами

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	
	// Защита от случая, когда передают многострочную часть с количеством строк менее чем исходное.
	Если ИсходноеКоличествоСтрокГруппы > ТекущееКоличествоСтрокГруппы Тогда
		Для Инд = 1 По (ИсходноеКоличествоСтрокГруппы - ТекущееКоличествоСтрокГруппы) Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(ИсходноеКоличествоСтрокГруппы, "ЧГ=0");
		ОбластьЯчейкиПоследнейСтроки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
		
		ПрототипДобавляемойОбласти = ТекТабличноеПоле.ПолучитьОбласть(ОбластьЯчейкиПоследнейСтроки.Верх, , ОбластьЯчейкиПоследнейСтроки.Низ, );
		ПомежуточныйТабличныйДокумент = Новый ТабличныйДокумент;
		
		Для НомерНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
			ПомежуточныйТабличныйДокумент.Вывести(ПрототипДобавляемойОбласти);
			
			// Переопределение имен областей вставленной строки.
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				ИмяОбластиПрототипа = ИмяКолонки + "_" + Формат(ИсходноеКоличествоСтрокГруппы, "ЧГ=0");
				НазначаемоеИмяОбластиДобавленнойСтроки = ИмяКолонки + "_" + Формат(НомерНовойСтроки, "ЧГ=0");
				
				ОбластьДобавленнойСтроки = ПомежуточныйТабличныйДокумент.Области[ИмяОбластиПрототипа];
				ОбластьДобавленнойСтроки.Имя = НазначаемоеИмяОбластиДобавленнойСтроки;
				
				Если ОбластьДобавленнойСтроки.СодержитЗначение = Истина Тогда
					ОбластьДобавленнойСтроки.Очистить();
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		ВставляемаяОбласть = ПомежуточныйТабличныйДокумент.Область(1, , ПомежуточныйТабличныйДокумент.ВысотаТаблицы, );
		ПозицияВставки = ТекТабличноеПоле.Область(ОбластьЯчейкиПоследнейСтроки.Верх + 1, , ОбластьЯчейкиПоследнейСтроки.Низ + 1, );
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, ПозицияВставки, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЕсли;
	
	// Вывод значений показателей по строкам.
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			
			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];
			
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
			Иначе
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	мСтруктураМногострочныхРазделов[ИмяГруппы] = СтруктураГруппы.Скопировать();
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

Процедура ВставитьДополнительнуюСтроку()
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы); // Исходное количество строк группы
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(КолСтрок, "ЧГ=0");
	
	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, ,ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	// Переопределение имен вставленной области.
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
		
		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(КолСтрок, "ЧГ=0");
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат((КолСтрок + 1), "ЧГ=0");
		
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
		
		// Границы ячейки исходной области.
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
		
		// Назначаем имя ячейки исходной области, т.к. в результате вставки новой области оно было очищено.
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
		
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат((КолСтрок + 1), "ЧГ=0");
	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	ТекущийЭлемент = ТекТабличноеПоле;
	
	СтруктураГруппы.Добавить();
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура УдалитьДополнительнуюСтроку()
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	ИмяРаздела = Сред(ТекТабличноеПоле.Имя, 24);
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	// Проверка вхождения текущей (выделенной) ячейки в многострочный раздел.
	Область    = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяОбласти = Область.Имя;
	ИмяГруппы  = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, Область);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы); // Сохранение данных многострочной части из табличного документа в таблицу значений
	
	НомерУдаляемойСтрокиТекстовый = Сред(ИмяОбласти, Найти(ИмяОбласти, "_") + 1);
	НомУдаляемойСтроки = Число(НомерУдаляемойСтрокиТекстовый);
	
	ИндексСтрокиТаблицы = НомУдаляемойСтроки - 1;
	
	// Удаление дополнительных данных.
	СтраницыРаздела = Неопределено;
	РазделМногостраничный = мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, СтраницыРаздела);
	АктивнаяСтраница = Неопределено;
	
	Если РазделМногостраничный Тогда
		АктивнаяСтраница = СтраницыРаздела.Найти(Истина, "АктивнаяСтраница");
		Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные) = Тип("Структура") Тогда
			Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные) = Тип("Структура") Тогда
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяДополнительныхДанных = Колонка.Имя + "_" + НомерУдаляемойСтрокиТекстовый;
					Если АктивнаяСтраница.ДополнительныеДанные.Свойство(ИмяДополнительныхДанных) Тогда
						АктивнаяСтраница.ДополнительныеДанные.Удалить(ИмяДополнительныхДанных);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяДополнительныхДанных = Колонка.Имя + "_" + НомерУдаляемойСтрокиТекстовый;
			Если ДополнительныеДанные[ИмяРаздела].Свойство(ИмяДополнительныхДанных) Тогда
				ДополнительныеДанные[ИмяРаздела].Удалить(ИмяДополнительныхДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомерУдаляемойСтрокиТекстовый;
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Переименование ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для Инд = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[Инд - 1];
				
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат(Инд, "ЧГ=0");
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат(Инд - 1, "ЧГ=0");
					
					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
					
					// Изменение имени дополнительных данных ячейки.
					Если РазделМногостраничный Тогда
						Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные) = Тип("Структура") Тогда
							Если АктивнаяСтраница.ДополнительныеДанные.Свойство(ИмяСдвинутойЯчейки) Тогда
								АктивнаяСтраница.ДополнительныеДанные.Вставить(НовоеИмяСдвинутойЯчейки, АктивнаяСтраница.ДополнительныеДанные[ИмяСдвинутойЯчейки]);
								АктивнаяСтраница.ДополнительныеДанные.Удалить(ИмяСдвинутойЯчейки);
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если ДополнительныеДанные[ИмяРаздела].Свойство(ИмяСдвинутойЯчейки) Тогда
							ДополнительныеДанные[ИмяРаздела].Вставить(НовоеИмяСдвинутойЯчейки, ДополнительныеДанные[ИмяРаздела][ИмяСдвинутойЯчейки]);
							ДополнительныеДанные[ИмяРаздела].Удалить(ИмяСдвинутойЯчейки);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураГруппы.Удалить(ИндексСтрокиТаблицы);
		
	Иначе
		// Строка не удаляется в форме табличного документа, а осуществляется сдвиг строк.
		СтруктураГруппы.Удалить(ИндексСтрокиТаблицы);
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			КонецЦикла;
		КонецЦикла;
		
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		
	КонецЕсли;
	
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки,"ЧГ=0");
	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	ТекущийЭлемент = ТекТабличноеПоле;
	Модифицированность = Истина;
	
КонецПроцедуры // УдалитьДополнительнуюСтроку()

Процедура ПронумероватьТаблицыДекларации()
	
	ЭтоПерваяСтраница = мСтруктураМногостраничныхРазделов.Декларация[0].АктивнаяСтраница;
	Если ЭтоПерваяСтраница Тогда
		ПроставитьНомераВТаблицеДекларация(ПТД_Декларация, "П0000100001");
	КонецЕсли;
	ПроставитьНомераВТаблицеДекларация(ПТД_Декларация, "П0000100003");
	
	ЭтоПерваяСтраница = мСтруктураМногостраничныхРазделов.Возвраты[0].АктивнаяСтраница;
	Если ЭтоПерваяСтраница Тогда
		ПроставитьНомераВТаблицеДекларация(ПТД_Возвраты, "П0000200001");
	КонецЕсли;
	ПроставитьНомераВТаблицеДекларация(ПТД_Возвраты, "П0000200003");
	
КонецПроцедуры

Процедура ПроставитьНомераВТаблицеДекларация(ПолеТабличногоДокумента, ПрефиксИмениТаблицы)
	
	ИмяГрафыНомераПП = ПрефиксИмениТаблицы + "00";
	
	НомерСтроки = 1;
	Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
	Пока ПолеТабличногоДокумента.Области.Найти(ИмяГрафыНомераПП + Постфикс) <> Неопределено Цикл
		ПолеТабличногоДокумента.Области[ИмяГрафыНомераПП + Постфикс].Значение = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт
	
	ИмяТабличногоПоля = ВыбТабличноеПоле.Имя;
	ИмяСтраницыФормы  = СтрЗаменить(ИмяТабличногоПоля, "ПолеТабличногоДокумента", "");
	
	// Сначала получим структуру данных многострочных блоков табличного поля.
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницыФормы);
	
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	Если СтруктураДанныхДопСтрокРаздела <> Неопределено Тогда
		// Табличное поле содержит многострочные блоки.
		// Удалим все созданные дополнительные строки в блоке.
		Для Каждого МногострочныйБлок Из СтруктураДанныхДопСтрокРаздела Цикл
			
			ИмяГруппыДопСтрок = МногострочныйБлок.Ключ;
			
			// Получим таблицу значений, содержащую данные дополнительных строк.
			ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
			
			ИсходноеКоличествоСтрокГруппы = 0;
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
			
			ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
			
			Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
				// Имеются дополнительные строки.
				// Удаляем их.
				
				НСтр = ПромТаблицаДопСтрокРаздела.Количество();
				Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
					
					ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
					
					ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
					ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");
					
					// область первой ячейки удаляемой строки многострочного раздела
					ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
					
					// номера строк удаляемой области
					НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
					НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
					
					// Определим область удаляемой строки
					УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
					
					// непосредственно удаляем область строки табличного документа
					ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
					
					// удаляем из структуры многострочного раздела соответствующую строку
					ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
					
					НСтр = НСтр - 1;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбласти = ТекущаяОбласть.Имя;
		Если ТекущаяОбласть.Защита И НЕ Найти(ИмяОбласти, "П0000") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
		
	КонецЦикла;
	
	Если СтруктураДанныхДопСтрокРаздела <> Неопределено Тогда
		Для Каждого МногострочныйБлок Из СтруктураДанныхДопСтрокРаздела Цикл
			ИмяГруппыДопСтрок = МногострочныйБлок.Ключ;
			ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
		КонецЦикла;
	КонецЕсли;
	
	Расчет(ИмяСтраницыФормы);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

Процедура СпециальныеОперацииПослеОчисткиЛиста(ИмяСтраницы, УдалятьсяВсеДопЭкземпляры) Экспорт
	
	ОчиститьСлужебныеДанныеРаздела(ИмяСтраницы);
	
КонецПроцедуры

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт
	
	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
		               |задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	
	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",          ЧтоИскать);
		
		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		ИначеЕсли ЧтоИскать = Неопределено И ИмяСтраницыПанели = "Декларация" Тогда
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДекларация(СтруктураПараметров);
		ИначеЕсли ЧтоИскать = Неопределено И ИмяСтраницыПанели = "Возвраты" Тогда
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьВозвраты(СтруктураПараметров);
		Иначе
			// Вывод на печать всех страниц многостраничного раздела.
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;
	
	// Обновляем исходное дерево значений.
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	мРежимПечати = Ложь;
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиНаПечатьДекларация(СтруктураПараметровСтраницы)
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	
	МакетПечати = ПолучитьМакет("ФормаПечати2012Кв3_Декларация");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровСтраницы.ОриентацияЛиста;
	
	Область_Шапка = МакетПечати.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(Область_Шапка);
	
	Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
	
	Наименование = СокрЛП(ПТД_Титульный.Области.ОргНазв.Значение);
	ИНН = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ИНН1_");
	Если НЕ ЭтоПБОЮЛ И Лев(ИНН, 2) = "00" Тогда
		ИНН = Сред (ИНН, 3); // Удаление нулей, добавленных в соответствии с порядком заполнения.
	КонецЕсли;
	КПП = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	Адрес = Неопределено;
	АдресОрганизации = ДополнительныеДанныеПоАдресу(ДополнительныеДанные, "Титульный.АдресОрганизации");
	Если АдресОрганизации <> Неопределено Тогда
		АдресОрганизации.Свойство("Адрес", Адрес);
	КонецЕсли;
	Если Адрес= Неопределено Тогда
		Сведения = "АдрЮР";
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
		Адрес = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрЮр);
	КонецЕсли;
	ТекстРеквизитов = Наименование + ", ИНН " + ИНН + ", КПП " + КПП + ", Адрес: " + Адрес;
	
	ДанныеПоОрганизации = мСтруктураМногостраничныхРазделов.Декларация[0].ДанныеДопСтрок.П0000100001.Скопировать();
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("МакетПечати", МакетПечати);
	ПараметрыВывода.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ПараметрыВывода.Вставить("ПечатнаяФорма", ПечатнаяФорма);
	ПараметрыВывода.Вставить("ЗаголовокРеквизитов", "Сведения по организации");
	ПараметрыВывода.Вставить("ТекстРеквизитов", ТекстРеквизитов);
	ПараметрыВывода.Вставить("ИтогГрафа16", мСтруктураМногостраничныхРазделов.Декларация[0].Данные.П000010000216);
	ПараметрыВывода.Вставить("ИтогГрафа20", мСтруктураМногостраничныхРазделов.Декларация[0].Данные.П000010000220);
	ВывестиНаПечатьТаблицу(ДанныеПоОрганизации, ПараметрыВывода);
	
	ВозвратыПоОрганизации = мСтруктураМногостраничныхРазделов.Возвраты[0].ДанныеДопСтрок.П0000200001.Скопировать();
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("МакетПечати", МакетПечати);
	ПараметрыВывода.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ПараметрыВывода.Вставить("ПечатнаяФорма", ПечатнаяФорма);
	ПараметрыВывода.Вставить("ЗаголовокРеквизитов", "Возвраты по организации");
	ПараметрыВывода.Вставить("ТекстРеквизитов", ТекстРеквизитов);
	ПараметрыВывода.Вставить("ИтогГрафа16", мСтруктураМногостраничныхРазделов.Возвраты[0].Данные.П000020000216);
	ПараметрыВывода.Вставить("ИтогГрафа20", мСтруктураМногостраничныхРазделов.Возвраты[0].Данные.П000020000220);
	
	Если ТаблицаЗаполнена(ВозвратыПоОрганизации) Тогда
		ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
		ВывестиНаПечатьТаблицу(ВозвратыПоОрганизации, ПараметрыВывода);
	КонецЕсли;
	
	ДанныеДекларации = мСтруктураМногостраничныхРазделов.Декларация.Скопировать();
	ДанныеВозвратов = мСтруктураМногостраничныхРазделов.Возвраты.Скопировать();
	ДанныеВозвратов.Колонки.Добавить("Распечатана", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ЛистДекларации Из ДанныеДекларации Цикл
		
		ПараметрыВывода = Новый Структура;
		ПараметрыВывода.Вставить("МакетПечати", МакетПечати);
		ПараметрыВывода.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
		ПараметрыВывода.Вставить("ПечатнаяФорма", ПечатнаяФорма);
		ПараметрыВывода.Вставить("ЗаголовокРеквизитов", "Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса)");
		ПараметрыВывода.Вставить("ТекстРеквизитов", ЛистДекларации.Данные.ОбособленноеПодразделение);
		ПараметрыВывода.Вставить("ИтогГрафа16", ЛистДекларации.Данные.П000010000416);
		ПараметрыВывода.Вставить("ИтогГрафа20", ЛистДекларации.Данные.П000010000420);
		
		ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
		ВывестиНаПечатьТаблицу(ЛистДекларации.ДанныеДопСтрок.П0000100003, ПараметрыВывода);
		
		КППОбособленногоПодразделения = ДополнительныеДанныеПоАдресу(ЛистДекларации.ДополнительныеДанные, "СведенияОбОП.КПП");
		Если ЗначениеЗаполнено(КППОбособленногоПодразделения) Тогда
			Для Каждого ЛистВозвратов Из ДанныеВозвратов Цикл
				Если ЛистВозвратов.Распечатана Тогда
					Продолжить;
				КонецЕсли;
				
				КППОбособленногоПодразделенияВозвраты = ДополнительныеДанныеПоАдресу(ЛистВозвратов.ДополнительныеДанные, "СведенияОбОП.КПП");
				Если КППОбособленногоПодразделения = КППОбособленногоПодразделенияВозвраты Тогда
					ЛистВозвратов.Распечатана = Истина;
					
					ПараметрыВывода = Новый Структура;
					ПараметрыВывода.Вставить("МакетПечати", МакетПечати);
					ПараметрыВывода.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
					ПараметрыВывода.Вставить("ПечатнаяФорма", ПечатнаяФорма);
					ПараметрыВывода.Вставить("ЗаголовокРеквизитов", "Возвраты по обособленному подразделению (с указанием ИНН, КПП и адреса)");
					ПараметрыВывода.Вставить("ТекстРеквизитов", ЛистВозвратов.Данные.ОбособленноеПодразделение);
					ПараметрыВывода.Вставить("ИтогГрафа16", ЛистВозвратов.Данные.П000020000416);
					ПараметрыВывода.Вставить("ИтогГрафа20", ЛистВозвратов.Данные.П000020000420);
					
					ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
					Если ТаблицаЗаполнена(ЛистВозвратов.ДанныеДопСтрок.П0000200003) Тогда
						ВывестиНаПечатьТаблицу(ЛистВозвратов.ДанныеДопСтрок.П0000200003, ПараметрыВывода);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЛистВозвратов Из ДанныеВозвратов Цикл
		Если ЛистВозвратов.Распечатана Тогда
			Продолжить;
		КонецЕсли;
		
		ЛистВозвратов.Распечатана = Истина;
		
		ПараметрыВывода = Новый Структура;
		ПараметрыВывода.Вставить("МакетПечати", МакетПечати);
		ПараметрыВывода.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
		ПараметрыВывода.Вставить("ПечатнаяФорма", ПечатнаяФорма);
		ПараметрыВывода.Вставить("ЗаголовокРеквизитов", "Возвраты по обособленному подразделению (с указанием ИНН, КПП и адреса)");
		ПараметрыВывода.Вставить("ТекстРеквизитов", ЛистВозвратов.Данные.ОбособленноеПодразделение);
		ПараметрыВывода.Вставить("ИтогГрафа16", ЛистВозвратов.Данные.П000020000416);
		ПараметрыВывода.Вставить("ИтогГрафа20", ЛистВозвратов.Данные.П000020000420);
		
		ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
		Если ТаблицаЗаполнена(ЛистВозвратов.ДанныеДопСтрок.П0000200003) Тогда
			ВывестиНаПечатьТаблицу(ЛистВозвратов.ДанныеДопСтрок.П0000200003, ПараметрыВывода);
		КонецЕсли;
	КонецЦикла;
	
	Область_Подвал = МакетПечати.ПолучитьОбласть("Подвал");
	Область_Подвал.Области.Руководитель.Значение = мСтруктураМногостраничныхРазделов.Декларация[0].Данные.Руководитель;
	Область_Подвал.Области.Бухгалтер.Значение = мСтруктураМногостраничныхРазделов.Декларация[0].Данные.Бухгалтер;
	ПечатнаяФорма.Вывести(Область_Подвал);
	
	ПромежуточныйСписок = Новый СписокЗначений;
	ПромежуточныйСписок.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
	мПечатныеФормы.Добавить(ПромежуточныйСписок[0], СтруктураПараметровСтраницы.НаименованиеЛиста);
	
КонецПроцедуры

Процедура ВывестиНаПечатьВозвраты(СтруктураПараметровСтраницы)
	
	// Печать возвратов осуществляется вместе с печатью декларации.
	
КонецПроцедуры

Процедура ВывестиНаПечатьТаблицу(ИсходнаяТаблица, ПараметрыВывода)
	
	ПечатаемаяТаблица = ИсходнаяТаблица.Скопировать();
	
	МакетПечати = ПараметрыВывода.МакетПечати;
	ЭтоПБОЮЛ = ПараметрыВывода.ЭтоПБОЮЛ;
	ПечатнаяФорма = ПараметрыВывода.ПечатнаяФорма;
	
	ЗаголовокРеквизитов = ПараметрыВывода.ЗаголовокРеквизитов;
	ТекстРеквизитов = ПараметрыВывода.ТекстРеквизитов;
	
	ИтогГрафа16 = ПараметрыВывода.ИтогГрафа16;
	ИтогГрафа20 = ПараметрыВывода.ИтогГрафа20;
	
	Для Каждого Колонка Из ПечатаемаяТаблица.Колонки Цикл
		Колонка.Имя = "П0000100003" + Сред(Колонка.Имя, 12);
	КонецЦикла;
	
	Область_РеквизитыОрганизации = МакетПечати.ПолучитьОбласть("РеквизитыОрганизации");
	Область_РеквизитыОрганизации.Области.ЗаголовокРеквизитов.Текст = ЗаголовокРеквизитов;
	Область_РеквизитыОрганизации.Области.Реквизиты.Текст = ТекстРеквизитов;
	ПечатнаяФорма.Вывести(Область_РеквизитыОрганизации);
	
	Для Каждого СтрокаДанных Из ПечатаемаяТаблица Цикл
		Область_Строка = МакетПечати.ПолучитьОбласть("Строка");
		Для Каждого Колонка Из ПечатаемаяТаблица.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ИмяКолонкиМакета = Колонка.Имя;
			Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
				Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		ПечатнаяФорма.Вывести(Область_Строка);
	КонецЦикла;
	
	ПечатаемаяТаблица.Свернуть("П000010000302, П000010000303", "П000010000316, П000010000320");
	Для Каждого СтрокаДанных Из ПечатаемаяТаблица Цикл
		Область_СтрокаИтого = МакетПечати.ПолучитьОбласть("СтрокаИтого");
		Область_СтрокаИтого.Области.ОписаниеИтого.Текст = "Итого по производителю/импортеру " + СтрокаДанных.П000010000303 + " и коду " + СтрокаДанных.П000010000302;
		Для Каждого Колонка Из ПечатаемаяТаблица.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000100003", "П0000100004");
			Если Область_СтрокаИтого.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
				Область_СтрокаИтого.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		ПечатнаяФорма.Вывести(Область_СтрокаИтого);
	КонецЦикла;
	
	Область_СтрокаИтого = МакетПечати.ПолучитьОбласть("СтрокаИтого");
	Область_СтрокаИтого.Области.ОписаниеИтого.Текст = "ИТОГО";
	Область_СтрокаИтого.Области.П000010000416.Значение = ИтогГрафа16;
	Область_СтрокаИтого.Области.П000010000420.Значение = ИтогГрафа20;
	ПечатнаяФорма.Вывести(Область_СтрокаИтого);
	
КонецПроцедуры

Функция ТаблицаЗаполнена(ПроверяемаяТаблица)
	
	Для Каждого СтрокаТаблицы Из ПроверяемаяТаблица Цикл
		Для Каждого Колонка Из ПроверяемаяТаблица.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			Если Сред(ИмяКолонки, 12, 2) = "00" Тогда
				Продолжить; // Колонка номера по порядку
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонки]) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ТабличныеДокументы = Неопределено)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		
		Возврат;
	КонецЕсли;
	
	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;
	
	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт
	
	Перем ТаблицаСтраниц;
	
	Вариант = ВидДокумента * НомерКорректировки;
	
	КодИФНС = "";
	
	КПП = "";
	Для Инд = 1 по 9 Цикл
		КПП = КПП + ПТД_Титульный.Области["КПП1_" + Строка(Инд)].Значение;
	КонецЦикла;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	мСохраненныйДок.КПП                = КПП;
	мСохраненныйДок.ИсточникОтчета     = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала         = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания      = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность      = мПериодичность;
	мСохраненныйДок.Комментарий        = Комментарий;
	мСохраненныйДок.ВыбраннаяФорма     = мВыбраннаяФорма;
	мСохраненныйДок.Организация        = Организация;
	мСохраненныйДок.ДатаПодписи        = ДатаПодписи;
	мСохраненныйДок.ВидОтчетности      = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.КодИМНС            = КодИФНС;
	
	мСохраненныйДок.Вид                = Вариант;
	
	мВариант = Вариант;
	
	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	ОбновитьСтруктуруМногострочныхРазделов();
	
	ОбновитьСтруктуруМногостраничныхРазделов();
	
	ПоказателиОтчета = Новый Структура();
	
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		ЭтоМногостраничныйРаздел = мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц);
		
		Если НЕ ЭтоМногостраничныйРаздел Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Вставить("ПризнакФормыОтчетности", ПризнакФормыОтчетности);
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);
	
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	СписокСохранения.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма, "ФСРАР");
	
	СохранитьДеревоСтраницОтчета();
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции // Сохранить()

Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		Организация = мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = мСохраненныйДок.ДатаПодписи;
	Комментарий = мСохраненныйДок.Комментарий;
	
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();
	
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;
		
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			мСтараяВерсияФормы = ВерсияФормы;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	СписокСохранения.Свойство("ПризнакФормыОтчетности", ПризнакФормыОтчетности);
	Если ПризнакФормыОтчетности = Неопределено Тогда
		ПризнакФормыОтчетности = 1;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
		
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("ДополнительныеДанные", ДополнительныеДанные);
	ВосстановитьСтруктуруДополнительныхДанных();
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
				
			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекТабличноеПоле.Области.Найти(ИмяПоказателя) <> Неопределено Тогда
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	// Управляем видимостью страниц основной панели формы.
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	мДокументВосстановлен = Истина;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура РасчетСтарый(ИмяТекущейСтраницыПанели = "", НомерИзменяемойСтроки = Неопределено) Экспорт
	
	Если ФлажокОтклАвтоРасчет Или мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		РасчетДекларация();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Возвраты" Тогда
		//РасчетВозвраты();
		
	Иначе
		Расчет("Декларация");
		Расчет("Возвраты");
	КонецЕсли;
	
КонецПроцедуры // Расчет()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	
	Если ФлажокОтклАвтоРасчет Или мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Лицензии" Тогда
		// Раздел не рассчитывается.
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Декларация" Тогда
		РасчетДекларация();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Возвраты" Тогда
		РасчетВозвраты();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = Неопределено ИЛИ ИмяТекущейСтраницыПанели = "" Тогда
		ПолныйРасчетДекларация();
		ПолныйРасчетВозвраты();
		
	Иначе
		ВызватьИсключение "Вызов процедуры Расчет() с непредусмотренным параметром """ + ИмяТекущейСтраницыПанели + """";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолныйРасчетДекларация()
	
	СтруктураРаздела = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Декларация", СтруктураРаздела);
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		ОбработкаВТабличномПоле = СтраницаРаздела.АктивнаяСтраница;
		Если ОбработкаВТабличномПоле Тогда
			РазмещениеДанных = ПТД_Декларация;
		Иначе
			РазмещениеДанных = СтраницаРаздела.Данные;
		КонецЕсли;
		РасчетДекларация(РазмещениеДанных);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетДекларация(Знач МестоРазмещенияДанных = Неопределено)
	
	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если МестоРазмещенияДанных = Неопределено Тогда
		МестоРазмещенияДанных = ПТД_Декларация;
	КонецЕсли;
	
	РасчетДекларацияТаблица1(МестоРазмещенияДанных);
	РасчетДекларацияТаблица2(МестоРазмещенияДанных);
	
КонецПроцедуры

Процедура РасчетДекларацияТаблица1(МестоРазмещенияДанных)
	
	ИдГруппы = мИдГруппы11;
	КодСекции = "П0000100001";
	КодИтога = "П0000100002";
	СписокСуммируемыхГраф = "16,20";
	
	СтруктураГруппы = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, СтруктураГруппы);
	
	МассивНомеровГраф = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСуммируемыхГраф);
	СуммыПоГрафам = Новый Соответствие;
	Для Каждого Графа Из МассивНомеровГраф Цикл
		СуммыПоГрафам.Вставить(Графа, 0);
	КонецЦикла;
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		НомерСтроки = 1;
		ПостфиксСтроки = "_" + Формат(НомерСтроки, "ЧГ=0");
		Пока МестоРазмещенияДанных.Свойство(КодСекции + Графа + ПостфиксСтроки) Цикл
			КоличествоСтрок = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
			ПостфиксСтроки = "_" + Формат(НомерСтроки, "ЧГ=0");
		КонецЦикла;
	Иначе
		КоличествоСтрок = СтруктураГруппы.Количество();
	КонецЕсли;
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ПостфиксСтроки = "_" + Формат(Инд, "ЧГ=0");
		
		// Расчет значений для строки ИТОГО.
		Для Каждого Графа Из МассивНомеровГраф Цикл
			ИмяПоказателя = КодСекции + Графа + ПостфиксСтроки;
			ЗначениеГрафы = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, ИмяПоказателя);
			СуммыПоГрафам.Вставить(Графа, СуммыПоГрафам[Графа] + ЗначениеГрафы);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Графа Из МассивНомеровГраф Цикл
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, КодИтога + Графа, СуммыПоГрафам[Графа]);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетДекларацияТаблица2(МестоРазмещенияДанных)
	
	ИдГруппы = мИдГруппы12;
	КодСекции = "П0000100003";
	КодИтога = "П0000100004";
	СписокСуммируемыхГраф = "16,20";
	
	СтруктураГруппы = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, СтруктураГруппы);
	
	МассивНомеровГраф = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСуммируемыхГраф);
	СуммыПоГрафам = Новый Соответствие;
	Для Каждого Графа Из МассивНомеровГраф Цикл
		СуммыПоГрафам.Вставить(Графа, 0);
	КонецЦикла;
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		НомерСтроки = 1;
		ПостфиксСтроки = "_" + Формат(НомерСтроки, "ЧГ=0");
		Пока МестоРазмещенияДанных.Свойство(КодСекции + Графа + ПостфиксСтроки) Цикл
			КоличествоСтрок = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
			ПостфиксСтроки = "_" + Формат(НомерСтроки, "ЧГ=0");
		КонецЦикла;
	Иначе
		КоличествоСтрок = СтруктураГруппы.Количество();
	КонецЕсли;
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ПостфиксСтроки = "_" + Формат(Инд, "ЧГ=0");
		
		// Расчет значений для строки ИТОГО.
		Для Каждого Графа Из МассивНомеровГраф Цикл
			ИмяПоказателя = КодСекции + Графа + ПостфиксСтроки;
			ЗначениеГрафы = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, ИмяПоказателя);
			СуммыПоГрафам.Вставить(Графа, СуммыПоГрафам[Графа] + ЗначениеГрафы);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Графа Из МассивНомеровГраф Цикл
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, КодИтога + Графа, СуммыПоГрафам[Графа]);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолныйРасчетВозвраты()
	
	СтруктураРаздела = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Возвраты", СтруктураРаздела);
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		ОбработкаВТабличномПоле = СтраницаРаздела.АктивнаяСтраница;
		Если ОбработкаВТабличномПоле Тогда
			РазмещениеДанных = ПТД_Возвраты;
		Иначе
			РазмещениеДанных = СтраницаРаздела.Данные;
		КонецЕсли;
		РасчетВозвраты(РазмещениеДанных);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетВозвраты(Знач МестоРазмещенияДанных = Неопределено)
	
	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если МестоРазмещенияДанных = Неопределено Тогда
		МестоРазмещенияДанных = ПТД_Возвраты;
	КонецЕсли;
	
	РасчетВозвратыТаблица1(МестоРазмещенияДанных);
	РасчетВозвратыТаблица2(МестоРазмещенияДанных);
	
КонецПроцедуры

Процедура РасчетВозвратыТаблица1(МестоРазмещенияДанных)
	
	ИдГруппы = мИдГруппы21;
	КодСекции = "П0000200001";
	КодИтога = "П0000200002";
	СписокСуммируемыхГраф = "16,20";
	
	СтруктураГруппы = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, СтруктураГруппы);
	
	МассивНомеровГраф = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСуммируемыхГраф);
	СуммыПоГрафам = Новый Соответствие;
	Для Каждого Графа Из МассивНомеровГраф Цикл
		СуммыПоГрафам.Вставить(Графа, 0);
	КонецЦикла;
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		НомерСтроки = 1;
		ПостфиксСтроки = "_" + Формат(НомерСтроки, "ЧГ=0");
		Пока МестоРазмещенияДанных.Свойство(КодСекции + Графа + ПостфиксСтроки) Цикл
			КоличествоСтрок = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
			ПостфиксСтроки = "_" + Формат(НомерСтроки, "ЧГ=0");
		КонецЦикла;
	Иначе
		КоличествоСтрок = СтруктураГруппы.Количество();
	КонецЕсли;
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ПостфиксСтроки = "_" + Формат(Инд, "ЧГ=0");
		
		// Расчет значений для строки ИТОГО.
		Для Каждого Графа Из МассивНомеровГраф Цикл
			ИмяПоказателя = КодСекции + Графа + ПостфиксСтроки;
			ЗначениеГрафы = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, ИмяПоказателя);
			СуммыПоГрафам.Вставить(Графа, СуммыПоГрафам[Графа] + ЗначениеГрафы);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Графа Из МассивНомеровГраф Цикл
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, КодИтога + Графа, СуммыПоГрафам[Графа]);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетВозвратыТаблица2(МестоРазмещенияДанных)
	
	ИдГруппы = мИдГруппы22;
	КодСекции = "П0000200003";
	КодИтога = "П0000200004";
	СписокСуммируемыхГраф = "16,20";
	
	СтруктураГруппы = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, СтруктураГруппы);
	
	МассивНомеровГраф = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСуммируемыхГраф);
	СуммыПоГрафам = Новый Соответствие;
	Для Каждого Графа Из МассивНомеровГраф Цикл
		СуммыПоГрафам.Вставить(Графа, 0);
	КонецЦикла;
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		НомерСтроки = 1;
		ПостфиксСтроки = "_" + Формат(НомерСтроки, "ЧГ=0");
		Пока МестоРазмещенияДанных.Свойство(КодСекции + Графа + ПостфиксСтроки) Цикл
			КоличествоСтрок = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
			ПостфиксСтроки = "_" + Формат(НомерСтроки, "ЧГ=0");
		КонецЦикла;
	Иначе
		КоличествоСтрок = СтруктураГруппы.Количество();
	КонецЕсли;
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ПостфиксСтроки = "_" + Формат(Инд, "ЧГ=0");
		
		// Расчет значений для строки ИТОГО.
		Для Каждого Графа Из МассивНомеровГраф Цикл
			ИмяПоказателя = КодСекции + Графа + ПостфиксСтроки;
			ЗначениеГрафы = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, ИмяПоказателя);
			СуммыПоГрафам.Вставить(Графа, СуммыПоГрафам[Графа] + ЗначениеГрафы);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Графа Из МассивНомеровГраф Цикл
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, КодИтога + Графа, СуммыПоГрафам[Графа]);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, АдресДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		ЗначениеВСтруктуре = Неопределено;
		Если МестоРазмещенияДанных.Свойство(АдресДанных, ЗначениеВСтруктуре) Тогда
			Возврат ЗначениеВСтруктуре;
		Иначе
			ВызватьИсключение "Невозможно получить данные из структуры: поле " + АдресДанных + " не существует";
		КонецЕсли;
	Иначе
		// Это должны быть данные в поле табличного документа.
		Возврат МестоРазмещенияДанных.Области[АдресДанных].Значение;
	КонецЕсли;
	
КонецФункции

Процедура ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, АдресДанных, ЗначениеДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		МестоРазмещенияДанных.Вставить(АдресДанных, ЗначениеДанных);
	Иначе
		МестоРазмещенияДанных.Области[АдресДанных].Значение = ЗначениеДанных;
	КонецЕсли;
	
КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	мБезОткрытияФормы = БезОткрытияФормы;
	
	ИнициализироватьПоляТабличныхДокументов();
	ИнициализироватьДополнительныеДанные();
	
	// Формируем список элементов подменю, связанное с кнопкой <Печать>.
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
	
	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
	
	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
	
	ЗаполнитьНачальныеНастройки();
	ФормироватьСтруктуруСвойствСтраниц();
	мРежимПечати = Ложь;
	
	мАвтоВыборКодов = Ложь;
	мВПрограммеИзмененаОрганизация = Ложь;
	мСтараяВерсияФормы = мВерсияФормы;
	мДокументВосстановлен = Ложь;
	
	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
		РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);		
	КонецЕсли;
	СформироватьСпискиВыбора();
	
	Если мСохраненныйДок = Неопределено Тогда
		
		// Исходная структура многострочных разделов.
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
			
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			
			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл
				
				СтрокаГруппы = СтруктураГруппы.Добавить();
				
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					
					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
					
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЦикла;
			КонецЦикла;
			
			ПронумероватьТаблицыДекларации();
			
		КонецЦикла;
		
		Если мСкопированаФорма <> Неопределено Тогда
			// Документ скопирован.
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию.
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			ПТД_Титульный.Области.ВидДокументаПервичный.Значение = "V";
			РасставитьНомераСтраниц();
		КонецЕсли;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если мСкопированаФорма <> Неопределено Тогда
			// Из-за смены формата выгрузки изменились коды видов деятельности
			ДатаКопируемогоОтчета = мСохраненныйДок.ДатаОкончания;
			ДатаЭтогоОтчета = мДатаКонцаПериодаОтчета;
			РазныеСпискиВидовДеятельности = (ДатаКопируемогоОтчета >= '20131101' И ДатаЭтогоОтчета < '20131101')
			                            Или (ДатаКопируемогоОтчета < '20131101' И ДатаЭтогоОтчета >= '20131101');
			Если РазныеСпискиВидовДеятельности Тогда
				Для Каждого Страница Из мСтруктураМногостраничныхРазделов.Лицензии Цикл
					Страница.Данные.П000000000105 = "";
					Страница.ДополнительныеДанные.П000000000105 = "";
				КонецЦикла;
				ПТД_Лицензии.Область("П000000000105").Значение = "";
				Сообщить(НСтр("ru='При копировании были очищены виды деятельности в разделе лицензий.'"));
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		Если НЕ мБезОткрытияФормы Тогда
			УправлениеЛистами();
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения.
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		
		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения.
		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;
		
		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение.
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ мБезОткрытияФормы Тогда
			УстановитьЦветФонаЯчейки( , , НазваниеСтраницы);
		КонецЕсли;
	
	КонецЦикла;
	
	Если мДатаКонцаПериодаОтчета >= '20131101' Тогда
		Если ЛицензируемаяДеятельность() Тогда
			УстановитьВариантДляЯчеекЛицензии(0);
		Иначе
			УстановитьВариантДляЯчеекЛицензии(5);
		КонецЕсли;
	КонецЕсли;
	
	Если мДатаКонцаПериодаОтчета < '20131101' Тогда		
		мВерсияФормата = "420";
	ИначеЕсли мДатаКонцаПериодаОтчета < '20150901' Тогда
		мВерсияФормата = "430";
	Иначе
		мВерсияФормата = "431";
	КонецЕсли;
	
	Если НЕ мБезОткрытияФормы Тогда
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСРАР", Новый Действие("Подключаемый_КоманднаяПанельФормыПоказатьРезультат"));
		
КонецПроцедуры

Процедура ИнициализироватьПоляТабличныхДокументов()
	
	Если мДатаКонцаПериодаОтчета < '20140101' Тогда
		Макет = ЭтотОбъект.ПолучитьМакет("ФормаОтчета2012Кв3_Титульный");
	Иначе
		Макет = ЭтотОбъект.ПолучитьМакет("ФормаОтчета2012Кв3_Титульный_20140101");
	КонецЕсли;
	ПТД_Титульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	ПТД_Титульный.Очистить();
	ПТД_Титульный.Вывести(Макет);
	
	Макет = ЭтотОбъект.ПолучитьМакет("ФормаОтчета2012Кв3_Лицензии");
	ПТД_Лицензии = ЭлементыФормы.ПолеТабличногоДокументаЛицензии;
	ПТД_Лицензии.Очистить();
	ПТД_Лицензии.Вывести(Макет);
	
	Макет = ЭтотОбъект.ПолучитьМакет("ФормаОтчета2012Кв3_Декларация");
	ПТД_Декларация = ЭлементыФормы.ПолеТабличногоДокументаДекларация;
	ПТД_Декларация.Очистить();
	ПТД_Декларация.Вывести(Макет);
	
	Макет = ЭтотОбъект.ПолучитьМакет("ФормаОтчета2012Кв3_Возвраты");
	ПТД_Возвраты = ЭлементыФормы.ПолеТабличногоДокументаВозвраты;
	ПТД_Возвраты.Очистить();
	ПТД_Возвраты.Вывести(Макет);
	
	ИнициализироватьПоляВводаТабличныхДокументов();
	
КонецПроцедуры

Процедура ИнициализироватьПоляВводаТабличныхДокументов()
	
	ПТД_Титульный.Области.СоставленаНа1.ЭлементУправления.Маска = "9";
	ПТД_Титульный.Области.СоставленаНа2.ЭлементУправления.Маска = "9";
	ПТД_Титульный.Области.СоставленаНа3.ЭлементУправления.Маска = "9";
	
	ПТД_Титульный.Области.Прил1.ЭлементУправления.Маска = "9";
	ПТД_Титульный.Области.Прил2.ЭлементУправления.Маска = "9";
	ПТД_Титульный.Области.Прил3.ЭлементУправления.Маска = "9";
	
	ПТД_Декларация.Области.П000010000102_1.ЭлементУправления.Маска = "999";
	ПТД_Декларация.Области.П000010000302_1.ЭлементУправления.Маска = "999";
	
	ПТД_Возвраты.Области.П000020000102_1.ЭлементУправления.Маска = "999";
	ПТД_Возвраты.Области.П000020000302_1.ЭлементУправления.Маска = "999";
	
	МаскаИНН10 = "9999999999";
	МаскаКПП = "999999999";
	
	ПТД_Декларация.Области.П000010000104_1.ЭлементУправления.Маска = МаскаИНН10;
	ПТД_Декларация.Области.П000010000304_1.ЭлементУправления.Маска = МаскаИНН10;
	
	ПТД_Возвраты.Области.П000020000104_1.ЭлементУправления.Маска = МаскаИНН10;
	ПТД_Возвраты.Области.П000020000304_1.ЭлементУправления.Маска = МаскаИНН10;
	
	ПТД_Декларация.Области.П000010000105_1.ЭлементУправления.Маска = МаскаКПП;
	ПТД_Декларация.Области.П000010000305_1.ЭлементУправления.Маска = МаскаКПП;
	
	ПТД_Возвраты.Области.П000020000105_1.ЭлементУправления.Маска = МаскаКПП;
	ПТД_Возвраты.Области.П000020000305_1.ЭлементУправления.Маска = МаскаКПП;
	
	ПТД_Возвраты.Области.П000020000109_1.ЭлементУправления.Маска = МаскаКПП;
	ПТД_Возвраты.Области.П000020000309_1.ЭлементУправления.Маска = МаскаКПП;
	
КонецПроцедуры

Процедура ИнициализироватьДополнительныеДанные()
	
	Если ТипЗнч(ДополнительныеДанные) <> Тип("Структура") Тогда
		ДополнительныеДанные = Новый Структура;
	КонецЕсли;
	
	Если НЕ ДополнительныеДанные.Свойство("Титульный")
	 ИЛИ ТипЗнч(ДополнительныеДанные.Титульный) <> Тип("Структура") Тогда
		ДополнительныеДанные.Вставить("Титульный", Новый Структура);
	КонецЕсли;
	
	АдресОрганизации = Новый Структура;
	АдресОрганизации.Вставить("КодСтраны",       "");
	АдресОрганизации.Вставить("Индекс",          "");
	АдресОрганизации.Вставить("КодРегиона",      "");
	АдресОрганизации.Вставить("Район",           "");
	АдресОрганизации.Вставить("Город",           "");
	АдресОрганизации.Вставить("НаселенныйПункт", "");
	АдресОрганизации.Вставить("Улица",           "");
	АдресОрганизации.Вставить("Дом",             "");
	АдресОрганизации.Вставить("Корпус",          "");
	АдресОрганизации.Вставить("Квартира",        "");
	АдресОрганизации.Вставить("Адрес",           "");
	
	Если ДополнительныеДанные.Титульный.Свойство("АдресОрганизации") Тогда
		ЗаполнитьЗначенияСвойств(АдресОрганизации, ДополнительныеДанные.Титульный.АдресОрганизации);
	КонецЕсли;
	ДополнительныеДанные.Титульный.Вставить("АдресОрганизации", АдресОрганизации);
	
	Если мСтруктураМногостраничныхРазделов.Лицензии.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
		мСтруктураМногостраничныхРазделов.Лицензии.Колонки.Добавить("ДополнительныеДанные");
	КонецЕсли;
	
	Если мСтруктураМногостраничныхРазделов.Декларация.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
		мСтруктураМногостраничныхРазделов.Декларация.Колонки.Добавить("ДополнительныеДанные");
	КонецЕсли;
	
	Если мСтруктураМногостраничныхРазделов.Возвраты.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
		мСтруктураМногостраничныхРазделов.Возвраты.Колонки.Добавить("ДополнительныеДанные");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьСтруктуруДополнительныхДанных()
	
	ИнициализироватьДополнительныеДанные();
	
КонецПроцедуры

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля

// СохранитьДеревоСтраницОтчета
//
Процедура СохранитьДеревоСтраницОтчета()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СохранитьДеревоСтраницОтчета

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)
	
	Если Кнопка <> Неопределено Тогда 
		ОбновитьСтруктуруМногостраничныхРазделов();
		Печать(Кнопка.Имя);
	КонецЕсли;
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);
	
	мДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лицензии";
	СтрокаУровня1.Представление            = "Сведения лицензиях";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛицензии";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Декларация";
	СтрокаУровня1.Представление            = "Декларация";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаДекларация";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Возвраты";
	СтрокаУровня1.Представление            = "Возвраты";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаВозвраты";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			// Код показателя по структуре определяется по колонке 9 макета
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента	= ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу	= КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме	= КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности	= ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя		= ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание				= ДопОписание;
			НоваяСтрока.Обязательность			= Обязательность;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Функция ПакетнаяПечать(ПечДок) Экспорт
	
КонецФункции

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// проверяем показатели (алгоритм проверки оставлен из режима выгрузки в формате 3.05)
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Текст = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	СтрокаИмениФайла = "<!-- ИдФайл=""" + ПараметрыВыгрузки.ИдФайл + """ -->";
	Текст = Текст + Символы.ПС + СтрокаИмениФайла;
	
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(Текст, ПараметрыВыгрузки);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьВерсиюФормата()

	Если мДатаКонцаПериодаОтчета < '20131101' Тогда		
		Результат = "420";
	ИначеЕсли мДатаКонцаПериодаОтчета < '20150901' Тогда
		Результат = "430";
	Иначе
		Результат = "431";
	КонецЕсли;
	
	Возврат Результат

КонецФункции // ПолучитьВерсиюФормата()
 
Функция ПроверитьПоказатели() Экспорт
	
	ПараметрыВыгрузки = СформироватьСтруктуруПоказателейИСтруктуруПараметров();
	
	ВерсияФормата = ПолучитьВерсиюФормата();
	ПараметрыВыгрузки.Вставить("ВерсияФормата", ВерсияФормата);
	
	Если НЕ ОтчетЗаполненКорректно(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ВерсияФормата);
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтчетЗаполненКорректно(Параметры)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнениеТитульный(Параметры, СтатусПроверки);
	
	ПроверитьЗаполнениеЛицензии(Параметры, СтатусПроверки);
	
	ПроверитьЗаполнениеДекларация(Параметры, СтатусПроверки);
	ПроверитьЗаполнениеВозвраты(Параметры, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ПроверитьЗаполнениеТитульный(Параметры, СтатусПроверки)
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		
		УказаныФИО = НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительФамилия) И НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительИмя);
		Если НЕ УказаныФИО Тогда
			ТекстОписанияОшибки = "На Титульном листе не указаны фамилия, имя и отчество индивидуального предпринимателя!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОргДиректор");
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ИННФЛ) Тогда
			ТекстОписанияОшибки = "На Титульном листе не задан ИНН индивидуального предпринимателя!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		ИначеЕсли СтрДлина(СокрЛП(ПараметрыВыгрузки.ИННФЛ))<> 12 Тогда
			ТекстОписанияОшибки = "На Титульном листе неверно задан ИНН индивидуального предпринимателя!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		КонецЕсли;

	Иначе
		
		УказаныФИО = НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительФамилия) И НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительИмя);
		Если НЕ УказаныФИО Тогда
			ТекстОписанияОшибки = "На Титульном листе не указаны фамилия, имя и отчество (при наличии) руководителя!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОргДиректор");
		КонецЕсли;
		УказаныФИО = НЕ ПустаяСтрока(ПараметрыВыгрузки.ГлавбухФамилия) И НЕ ПустаяСтрока(ПараметрыВыгрузки.ГлавбухИмя);
		Если НЕ УказаныФИО Тогда
			ТекстОписанияОшибки = "На Титульном листе не указаны фамилия, имя и отчество (при наличии) главного бухгалтера!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОргБухгалтер");
		КонецЕсли;
		
		ИНН = СокрЛП(ПараметрыВыгрузки.ИННЮЛ);
		КПП = СокрЛП(ПараметрыВыгрузки.КППЮЛ);
		
		Если ПустаяСтрока(ИНН) Тогда
			ТекстОписанияОшибки = "На Титульном листе не задан ИНН организации!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		ИначеЕсли СтрДлина(ИНН) <> 10 Тогда
			ТекстОписанияОшибки = "На Титульном листе неверно задан ИНН организации!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ИНН1");
		КонецЕсли;
		
		Если ПустаяСтрока(КПП) Тогда
			ТекстОписанияОшибки = "На Титульном листе не задан КПП организации!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КПП1");
		ИначеЕсли СтрДлина(КПП)<> 9 Тогда
			ТекстОписанияОшибки = "На Титульном листе неверно задан КПП организации!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КПП1");
		КонецЕсли;
		
	КонецЕсли;	
		
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимЮЛ) Тогда
		ТекстОписанияОшибки = "На Титульном листе не указано полное наименование организации!";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ОргНазв");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодРегион) Тогда
		ТекстОписанияОшибки = "На Титульном листе в адресе организации не указан код региона!";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КодРегиона1");
	ИначеЕсли СтрДлина(СокрЛП(ПараметрыВыгрузки.КодРегион))<> 2 Тогда
		ТекстОписанияОшибки = "На Титульном листе в адресе организации неверно указан код региона!";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "КодРегиона1");
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеЛицензии(Параметры, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.Лицензии;
	
	ЕстьЗаполненныйЛистРаздела = Ложь;
	
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		ДанныеЛиста = ЛистРаздела.Данные;
		ДополнительныеДанныеРаздела = ЛистРаздела.ДополнительныеДанные;
		
		Если НЕ УказанаЛицензия(ДанныеЛиста) Тогда
			Продолжить;
		КонецЕсли;
		ЕстьЗаполненныйЛистРаздела = Истина;
		
		НомерЛиста = ДанныеРаздела.Индекс(ЛистРаздела) + 1;
		НомерЛистаСтроковый = Формат(НомерЛиста, "ЧГ=0");
		
		Если ЛицензируемаяДеятельность() Или мДатаКонцаПериодаОтчета < '20131101' Тогда
			//ТекстОписанияОшибки = "Не указана серия лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
			//Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000000000101) Тогда
			//	СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000101", НомерЛиста);
			//КонецЕсли;
			
			ТекстОписанияОшибки = "Не указан номер лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
			Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000000000102) Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000102", НомерЛиста);
			КонецЕсли;
			
			ТекстОписанияОшибки = "Не указана дата начала действия лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
			Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000000000103) Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000103", НомерЛиста);
			КонецЕсли;
			
			ТекстОписанияОшибки = "Не указана дата окончания действия лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
			Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000000000104) Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000104", НомерЛиста);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеЛиста.П000000000103) И ЗначениеЗаполнено(ДанныеЛиста.П000000000104) Тогда
				ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела лицензий указана дата окончания действия лицензии предшествующая дате начала действия лицензии!";
				Если ДанныеЛиста.П000000000103 > ДанныеЛиста.П000000000104 Тогда
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000104", НомерЛиста);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		ВидДеятельности = ДанныеЛиста.П000000000105;
		КодВидаДеятельности = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеРаздела, "П000000000105");
		Если ЗначениеЗаполнено(ВидДеятельности) И НЕ ЗначениеЗаполнено(КодВидаДеятельности) Тогда
			ТекстОписанияОшибки = "Нарушена внутренняя структура данных вида деятельности по лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий. Требуется повторный выбор значения из списка!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000105", НомерЛиста);
		ИначеЕсли НЕ ЗначениеЗаполнено(ВидДеятельности) Тогда
			ТекстОписанияОшибки = "Не указан вид деятельности по лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000105", НомерЛиста);
		КонецЕсли;
	КонецЦикла;
	
	ТекстОписанияОшибки = "Не введено ни одной лицензии!";
	Если мДатаКонцаПериодаОтчета  >= '20131101' И НЕ ЕстьЗаполненныйЛистРаздела Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Лицензии", "П000000000102", 1);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеОП(СтатусПроверки, ЛистРаздела, НомерЛиста, ИмяРаздела, 
								КПП_НеОбязателен = Ложь, ПроверятьНаПустоту = Истина)

	ДанныеЛиста = ЛистРаздела.Данные;
	НомерЛистаСтроковый = Формат(НомерЛиста, "ЧГ=0");
	
	ТекстОписанияОшибки = "";
	
	Если ПустаяСтрока(ДанныеЛиста.ОбособленноеПодразделение) и ПроверятьНаПустоту Тогда
		ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
								+ """ не указаны реквизиты обособленного подразделения!";
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
	Иначе
		СведенияОбОП = Неопределено;
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные) = Тип("Структура") И ЛистРаздела.ДополнительныеДанные.Свойство("СведенияОбОП", СведенияОбОП) Тогда
			
			ИНН = СокрЛП(СведенияОбОП.ИНН);
			КПП = СокрЛП(СведенияОбОП.КПП);
			
			ДлинаИНН = СтрДлина(ИНН);
			ДлинаКПП = СтрДлина(КПП);
			
			Если ДлинаИНН = 0 Тогда
				ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
										+ """ не указан ИНН обособленного подразделения!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
			ИначеЕсли (ДлинаИНН <> 10) и (ДлинаИНН <> 12) Тогда					
				ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
										+ """ неверно указан ИНН обособленного подразделения!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
			Иначе
				Если (ДлинаИНН = 12) и (НЕ КПП_НеОбязателен) Тогда
				    ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ неверно указан ИНН обособленного подразделения!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);					
				КонецЕсли; 
			КонецЕсли; 				
			
			Если ДлинаИНН = 10 Тогда
				Если ДлинаКПП = 0 Тогда
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ не указан КПП обособленного подразделения!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
				ИначеЕсли ДлинаКПП <> 9 Тогда
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ неверно указан КПП обособленного подразделения!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
				КонецЕсли; 
			ИначеЕсли (ДлинаИНН = 12) и КПП_НеОбязателен Тогда
				Если НЕ ДлинаКПП = 0 Тогда
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ КПП обособленного подразделения должен быть пуст!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
				КонецЕсли;	
			КонецЕсли;
			
			// Контроль на цифры ИНН
			Если ДлинаИНН > 2 Тогда
		
				Если НЕ ВСтрокеВсеЦифры(ИНН) Тогда
					
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ строка ИНН обособленного подразделения должна состоять только из цифр!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
					
				КонецЕсли; 
				
				// первые 2 цифры ИНН не могут быть "00" для российского ИНН
				Если Лев(СокрЛП(ИНН), 2) = "00" Тогда
					
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ строка ИНН обособленного подразделения не должна начинаться с ""00""!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
					
				КонецЕсли;

			КонецЕсли;
			
			// Контроль на цифры КПП
			Если ДлинаКПП > 2 Тогда
			
				Если НЕ ВСтрокеВсеЦифры(КПП) Тогда
				
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ строка КПП обособленного подразделения должна состоять только из цифр!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
					
				КонецЕсли; 
				
				// первые 2 цифры КПП не могут быть "00", КПП может быть только Российским
				Если Лев(СокрЛП(КПП), 2) = "00" Тогда
					
					ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
											+ """ строка КПП обособленного подразделения не должна начинаться с ""00""!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
					
				КонецЕсли;
			
			КонецЕсли;
			
			ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела + """ не указано наименование обособленного подразделения!";
			Если ПустаяСтрока(СведенияОбОП.Наименование) Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
			КонецЕсли;
			
			Если ПустаяСтрока(СведенияОбОП.ПредставлениеАдреса) Тогда
				ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела + """ не указан адрес обособленного подразделения!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
			ИначеЕсли ПустаяСтрока(СведенияОбОП.КодРегиона) Тогда
				ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела + """ в адресе обособленного подразделения не указан регион!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
			КонецЕсли;
		Иначе
			ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела """ + ИмяРаздела + """ нарушена внутренняя структура реквизитов обособленного подразделения, требуется повторный ввод данных!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, "ОбособленноеПодразделение", НомерЛиста);
		КонецЕсли;
	КонецЕсли;
	
	Возврат (ТекстОписанияОшибки = "");

КонецФункции

Функция ВСтрокеВсеЦифры(ПроверяемаяСтрока)
	
	Если ПустаяСтрока(ПроверяемаяСтрока) = 1 Тогда
		// пустая строка не является строкой цифр
		Возврат Ложь;
	КонецЕсли;
	
	//Добавим цифру "1" для обработки ситуаций
	// - наличие лидирующих нулей
	// - введен один единственный символ не цифра 
	Попытка
		ДлинаПроверяемойСтроки = СтрДлина(Формат(Цел(Число("1" + СокрЛП(ПроверяемаяСтрока))), "ЧГ=0;ЧВН"));
	Исключение
		// если возникло исключение - значит не смогли преобразовать к числу "1" + СокрЛП(ПроверяемаяСтрока)
		Возврат Ложь;
	КонецПопытки;
	
	Возврат  ДлинаПроверяемойСтроки = (СтрДлина(ПроверяемаяСтрока) + 1);
	
КонецФункции

Функция ПроверкаИННКППвСтрокахТаблиц(СтатусПроверки, ИмяРаздела, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, 
									ИмяПоказателяИНН, ИНН, ИмяПоказателяКПП, КПП, РодПадежЧейИННКПП, 
									РоссийскийКонтрагент = Неопределено, 
									МожетБытьПустойИНН = Ложь, МожетБытьПустойКПП = Ложь,
									РоссийскийТолькоЮЛ = Ложь, РоссийскийТолькоФЛ = Ложь)
									
	ДлинаИНН = СтрДлина(ИНН);
	ДлинаКПП = СтрДлина(КПП);
	НомерЛистаСтроковый = Формат(НомерЛиста, "ЧГ=0");
	ТекстОписанияОшибки = "";
	
	// В графе ИНН помимо собственно ИНН РФ (10 или 12 цифр) может указываться
	// Белоруссия - УНП - 9 цифр
	// Казахстан  - РНН или БИН или ИИН - все коды 12 цифр
	// Кыргызстан - ИНН - 14 цифр
	// Армения    - УНН - 8 цифр.
	ДлиныИНН_РФ 				= Новый Массив(2);
	ДлиныИНН_РФ.Добавить(10);
	ДлиныИНН_РФ.Добавить(12);
	
	ДлиныИНН_ТС 				= Новый Массив(5);
	ДлиныИНН_ТС.Добавить(8);
	ДлиныИНН_ТС.Добавить(9);
	ДлиныИНН_ТС.Добавить(10);
	ДлиныИНН_ТС.Добавить(12);
	ДлиныИНН_ТС.Добавить(14);
	
	ДлиныИНН_ТС_БезРФ 			= Новый Массив(4);
	ДлиныИНН_ТС_БезРФ.Добавить(8);
	ДлиныИНН_ТС_БезРФ.Добавить(9);
	ДлиныИНН_ТС_БезРФ.Добавить(12);
	ДлиныИНН_ТС_БезРФ.Добавить(14);
	// если МожетБытьПустойИНН - добавляется длина 0
	ДлиныИНН_Возможные 			= Новый Массив(6);
	ДлиныИНН_Возможные.Добавить(0);
	ДлиныИНН_Возможные.Добавить(8);
	ДлиныИНН_Возможные.Добавить(9);
	ДлиныИНН_Возможные.Добавить(10);
	ДлиныИНН_Возможные.Добавить(12);
	ДлиныИНН_Возможные.Добавить(14);
	
	ДлиныИНН_Возможные_БезРФ 	= Новый Массив(5);
	ДлиныИНН_Возможные_БезРФ.Добавить(0);
	ДлиныИНН_Возможные_БезРФ.Добавить(8);
	ДлиныИНН_Возможные_БезРФ.Добавить(9);
	ДлиныИНН_Возможные_БезРФ.Добавить(12);
	ДлиныИНН_Возможные_БезРФ.Добавить(14);
	
	// если КПП точно непуст - это точно российский резидент								
	Если НЕ МожетБытьПустойКПП Тогда
	    РоссийскийКонтрагент = Истина	
	КонецЕсли;
	
	// если российский резидент	то ИНН точно не пуст
	ЭтоТочноРоссийскийКонтрагент = (Не (РоссийскийКонтрагент = Неопределено)) и РоссийскийКонтрагент;
	
	Если ЭтоТочноРоссийскийКонтрагент Тогда
	    МожетБытьПустойИНН = Ложь	
	КонецЕсли;
	
	МожетБытьРоссийский = (РоссийскийКонтрагент = Неопределено) или ЭтоТочноРоссийскийКонтрагент;
	
	СтрИностранного = "";
	
	// Если известно резидент или нет								
	Если РоссийскийКонтрагент = Неопределено Тогда
		
		// если сюда попали - КПП может быть пуст
		Если Не МожетБытьПустойИНН Тогда
		    // из стран ТС (Россия, Белорусь, Казахстан, Армения, Кыргызстан)
			Если ДлинаИНН = 0 Тогда
				ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
									+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
									+ """ не указан ИНН " + РодПадежЧейИННКПП + "!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
			Иначе				
				Если ДлиныИНН_ТС.Найти(ДлинаИНН) = Неопределено Тогда
					
				    // длина не соответствует ни одной стране ТС
					ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
									+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
									+ """ неверно указан ИНН " + РодПадежЧейИННКПП + "!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
					 				
				КонецЕсли; 
			КонецЕсли; 			 
			
		Иначе
			// откуда угодно
			Если ДлиныИНН_Возможные.Найти(ДлинаИНН) = Неопределено Тогда
					
			    // длина не соответствует ни одной стране ТС и не пуста
				ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
								+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
								+ """ неверно указан ИНН " + РодПадежЧейИННКПП + "!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
				 				
			КонецЕсли;
		КонецЕсли; 
		
	Иначе
		Если РоссийскийКонтрагент Тогда
		    // точно резидент РФ
			СтрИностранного = " российского ";
			Если НЕ МожетБытьПустойКПП Тогда
			    // ЮрЛицо
				Если ДлинаИНН = 0 Тогда
					
				    ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
									+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
									+ """ не указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + "!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
					
				ИначеЕсли НЕ ДлинаИНН = 10 Тогда	
					
					ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
									+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
									+ """ неверно указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + "!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
					
				КонецЕсли; 
			Иначе
				// ЮрЛицо или ФизЛицо				
				Если ДлинаИНН = 0 Тогда
					
				    ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
									+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
									+ """ не указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + "!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
					
				ИначеЕсли ДлиныИНН_РФ.Найти(ДлинаИНН) = Неопределено Тогда
					// длина не 10 и не 12
					ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
									+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
									+ """ неверно указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + "!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
				Иначе
					
					Если РоссийскийТолькоЮЛ и (ДлинаИНН <> 10) Тогда
					
						ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
										+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
										+ """ неверно указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + "! ИНН должен быть 10-значный!";
						СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
						
						
					ИначеЕсли РоссийскийТолькоФЛ и (ДлинаИНН <> 12) Тогда
						
						ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
										+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
										+ """ неверно указан ИНН" +  СтрИностранного + РодПадежЧейИННКПП + "! ИНН должен быть 12-значный!";
						СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
						
					КонецЕсли;
					
				КонецЕсли;				 
				
			КонецЕсли; 
		Иначе
			// точно иностранец
			СтрИностранного = " иностранного ";
			
			Если Не МожетБытьПустойИНН Тогда
			    // из стран ТС (Белорусь, Казахстан, Армения, Кыргызстан)
				Если ДлинаИНН = 0 Тогда
					
				    ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
									+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
									+ """ не указан Идентификационный Номер" +  СтрИностранного + РодПадежЧейИННКПП + "!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
					
				ИначеЕсли ДлиныИНН_ТС_БезРФ.Найти(ДлинаИНН) = Неопределено Тогда
					// длина не 10 и не 12
					ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
									+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
									+ """ неверно указан Идентификационный Номер" + СтрИностранного + РодПадежЧейИННКПП + "!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
					
				КонецЕсли;
				
			Иначе	
			    // откуда угодно  
				Если ДлиныИНН_Возможные_БезРФ.Найти(ДлинаИНН) = Неопределено Тогда
					
				    // длина не соответствует ни одной стране ТС (кроме России) и не пуста
					ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
									+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
									+ """ неверно указан Идентификационный Номер" + СтрИностранного + РодПадежЧейИННКПП + "!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
					 				
				КонецЕсли;
				
			КонецЕсли; 
			
			// для правильной отработки контроля КПП в случае если Длина ИНН равна 10
			// КПП для иностранцев должен быть пуст
			ДлинаИНН = ?(ДлинаИНН = 10, 9, ДлинаИНН);
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Контроль КПП
	Если (ДлинаИНН = 10) и МожетБытьРоссийский Тогда
		
		Если НЕ РоссийскийТолькоФЛ Тогда
		
			// Это вероятно резидент РФ - ЮрЛицо и должно быть КПП
			Если ДлинаКПП = 0 Тогда
			    // КПП пуст
				ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
								+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
								+ """ не указан КПП " + РодПадежЧейИННКПП + "!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяКПП, НомерЛиста);
			ИначеЕсли НЕ ДлинаКПП = 9 Тогда
				// КПП неверный
				ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
								+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
								+ """ неверно указан КПП " + РодПадежЧейИННКПП + "!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяКПП, НомерЛиста);
			КонецЕсли;	
		
		КонецЕсли; 
	     
	Иначе		
		// КПП должен быть пуст 
		Если НЕ ДлинаКПП = 0 Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
							+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
							+ """ КПП " + РодПадежЧейИННКПП + " должен быть пуст!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяКПП, НомерЛиста);
		КонецЕсли;	
	КонецЕсли;
	
	Если ТекстОписанияОшибки = "" Тогда
	
		// т.е ошибок по длинам ИНН-КПП не было
		// контроль на цифры
		
		Если ДлинаИНН > 0 Тогда
		
			Если НЕ ВСтрокеВсеЦифры(ИНН) Тогда
			
				ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
							+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
							+ """ строка ИНН " + РодПадежЧейИННКПП + " должна состоять только из цифр!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяИНН, НомерЛиста);
			
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ДлинаКПП > 0 Тогда
		
			Если НЕ ВСтрокеВсеЦифры(КПП) Тогда
			
				ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы " + ИмяТаблицы + " на листе " 
							+ НомерЛистаСтроковый + " раздела """ + ИмяРаздела 
							+ """ строка КПП " + РодПадежЧейИННКПП + " должна состоять только из цифр!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, ИмяРаздела, ИмяПоказателяКПП, НомерЛиста);
			
			КонецЕсли; 
					
		КонецЕсли;
	
	КонецЕсли; 
	
	Возврат (ТекстОписанияОшибки = "");
	    
КонецФункции

Процедура ПроверитьЗаполнениеДекларация(ПараметрыВыгрузки, СтатусПроверки)
	
	КПП_НеОбязателен = (Число(Лев(мВерсияФормата, 3)) >= 431);
	ИмяРаздела = "Декларация";
	
	ДанныеРаздела = мДанныеОтчета.Декларация;
	
	ЕстьЗаполненныйЛистРаздела = Ложь;
	
	КоличествоСтрокТаблицыПоОрганизации = 0;
	ОбщееКоличествоСтрокПоОП = 0;
	
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		НомерЛиста = ДанныеРаздела.Индекс(ЛистРаздела) + 1;
		НомерЛистаСтроковый = Формат(НомерЛиста, "ЧГ=0");
		
		ДанныеЛиста = ЛистРаздела.Данные;
		
		Если НЕ ЗаполненЛистДекларация(ДанныеЛиста) Тогда
			Продолжить;
		КонецЕсли;
		ЕстьЗаполненныйЛистРаздела = Истина;
						
		ПроверитьЗаполнениеОП(СтатусПроверки, ЛистРаздела, НомерЛиста, ИмяРаздела, КПП_НеОбязателен);
		
		// Проверка заполнения таблиц декларации.
		ДанныеДопСтрок = Неопределено;
		Если НомерЛиста = 1 Тогда
			
			ЛистРаздела.ДанныеДопСтрок.Свойство(мИдГруппы11, ДанныеДопСтрок);
			ДополнительныеДанныеЛиста = Неопределено;
			Если ТипЗнч(ЛистРаздела.ДополнительныеДанные) = Тип("Структура") Тогда
				ДополнительныеДанныеЛиста = ЛистРаздела.ДополнительныеДанные;
			КонецЕсли;
			КоличЗаполненных = 0;
			ПроверитьЗаполнениеТаблицыДекларации(СтатусПроверки, мИдГруппы11, ДанныеДопСтрок, ДополнительныеДанныеЛиста, НомерЛиста, КоличЗаполненных);
			
			КоличествоСтрокТаблицыПоОрганизации = КоличЗаполненных;		
			
		КонецЕсли; 
		
		ДанныеДопСтрок = Неопределено;
		ДополнительныеДанныеЛиста = Неопределено;
				
		ЛистРаздела.ДанныеДопСтрок.Свойство(мИдГруппы12, ДанныеДопСтрок);
		
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные) = Тип("Структура") Тогда
			ДополнительныеДанныеЛиста = ЛистРаздела.ДополнительныеДанные;
		КонецЕсли;
		КоличЗаполненных = 0;
		ПроверитьЗаполнениеТаблицыДекларации(СтатусПроверки, мИдГруппы12, ДанныеДопСтрок, ДополнительныеДанныеЛиста, НомерЛиста, КоличЗаполненных);
		
		ОбщееКоличествоСтрокПоОП = ОбщееКоличествоСтрокПоОП + КоличЗаполненных;		
		
	КонецЦикла;
	
	ТекстОписанияОшибки = "Не заполнен ни один лист раздела ""Декларация""!";
	Если НЕ ЕстьЗаполненныйЛистРаздела Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", "ОбособленноеПодразделение", 1);
	КонецЕсли;
	
	Если КоличествоСтрокТаблицыПоОрганизации > ОбщееКоличествоСтрокПоОП Тогда
	    ТекстОписанияОшибки = "В разделе ""Декларация"" в верхней таблице ""Сведения по организации/индивидуальному предпринимателю"" " 
							+ "заполнено больше строк, чем во всех нижних таблицах ""Сведения по обособленному подразделению""!";		
	    СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", "ОбособленноеПодразделение", 1);
	КонецЕсли; 
	
	Если мСохраненныйДок.ДатаОкончания > '20140901' Тогда
		
		// Контроль записей на уникальность ("КПП ОП" + "Наименование ОП").
		//
		ДанныеОПТЗ = Новый ТаблицаЗначений;
		
		ДанныеОПТЗ.Колонки.Добавить("НаимОП");
		ДанныеОПТЗ.Колонки.Добавить("КППОП");
		ДанныеОПТЗ.Колонки.Добавить("НомерЛиста");
		ДанныеОПТЗ.Колонки.Добавить("Колво");
		
		Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
			
			ДанныеОП   = ЛистРаздела.Данные.ОбособленноеПодразделение;
			НомерЛиста = ДанныеРаздела.Индекс(ЛистРаздела) + 1;
			
			Если НЕ Найти(ДанныеОП, ", ИНН") > 0  Тогда
				Продолжить;
			КонецЕсли;
			
			НаимОП = СокрЛП(Лев(ДанныеОП, Найти(ДанныеОП, ", ИНН") - 1));
			
			Если ПустаяСтрока(НаимОП) Тогда
				Продолжить;
			КонецЕсли;
			
			КППОП = ?(Найти(ДанныеОП, ", КПП") > 0, Сред(ДанныеОП, Найти(ДанныеОП, ", КПП") + 6, 9), "");
			
			НоваяСтрокаТЗ = ДанныеОПТЗ.Добавить();
			НоваяСтрокаТЗ.КППОП      = КППОП;
			НоваяСтрокаТЗ.НаимОП     = НаимОП;
			НоваяСтрокаТЗ.Колво      = 1;
			НоваяСтрокаТЗ.НомерЛиста = НомерЛиста;
			
		КонецЦикла;
		
		КопияДанныеОПТЗ = ДанныеОПТЗ.Скопировать();
		КопияДанныеОПТЗ.Свернуть("НаимОП, КППОП", "Колво");
		КопияДанныеОПТЗ.Сортировать("Колво Убыв");
		
		Для Каждого СтрокаТЗ Из КопияДанныеОПТЗ Цикл
			
			Если СтрокаТЗ.Колво > 1 Тогда
				
				ОтборПовторов = Новый Структура;
				ОтборПовторов.Вставить("НаимОП", СтрокаТЗ.НаимОП);
				ОтборПовторов.Вставить("КППОП",  СтрокаТЗ.КППОП);
				
				НайденныеОП = ДанныеОПТЗ.НайтиСтроки(ОтборПовторов);
				
				Если НайденныеОП.Количество() > 0 Тогда
					ПерваяИтерация = Истина;
					ЛистыПовторы = "";
					Для Каждого ЭлНайденныеОП Из НайденныеОП Цикл
						ЛистыПовторы = ЛистыПовторы + ?(ПерваяИтерация, "", ", ") + ЭлНайденныеОП.НомерЛиста;
						ПерваяИтерация = Ложь;
					КонецЦикла;
					ТекстОписанияОшибки = "Страницы №№ " + ЛистыПовторы + " раздела ""Декларация"" заполнены по одному и тому же предприятию " + ЭлНайденныеОП.НаимОП + ", (КПП " + ЭлНайденныеОП.КППОП + ")";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", "ОбособленноеПодразделение", ЭлНайденныеОП.НомерЛиста);
				КонецЕсли;
				
			Иначе
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыДекларации(СтатусПроверки, ИдГруппы, ДанныеДопСтрок, ДополнительныеДанные, НомерЛиста, КоличЗаполненных)
	
	КоличЗаполненных = 0;
	ВерхняяТаблица = Ложь;
	
	НомерЛистаСтроковый = Формат(НомерЛиста, "ЧГ=0");
	
	ПрефиксИмени = ИдГруппы;
	
	Если ПрефиксИмени = "П0000100001" Тогда
		ИмяТаблицы = """Сведения по организации/индивидуальному предпринимателю""";
		ВерхняяТаблица = Истина;
	Иначе
		ИмяТаблицы = """Сведения по обособленному подразделению""";
	КонецЕсли;
	
	Для Каждого СтрокаДекларации Из ДанныеДопСтрок Цикл
		
		НомерСтроки = ДанныеДопСтрок.Индекс(СтрокаДекларации) + 1;
		НомерСтрокиСтроковый = Формат(НомерСтроки, "ЧГ=0");
		
		СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "01"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "02"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "03"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "04"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "05"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "06"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "07"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "08"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "09"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "21"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "22"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "11"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "12"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "13"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "14"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "15"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "16"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "17"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "18"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "19"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "20"]);
		Если НЕ СтрокаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		КоличЗаполненных = КоличЗаполненных + 1;
		Если ВерхняяТаблица Тогда
			// не проверяем - только считаем заполненные
			Продолжить;
		КонецЕсли;
		
		ИмяГрафы = ПрефиксИмени + "01";
		ИмяПоказателя = ПрефиксИмени + "01_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
		Если ПустаяСтрока(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" не задан вид продукции!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		ИмяГрафы = ПрефиксИмени + "02";
		ИмяПоказателя = ПрефиксИмени + "02_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
		Если ПустаяСтрока(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" не задан код вида продукции!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателя, НомерЛиста);
		ИначеЕсли СтрДлина(ЗначениеГрафы) <> 3 Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" неверно задан код вида продукции!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		ИмяГрафы = ПрефиксИмени + "03";
		ИмяПоказателя = ПрефиксИмени + "03_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
		Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" не указано наименование производителя/импортера!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////
		// Контроль ИНН-КПП
		
		ИмяГрафыИНН = ПрефиксИмени + "04";
		ИмяПоказателяИНН = ПрефиксИмени + "04_" + НомерСтрокиСтроковый;
		ИНН = СокрЛП(СтрокаДекларации[ИмяГрафыИНН]);
		ДлинаИНН = СтрДлина(ИНН);
		
		ИмяГрафыКПП = ПрефиксИмени + "05";
		ИмяПоказателяКПП = ПрефиксИмени + "05_" + НомерСтрокиСтроковый;
		КПП = СокрЛП(СтрокаДекларации[ИмяГрафыКПП]);
		
		ИмяРаздела = "Декларация";
		РодПадежЧейИННКПП = "производителя/импортера";
		РоссийскийКонтрагент = Неопределено;
		МожетБытьПустойИНН = Ложь;
		МожетБытьПустойКПП = Истина;
		
		ПроверкаИННКППвСтрокахТаблиц(СтатусПроверки, ИмяРаздела, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, 
									ИмяПоказателяИНН, ИНН, ИмяПоказателяКПП, КПП, РодПадежЧейИННКПП, 
									РоссийскийКонтрагент, МожетБытьПустойИНН, МожетБытьПустойКПП);
		//
		////////////////////////////////////////////////////////////////////////////////
		
		// Наименование поставщика
		ИмяГрафы = ПрефиксИмени + "06";
		ИмяПоказателя = ПрефиксИмени + "06_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
		Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" не указано наименование поставщика!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		// проверяем адрес - иностранный поставщик или нет
		ИмяГрафы = ПрефиксИмени + "07";
		ИмяПоказателя = ПрефиксИмени + "07_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
		Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" не указан адрес поставщика!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		РоссийскийПолучатель = Истина;
		АдресСтруктура = Неопределено;
		Если ДополнительныеДанные.Свойство(ИмяПоказателя, АдресСтруктура) Тогда
			
		    Если ЗначениеЗаполнено(АдресСтруктура.Страна) Тогда
			
				РоссийскийПолучатель = (АдресСтруктура.Страна = "643");
			
			КонецЕсли; 			
		
		КонецЕсли;		
		
		////////////////////////////////////////////////////////////////////////////////
		// Контроль ИНН-КПП
		
		// проверка ИНН-КПП поставщика
		ИмяГрафыИНН = ПрефиксИмени + "08";
		ИмяПоказателяИНН = ПрефиксИмени + "08_" + НомерСтрокиСтроковый;
		ИНН = СокрЛП(СтрокаДекларации[ИмяГрафыИНН]);
		ДлинаИНН = СтрДлина(ИНН);
		
		ИмяГрафыКПП = ПрефиксИмени + "09";
		ИмяПоказателяКПП = ПрефиксИмени + "09_" + НомерСтрокиСтроковый;
		КПП = СокрЛП(СтрокаДекларации[ИмяГрафыКПП]);
		
		ИмяРаздела = "Декларация";
		РодПадежЧейИННКПП = "поставщика";
		РоссийскийКонтрагент = РоссийскийПолучатель;
		МожетБытьПустойИНН = Истина;
		МожетБытьПустойКПП = Истина;
		
		ПроверкаИННКППвСтрокахТаблиц(СтатусПроверки, ИмяРаздела, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, 
									ИмяПоказателяИНН, ИНН, ИмяПоказателяКПП, КПП, РодПадежЧейИННКПП, 
									РоссийскийКонтрагент, МожетБытьПустойИНН, МожетБытьПустойКПП);
		//
		////////////////////////////////////////////////////////////////////////////////
		
		// нужно убедится что для поставщика-иностранца не заполнена Лицензия
	    		
		// Поля лицензии не обязательны по схеме выгрузки,
		// но если заполнено хоть одно поле лицензии - должны быть заполнены все остальные.
		
		ДлинаКПП = СтрДлина(КПП);
		МожетБытьЛицензия = РоссийскийПолучатель;
		
		ЛицензияЗаполнена = Ложь;
		ИмяПоказателяЗаполнено 		= Неопределено;
		ИмяПоказателяНеЗаполнено 	= Неопределено;
		
		ИмяГрафы = ПрефиксИмени + "21";
		ИмяПоказателяСерияЛиц = ПрефиксИмени + "21_" + НомерСтрокиСтроковый;
		ЗначениеГрафыСерияЛиц = СокрЛП(СтрокаДекларации[ИмяГрафы]);
		
		ИмяГрафы = ПрефиксИмени + "22";
		ИмяПоказателяНомерЛиц = ПрефиксИмени + "22_" + НомерСтрокиСтроковый;
		ЗначениеГрафыНомерЛиц = СокрЛП(СтрокаДекларации[ИмяГрафы]);
		
        ИмяГрафы = ПрефиксИмени + "11";
		ИмяПоказателяДатаВыдачиЛиц = ПрефиксИмени + "11_" + НомерСтрокиСтроковый;
		ЗначениеГрафыДатаВыдачиЛиц = Дата(СтрокаДекларации[ИмяГрафы]);
		
		ИмяГрафы = ПрефиксИмени + "12";
		ИмяПоказателяДатаОкончанияЛиц = ПрефиксИмени + "12_" + НомерСтрокиСтроковый;
		ЗначениеГрафыДатаОкончанияЛиц = Дата(СтрокаДекларации[ИмяГрафы]);
		
        ИмяГрафы = ПрефиксИмени + "13";
		ИмяПоказателяКемВыданаЛиц = ПрефиксИмени + "13_" + НомерСтрокиСтроковый;
		ЗначениеГрафыКемВыданаЛиц = СокрЛП(СтрокаДекларации[ИмяГрафы]);
					
		Если ЗначениеЗаполнено(ЗначениеГрафыСерияЛиц + ЗначениеГрафыНомерЛиц) Тогда
			ИмяПоказателяЗаполнено = ИмяПоказателяНомерЛиц;
			ЛицензияЗаполнена = Истина;
		Иначе
			ИмяПоказателяНеЗаполнено = ИмяПоказателяСерияЛиц;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеГрафыДатаВыдачиЛиц) Тогда
			ИмяПоказателяЗаполнено = ИмяПоказателяДатаВыдачиЛиц;
			ЛицензияЗаполнена = Истина;
		Иначе
			ИмяПоказателяНеЗаполнено = ИмяПоказателяДатаВыдачиЛиц;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеГрафыДатаОкончанияЛиц) Тогда
			ИмяПоказателяЗаполнено = ИмяПоказателяДатаОкончанияЛиц;
			ЛицензияЗаполнена = Истина;
		Иначе
			ИмяПоказателяНеЗаполнено = ИмяПоказателяДатаОкончанияЛиц;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеГрафыКемВыданаЛиц) Тогда
			ИмяПоказателяЗаполнено = ИмяПоказателяКемВыданаЛиц;
			ЛицензияЗаполнена = Истина;
		Иначе
			ИмяПоказателяНеЗаполнено = ИмяПоказателяКемВыданаЛиц;
		КонецЕсли;

		Если ЛицензияЗаполнена Тогда
			
			Если НЕ МожетБытьЛицензия Тогда			
				// для иностранцев и ИП не заполняется		    				
				ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы 
										+ " на листе " + НомерЛистаСтроковый 
										+ " раздела ""Декларация"" для поставщиков не резидентов РФ не заполняются сведения о лицензии!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателяЗаполнено, НомерЛиста);
			Иначе
				// должны быть заполнены все значимые поля Лицензии
				Если НЕ (ИмяПоказателяНеЗаполнено = Неопределено) Тогда
					ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы 
										+ " на листе " + НомерЛистаСтроковый 
										+ " раздела ""Декларация"" не все поля сведений о лицензии заполнены!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателяНеЗаполнено, НомерЛиста);
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли;
		
		// проверяем дату поставки и номер ТТН
		ИмяГрафы = ПрефиксИмени + "17";
		ИмяПоказателя = ПрефиксИмени + "17_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = Дата(СокрЛП(СтрокаДекларации[ИмяГрафы]));
		Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" не заполнена дата закупки!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		ИмяГрафы = ПрефиксИмени + "18";
		ИмяПоказателя = ПрефиксИмени + "18_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
		Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Декларация"" не заполнен номер ТТН!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Декларация", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеВозвраты(ПараметрыВыгрузки, СтатусПроверки)
		
	КПП_НеОбязателен = (Число(Лев(мВерсияФормата, 3)) >= 431);
	ИмяРаздела = "Возвраты";
	ПроверятьНаПустоту = Ложь; // Раздел "Возвраты" может не заполняться
	
	ДанныеРаздела = мДанныеОтчета.Возвраты;
	
	ЕстьЗаполненныйЛистРаздела = Ложь;
	
	КоличествоСтрокТаблицыПоОрганизации = 0;
	ОбщееКоличествоСтрокПоОП = 0;
	
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		НомерЛиста = ДанныеРаздела.Индекс(ЛистРаздела) + 1;
		НомерЛистаСтроковый = Формат(НомерЛиста, "ЧГ=0");
		
		ДанныеЛиста = ЛистРаздела.Данные;
		
		Если НЕ ЗаполненЛистВозвраты(ДанныеЛиста) Тогда
			Продолжить;
		КонецЕсли;
		ЕстьЗаполненныйЛистРаздела = Истина;
				
		ПроверитьЗаполнениеОП(СтатусПроверки, ЛистРаздела, НомерЛиста, ИмяРаздела, КПП_НеОбязателен, ПроверятьНаПустоту);
				
		// Проверка заполнения таблиц декларации.
		ДанныеДопСтрок = Неопределено;
		Если НомерЛиста = 1 Тогда
			
			ЛистРаздела.ДанныеДопСтрок.Свойство(мИдГруппы21, ДанныеДопСтрок);
			ДополнительныеДанныеЛиста = Неопределено;
			Если ТипЗнч(ЛистРаздела.ДополнительныеДанные) = Тип("Структура") Тогда
				ДополнительныеДанныеЛиста = ЛистРаздела.ДополнительныеДанные;
			КонецЕсли;
			КоличЗаполненных = 0;
			ПроверитьЗаполнениеТаблицыВозвраты(СтатусПроверки, мИдГруппы21, ДанныеДопСтрок, ДополнительныеДанныеЛиста, НомерЛиста, КоличЗаполненных);
			
			КоличествоСтрокТаблицыПоОрганизации = КоличЗаполненных;		
			
		КонецЕсли; 
		
		ДанныеДопСтрок = Неопределено;
		ДополнительныеДанныеЛиста = Неопределено;
				
		ЛистРаздела.ДанныеДопСтрок.Свойство(мИдГруппы22, ДанныеДопСтрок);
		
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные) = Тип("Структура") Тогда
			ДополнительныеДанныеЛиста = ЛистРаздела.ДополнительныеДанные;
		КонецЕсли;
		КоличЗаполненных = 0;
		ПроверитьЗаполнениеТаблицыВозвраты(СтатусПроверки, мИдГруппы22, ДанныеДопСтрок, ДополнительныеДанныеЛиста, НомерЛиста, КоличЗаполненных);
		
		ОбщееКоличествоСтрокПоОП = ОбщееКоличествоСтрокПоОП + КоличЗаполненных;		
		
	КонецЦикла;
		
	Если КоличествоСтрокТаблицыПоОрганизации > ОбщееКоличествоСтрокПоОП Тогда
	    ТекстОписанияОшибки = "В разделе ""Возвраты"" в верхней таблице ""Сведения по организации/индивидуальному предпринимателю"" " 
							+ "заполнено больше строк, чем во всех нижних таблицах ""Сведения по обособленному подразделению""!";		
	    СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", "ОбособленноеПодразделение", 1);
	КонецЕсли; 
	
	Если мСохраненныйДок.ДатаОкончания > '20140901' Тогда
		
		// Контроль записей на уникальность ("КПП ОП" + "Наименование ОП").
		//
		ДанныеОПТЗ = Новый ТаблицаЗначений;
		
		ДанныеОПТЗ.Колонки.Добавить("НаимОП");
		ДанныеОПТЗ.Колонки.Добавить("КППОП");
		ДанныеОПТЗ.Колонки.Добавить("НомерЛиста");
		ДанныеОПТЗ.Колонки.Добавить("Колво");
		
		Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
			
			ДанныеОП   = ЛистРаздела.Данные.ОбособленноеПодразделение;
			НомерЛиста = ДанныеРаздела.Индекс(ЛистРаздела) + 1;
			
			Если НЕ Найти(ДанныеОП, ", ИНН") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НаимОП = СокрЛП(Лев(ДанныеОП, Найти(ДанныеОП, ", ИНН") - 1));
			
			Если ПустаяСтрока(НаимОП) Тогда
				Продолжить;
			КонецЕсли;
			
			КППОП = ?(Найти(ДанныеОП, ", КПП") > 0, Сред(ДанныеОП, Найти(ДанныеОП, ", КПП") + 6, 9), "");
			
			НоваяСтрокаТЗ = ДанныеОПТЗ.Добавить();
			НоваяСтрокаТЗ.КППОП      = КППОП;
			НоваяСтрокаТЗ.НаимОП     = НаимОП;
			НоваяСтрокаТЗ.Колво      = 1;
			НоваяСтрокаТЗ.НомерЛиста = НомерЛиста;
			
		КонецЦикла;
		
		КопияДанныеОПТЗ = ДанныеОПТЗ.Скопировать();
		КопияДанныеОПТЗ.Свернуть("НаимОП, КППОП", "Колво");
		КопияДанныеОПТЗ.Сортировать("Колво Убыв");
		
		Для Каждого СтрокаТЗ Из КопияДанныеОПТЗ Цикл
			
			Если СтрокаТЗ.Колво > 1 Тогда
				
				ОтборПовторов = Новый Структура;
				ОтборПовторов.Вставить("НаимОП", СтрокаТЗ.НаимОП);
				ОтборПовторов.Вставить("КППОП",  СтрокаТЗ.КППОП);
				
				НайденныеОП = ДанныеОПТЗ.НайтиСтроки(ОтборПовторов);
				
				Если НайденныеОП.Количество() > 0 Тогда
					ПерваяИтерация = Истина;
					ЛистыПовторы = "";
					Для Каждого ЭлНайденныеОП Из НайденныеОП Цикл
						ЛистыПовторы = ЛистыПовторы + ?(ПерваяИтерация, "", ", ") + ЭлНайденныеОП.НомерЛиста;
						ПерваяИтерация = Ложь;
					КонецЦикла;
					ТекстОписанияОшибки = "Страницы №№ " + ЛистыПовторы + " раздела ""Возвраты"" заполнены по одному и тому же предприятию " + ЭлНайденныеОП.НаимОП + ", (КПП " + ЭлНайденныеОП.КППОП + ")";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", "ОбособленноеПодразделение", ЭлНайденныеОП.НомерЛиста);
				КонецЕсли;
				
			Иначе
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыВозвраты(СтатусПроверки, ИдГруппы, ДанныеДопСтрок, ДополнительныеДанные, НомерЛиста, КоличЗаполненных)
	
	КоличЗаполненных = 0;
	ВерхняяТаблица = Ложь;
	
	НомерЛистаСтроковый = Формат(НомерЛиста, "ЧГ=0");
	
	ПрефиксИмени = ИдГруппы;
	
	Если ПрефиксИмени = "П0000200001" Тогда
		ИмяТаблицы = """Сведения по организации/индивидуальному предпринимателю""";
		ВерхняяТаблица = Истина;
	Иначе
		ИмяТаблицы = """Сведения по обособленному подразделению""";
	КонецЕсли;
	
	Для Каждого СтрокаДекларации Из ДанныеДопСтрок Цикл
		
		НомерСтроки = ДанныеДопСтрок.Индекс(СтрокаДекларации) + 1;
		НомерСтрокиСтроковый = Формат(НомерСтроки, "ЧГ=0");
		
		СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "01"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "02"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "03"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "04"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "05"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "06"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "07"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "08"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "09"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "21"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "22"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "11"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "12"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "13"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "14"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "15"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "16"])
					  ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "17"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "18"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "19"])
		              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "20"]);
		Если НЕ СтрокаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		КоличЗаполненных = КоличЗаполненных + 1;
		Если ВерхняяТаблица Тогда
			// не проверяем - только считаем заполненные
			Продолжить;
		КонецЕсли;
		
		ИмяГрафы = ПрефиксИмени + "01";
		ИмяПоказателя = ПрефиксИмени + "01_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
		Если ПустаяСтрока(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Возвраты"" не задан вид продукции!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		ИмяГрафы = ПрефиксИмени + "02";
		ИмяПоказателя = ПрефиксИмени + "02_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
		Если ПустаяСтрока(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Возвраты"" не задан код вида продукции!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", ИмяПоказателя, НомерЛиста);
		ИначеЕсли СтрДлина(ЗначениеГрафы) <> 3 Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Возвраты"" неверно задан код вида продукции!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		ИмяГрафы = ПрефиксИмени + "03";
		ИмяПоказателя = ПрефиксИмени + "03_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
		Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Возвраты"" не указано наименование производителя/импортера!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////
		// Контроль ИНН-КПП
		
		ИмяГрафыИНН = ПрефиксИмени + "04";
		ИмяПоказателяИНН = ПрефиксИмени + "04_" + НомерСтрокиСтроковый;
		ИНН = СокрЛП(СтрокаДекларации[ИмяГрафыИНН]);
		ДлинаИНН = СтрДлина(ИНН);
		
		ИмяГрафыКПП = ПрефиксИмени + "05";
		ИмяПоказателяКПП = ПрефиксИмени + "05_" + НомерСтрокиСтроковый;
		КПП = СокрЛП(СтрокаДекларации[ИмяГрафыКПП]);
		
		ИмяРаздела = "Возвраты";
		РодПадежЧейИННКПП = "производителя/импортера";
		РоссийскийКонтрагент = Неопределено;
		МожетБытьПустойИНН = Ложь;
		МожетБытьПустойКПП = Истина;
		
		ПроверкаИННКППвСтрокахТаблиц(СтатусПроверки, ИмяРаздела, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, 
									ИмяПоказателяИНН, ИНН, ИмяПоказателяКПП, КПП, РодПадежЧейИННКПП, 
									РоссийскийКонтрагент, МожетБытьПустойИНН, МожетБытьПустойКПП);
		//
		////////////////////////////////////////////////////////////////////////////////
		
		
		// Наименование поставщика
		ИмяГрафы = ПрефиксИмени + "06";
		ИмяПоказателя = ПрефиксИмени + "06_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
		Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Возвраты"" не указано наименование поставщика!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		// проверяем адрес - иностранный поставщик или нет
		ИмяГрафы = ПрефиксИмени + "07";
		ИмяПоказателя = ПрефиксИмени + "07_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
		Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Возвраты"" не указан адрес поставщика!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		РоссийскийПолучатель = Истина;
		АдресСтруктура = Неопределено;
		Если ДополнительныеДанные.Свойство(ИмяПоказателя, АдресСтруктура) Тогда
			
		    Если ЗначениеЗаполнено(АдресСтруктура.Страна) Тогда
			
				РоссийскийПолучатель = (АдресСтруктура.Страна = "643");
			
			КонецЕсли; 			
		
		КонецЕсли; 
		
		////////////////////////////////////////////////////////////////////////////////
		// Контроль ИНН-КПП
		
		// проверка ИНН-КПП поставщика
		ИмяГрафыИНН = ПрефиксИмени + "08";
		ИмяПоказателяИНН = ПрефиксИмени + "08_" + НомерСтрокиСтроковый;
		ИНН = СокрЛП(СтрокаДекларации[ИмяГрафыИНН]);
		ДлинаИНН = СтрДлина(ИНН);
		
		ИмяГрафыКПП = ПрефиксИмени + "09";
		ИмяПоказателяКПП = ПрефиксИмени + "09_" + НомерСтрокиСтроковый;
		КПП = СокрЛП(СтрокаДекларации[ИмяГрафыКПП]);
		
		ИмяРаздела = "Возвраты";
		РодПадежЧейИННКПП = "поставщика";
		РоссийскийКонтрагент = РоссийскийПолучатель;
		МожетБытьПустойИНН = Истина;
		МожетБытьПустойКПП = Истина;
		
		ПроверкаИННКППвСтрокахТаблиц(СтатусПроверки, ИмяРаздела, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, 
									ИмяПоказателяИНН, ИНН, ИмяПоказателяКПП, КПП, РодПадежЧейИННКПП, 
									РоссийскийКонтрагент, МожетБытьПустойИНН, МожетБытьПустойКПП);
		//
		////////////////////////////////////////////////////////////////////////////////
		
		// нужно убедится что для поставщика-иностранца не заполнена Лицензия
	    		
		// Поля лицензии не обязательны по схеме выгрузки,
		// но если заполнено хоть одно поле лицензии - должны быть заполнены все остальные.
		
		ДлинаКПП = СтрДлина(КПП);
		МожетБытьЛицензия = РоссийскийПолучатель;
		
		ЛицензияЗаполнена = Ложь;
		ИмяПоказателяЗаполнено 		= Неопределено;
		ИмяПоказателяНеЗаполнено 	= Неопределено;
		
		ИмяГрафы = ПрефиксИмени + "21";
		ИмяПоказателяСерияЛиц = ПрефиксИмени + "21_" + НомерСтрокиСтроковый;
		ЗначениеГрафыСерияЛиц = СокрЛП(СтрокаДекларации[ИмяГрафы]);
		
		ИмяГрафы = ПрефиксИмени + "22";
		ИмяПоказателяНомерЛиц = ПрефиксИмени + "22_" + НомерСтрокиСтроковый;
		ЗначениеГрафыНомерЛиц = СокрЛП(СтрокаДекларации[ИмяГрафы]);
		
        ИмяГрафы = ПрефиксИмени + "11";
		ИмяПоказателяДатаВыдачиЛиц = ПрефиксИмени + "11_" + НомерСтрокиСтроковый;
		ЗначениеГрафыДатаВыдачиЛиц = Дата(СтрокаДекларации[ИмяГрафы]);
		
		ИмяГрафы = ПрефиксИмени + "12";
		ИмяПоказателяДатаОкончанияЛиц = ПрефиксИмени + "12_" + НомерСтрокиСтроковый;
		ЗначениеГрафыДатаОкончанияЛиц = Дата(СтрокаДекларации[ИмяГрафы]);
		
        ИмяГрафы = ПрефиксИмени + "13";
		ИмяПоказателяКемВыданаЛиц = ПрефиксИмени + "13_" + НомерСтрокиСтроковый;
		ЗначениеГрафыКемВыданаЛиц = СокрЛП(СтрокаДекларации[ИмяГрафы]);
					
		Если ЗначениеЗаполнено(ЗначениеГрафыСерияЛиц + ЗначениеГрафыНомерЛиц) Тогда
			ИмяПоказателяЗаполнено = ИмяПоказателяНомерЛиц;
			ЛицензияЗаполнена = Истина;
		Иначе
			ИмяПоказателяНеЗаполнено = ИмяПоказателяСерияЛиц;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеГрафыДатаВыдачиЛиц) Тогда
			ИмяПоказателяЗаполнено = ИмяПоказателяДатаВыдачиЛиц;
			ЛицензияЗаполнена = Истина;
		Иначе
			ИмяПоказателяНеЗаполнено = ИмяПоказателяДатаВыдачиЛиц;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеГрафыДатаОкончанияЛиц) Тогда
			ИмяПоказателяЗаполнено = ИмяПоказателяДатаОкончанияЛиц;
			ЛицензияЗаполнена = Истина;
		Иначе
			ИмяПоказателяНеЗаполнено = ИмяПоказателяДатаОкончанияЛиц;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеГрафыКемВыданаЛиц) Тогда
			ИмяПоказателяЗаполнено = ИмяПоказателяКемВыданаЛиц;
			ЛицензияЗаполнена = Истина;
		Иначе
			ИмяПоказателяНеЗаполнено = ИмяПоказателяКемВыданаЛиц;
		КонецЕсли;

		Если ЛицензияЗаполнена Тогда
			
			Если НЕ МожетБытьЛицензия Тогда			
				// для иностранцев и ИП не заполняется		    				
				ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы 
										+ " на листе " + НомерЛистаСтроковый 
										+ " раздела ""Возвраты"" для поставщиков не резидентов РФ не заполняются сведения о лицензии!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", ИмяПоказателяЗаполнено, НомерЛиста);
			Иначе
				// должны быть заполнены все значимые поля Лицензии
				Если НЕ (ИмяПоказателяНеЗаполнено = Неопределено) Тогда
					ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы 
										+ " на листе " + НомерЛистаСтроковый 
										+ " раздела ""Возвраты"" не все поля сведений о лицензии заполнены!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", ИмяПоказателяНеЗаполнено, НомерЛиста);
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли;
		
		// проверяем дату поставки и номер ТТН
		ИмяГрафы = ПрефиксИмени + "17";
		ИмяПоказателя = ПрефиксИмени + "17_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = Дата(СокрЛП(СтрокаДекларации[ИмяГрафы]));
		Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Возвраты"" не заполнена дата закупки!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
		ИмяГрафы = ПрефиксИмени + "18";
		ИмяПоказателя = ПрефиксИмени + "18_" + НомерСтрокиСтроковый;
		ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
		Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			ТекстОписанияОшибки = "В строке " + НомерСтрокиСтроковый + " таблицы "+ ИмяТаблицы + " на листе " + НомерЛистаСтроковый + " раздела ""Возвраты"" не заполнен номер ТТН!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Возвраты", ИмяПоказателя, НомерЛиста);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, Раздел, Показатель, ЛистРаздела = Неопределено)
	
	СтатусПроверки = Ложь;
	Если ЛистРаздела = Неопределено Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, Раздел, Показатель);
	Иначе
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, Раздел, Показатель, ЛистРаздела);
	КонецЕсли;
	
КонецПроцедуры

Функция УказанаЛицензия(ДанныеЛиста)
	
	ЕстьСведения = ЗначениеЗаполнено(ДанныеЛиста.П000000000101)
	           ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000000000102)
	           ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000000000103)
	           ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000000000104)
	           ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000000000105);
	
	Возврат ЕстьСведения;
	
КонецФункции

Функция ЗаполненЛистДекларация(ДанныеЛиста)
	
	Заполнен = НЕ ПустаяСтрока(ДанныеЛиста.ОбособленноеПодразделение);
	
	Для Каждого Показатель Из ДанныеЛиста Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если Найти(ИмяПоказателя, "П00001") = 1 И Сред(ИмяПоказателя, 12, 2) <> "00" Тогда
			Заполнен = (Заполнен ИЛИ ЗначениеЗаполнено(Показатель.Значение));
			Если Заполнен Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Заполнен;
	
КонецФункции

Функция ЗаполненЛистВозвраты(ДанныеЛиста)
	
	Заполнен = НЕ ПустаяСтрока(ДанныеЛиста.ОбособленноеПодразделение);
	
	Для Каждого Показатель Из ДанныеЛиста Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если Найти(ИмяПоказателя, "П00002") = 1 И Сред(ИмяПоказателя, 12, 2) <> "00" Тогда
			Заполнен = (Заполнен ИЛИ ЗначениеЗаполнено(Показатель.Значение));
			Если Заполнен Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Заполнен;
	
КонецФункции

Функция ДополнительныеДанныеПоАдресу(Данные, Адрес)
	
	Перем ЗначениеДанных;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ПозицияРазделителя = Найти(Адрес, ".");
		Если ПозицияРазделителя = 0 Тогда
			АдресВерхнегоУровня = СокрЛП(Адрес);
			Данные.Свойство(АдресВерхнегоУровня, ЗначениеДанных);
		Иначе
			АдресВерхнегоУровня = СокрЛП(Лев(Адрес, ПозицияРазделителя - 1));
			ДанныеВерхнегоУровня = Неопределено;
			Если Данные.Свойство(АдресВерхнегоУровня, ДанныеВерхнегоУровня) Тогда
				АдресСледующегоУровня = СокрЛП(Сред(Адрес, ПозицияРазделителя + 1));
				ЗначениеДанных = ДополнительныеДанныеПоАдресу(ДанныеВерхнегоУровня, АдресСледующегоУровня);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеДанных;
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	НовыйДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	
	НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн)
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	УстановитьДоступностьПолейДекларация();
	УстановитьДоступностьПолейВозвраты();
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	Страница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	
	Если НЕ ((Страница = "Титульный") Или (Страница = "ФизЛица")) Тогда
		ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
		Расчет("");
	КонецЕсли;
	
КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник, "ФСРАР");
	Если Имясобытия = "Изменение статуса отправки регламентированного отчета" И ЗначениеЗаполнено(Параметр) И мСохраненныйДок <> Неопределено И Источник = мСохраненныйДок.Ссылка Тогда
		
		Если мСохраненныйДок <> Неопределено И РегламентированнаяОтчетность.КонтекстЭДОЛокальный() <> Неопределено Тогда
			РеквизитыОтправки = РегламентированнаяОтчетность.КонтекстЭДОЛокальный().ПолучитьРеквизитыОтправкиФСРАР(мСохраненныйДок.Ссылка);
			Если РеквизитыОтправки.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
				РегламентированнаяОтчетность.ЗаписатьСтатусОтчета(Источник, Перечисления.СтатусыРегламентированныхОтчетов.Сдан);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML(ВерсияФормата)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
		
	ИмяМакета = "СхемаВыгрузки" + ВерсияФормата;
	
	Макет = ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция СформироватьИдФайл(Параметры)
	
	ПрефиксИмениФайлаВыгрузки = "D7";
	
	ИдентификаторОтправителя = ?(Параметры.Свойство("ИННФЛ"), Параметры.ИННФЛ, Параметры.ИННЮЛ);
	
	ПериодДекларации = "0" + Параметры.ПризПериодОтч + Прав(Параметры.ГодПериодОтч, 1);
	ДеньФормированияДекларации = Формат(РабочаяДата, "ДФ=ддММгггг");
	УникальныйИдентификатор = Врег(Строка(Новый УникальныйИдентификатор));
	
	Возврат ПрефиксИмениФайлаВыгрузки
	        + "_" + ИдентификаторОтправителя
	        + "_" + ПериодДекларации
	        + "_" + ДеньФормированияДекларации
	        + "_" + УникальныйИдентификатор;
	
КонецФункции

Функция СформироватьСтруктуруПоказателейИСтруктуруПараметров()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	Данные = СохрСтруктура;
	Орг = мСохраненныйДок.Организация;
	
	ПоказателиОтчета = Данные.ПоказателиОтчета;
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	НомерГода = Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг");
	
	Параметры = Новый Структура;
	Параметры.Вставить("НаимПрог", РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("ДатаДок",  Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	
	КодКвартала = ПолучитьКодКвартала(ПоказателиТитульный);
	Параметры.Вставить("ПризПериодОтч", КодКвартала);
	
	Вариант = мСохраненныйДок.Вид;
	ЭтоПервичнаяОтчетность = (Вариант = 0);
	
	Параметры.Вставить("ПризФОтч", Строка(Данные.ПризнакФормыОтчетности));
	Параметры.Вставить("ГодПериодОтч", НомерГода);
	
	Параметры.Вставить("Первичная",      ЭтоПервичнаяОтчетность);
	Параметры.Вставить("Корректирующая", НЕ ЭтоПервичнаяОтчетность);
	Параметры.Вставить("НомерКорр", Вариант);
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг);
	
	НазваниеОрганизации = СокрЛП(ПоказателиТитульный.ОргНазв);
	ИНН = СокрЛП(ПоказателиТитульный.ИНН1);
	Если Лев(ИНН, 2) = "00" Тогда
		ИНН = Сред (ИНН, 3); // Удаление нулей, добавленных в соответствии с порядком заполнения.
	КонецЕсли;
	КПП = СокрЛП(ПоказателиТитульный.КПП1);
	ТелефонОрганизации  = СокрЛП(ПоказателиТитульный.ТелОрганизации);
	ЭлектроннаяПочтаОрганизации = СокрЛП(ПоказателиТитульный.ЭлектроннаяПочта);
	
	Параметры.Вставить("ЭтоПБОЮЛ", 	ЭтоПБОЮЛ);
	Параметры.Вставить("НаимЮЛ", 	НазваниеОрганизации);
	
	Если ЭтоПБОЮЛ Тогда
		Параметры.Вставить("ИННФЛ",     ИНН);
	Иначе
		Параметры.Вставить("ИННЮЛ",     ИНН);
		Параметры.Вставить("КППЮЛ",     КПП);
	КонецЕсли;
	
	Параметры.Вставить("ТелОрг",    ТелефонОрганизации);
	Параметры.Вставить("EmailОтпр", ЭлектроннаяПочтаОрганизации);
	
	СтруктураАдреса = Данные.ДополнительныеДанные.Титульный.АдресОрганизации;
	Параметры.Вставить("КодСтраны",  СтруктураАдреса.КодСтраны);
	Параметры.Вставить("Индекс",     СтруктураАдреса.Индекс);
	Параметры.Вставить("КодРегион",  СтруктураАдреса.КодРегиона);
	Параметры.Вставить("Район",      СтруктураАдреса.Район);
	Параметры.Вставить("Город",      СтруктураАдреса.Город);
	Параметры.Вставить("НаселПункт", СтруктураАдреса.НаселенныйПункт);
	Параметры.Вставить("Улица",      СтруктураАдреса.Улица);
	Параметры.Вставить("Дом",        СтруктураАдреса.Дом);
	Параметры.Вставить("Корпус",     СтруктураАдреса.Корпус);
	Параметры.Вставить("Литера",     "");
	Параметры.Вставить("Кварт",      СтруктураАдреса.Квартира);
	
	ФИОРуководителя = РазложитьФИО(ПоказателиТитульный.ОргДиректор);
	Параметры.Вставить("РуководительФамилия",  ФИОРуководителя.Фамилия);
	Параметры.Вставить("РуководительИмя",      ФИОРуководителя.Имя);
	Параметры.Вставить("РуководительОтчество", ФИОРуководителя.Отчество);
	
	ФИОГлавбуха = РазложитьФИО(ПоказателиТитульный.ОргБухгалтер);
	Параметры.Вставить("ГлавбухФамилия",  ФИОГлавбуха.Фамилия);
	Параметры.Вставить("ГлавбухИмя",      ФИОГлавбуха.Имя);
	Параметры.Вставить("ГлавбухОтчество", ФИОГлавбуха.Отчество);
	
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");
	
	Параметры.Вставить("ИдФайл", СформироватьИдФайл(Параметры));
	
	Если мДатаКонцаПериодаОтчета < '20131101' Тогда		
		мВерсияФормата = "420";
	ИначеЕсли мДатаКонцаПериодаОтчета < '20150901' Тогда
		мВерсияФормата = "430";
	Иначе
		мВерсияФормата = "431";
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьКодКвартала(ПоказателиТитульногоЛиста)
	
	Если НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод1Кв) Тогда
		Возврат "3";
		
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод2Кв) Тогда
		Возврат "6";
		
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод3Кв) Тогда
		Возврат "9";
		
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульногоЛиста.ОтчетныйПериод4Кв) Тогда
		Возврат "0";
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел, Параметры)
	
	УзелСправочники = ПолучитьПодчиненныйЭлемент(КорневойУзел, "Справочники");
	Узел_Документ = УзелРодитель;
	
	Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");
	Если мДатаКонцаПериодаОтчета < '20131101' Тогда
		// Формат Выгрузки 4.20
		Узел_Лицензии = ПолучитьПодчиненныйЭлемент(Узел_Организация, "Лицензии");
		
		ПрототипУзла_Лицензия = ПолучитьПодчиненныйЭлемент(Узел_Лицензии, "Лицензия");
		Для Каждого Страница Из мДанныеОтчета.Лицензии Цикл
			ДанныеСтраницы = Страница.Данные;
			ДополнительныеДанныеСтраницы = Страница.ДополнительныеДанные;
			Узел_Лицензия = НовыйУзелИзПрототипа(ПрототипУзла_Лицензия);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "ВидДеят", ДополнительныеДанныеПоАдресу(ДополнительныеДанныеСтраницы, "П000000000105"));
			УстановитьЗначениеЭлемента(Узел_Лицензия, "СерЛиц",      ДанныеСтраницы.П000000000101);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "НомерЛиц",    ДанныеСтраницы.П000000000102);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаНачЛиц",  ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000103), ДанныеСтраницы.П000000000103, ""));
			УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаОконЛиц", ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000104), ДанныеСтраницы.П000000000104, ""));
		КонецЦикла;
		УдалитьУзел(ПрототипУзла_Лицензия);
	Иначе
		// Формат Выгрузки 4.30
		Узел_Деятельность = ПолучитьПодчиненныйЭлемент(Узел_Организация, "Деятельность");
		Узел_Лицензируемая = ПолучитьПодчиненныйЭлемент(Узел_Деятельность, "Лицензируемая");
		Узел_Нелицензируемая = ПолучитьПодчиненныйЭлемент(Узел_Деятельность, "Нелицензируемая");
		ДопДанные = мДанныеОтчета.Лицензии[0].ДополнительныеДанные;
		Если ЛицензируемаяДеятельность() Тогда
			УдалитьУзел(Узел_Нелицензируемая);
			ПрототипУзла_Лицензия = ПолучитьПодчиненныйЭлемент(Узел_Лицензируемая, "Лицензия");
			Для Каждого Страница Из мДанныеОтчета.Лицензии Цикл
				ДанныеСтраницы = Страница.Данные;
				Если Не УказанаЛицензия(ДанныеСтраницы) Тогда
					Продолжить;
				КонецЕсли;
				ДополнительныеДанныеСтраницы = Страница.ДополнительныеДанные;
				Узел_Лицензия = НовыйУзелИзПрототипа(ПрототипУзла_Лицензия);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ВидДеят", ДополнительныеДанныеПоАдресу(ДополнительныеДанныеСтраницы, "П000000000105"));
				УстановитьЗначениеЭлемента(Узел_Лицензия, "СерНомЛиц", СокрЛП(ДанныеСтраницы.П000000000101 + " " + ДанныеСтраницы.П000000000102));
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаНачЛиц",  ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000103), ДанныеСтраницы.П000000000103, ""));
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаОконЛиц", ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000104), ДанныеСтраницы.П000000000104, ""));
			КонецЦикла;
			УдалитьУзел(ПрототипУзла_Лицензия);
		Иначе
			УдалитьУзел(Узел_Лицензируемая);
			УстановитьЗначениеЭлемента(Узел_Нелицензируемая, "ВидДеят", ДополнительныеДанныеПоАдресу(ДопДанные, "П000000000105"));
		КонецЕсли;
	КонецЕсли;
	
	ДанныеВыгрузки = Новый Структура; // Структура для обработки данных выгрузки и хранения справочников
	
	ПроизводителиИмпортеры = Новый ТаблицаЗначений;
	ПроизводителиИмпортеры.Колонки.Добавить("ИДПроизвИмп"); // Уникальный идентификатор
	ПроизводителиИмпортеры.Колонки.Добавить("П000000000004"); // Наименование производителя/импортера
	ПроизводителиИмпортеры.Колонки.Добавить("П000000000005"); // ИНН производителя/импортера
	ПроизводителиИмпортеры.Колонки.Добавить("П000000000006"); // КПП производителя/импортера
	
	ДанныеВыгрузки.Вставить("ПроизводителиИмпортеры", ПроизводителиИмпортеры);
	
	Контрагенты = Новый ТаблицаЗначений;
	Контрагенты.Колонки.Добавить("ИдКонтр"); // Уникальный идентификатор
	Контрагенты.Колонки.Добавить("Наименование");
	Контрагенты.Колонки.Добавить("ИНН");
	Контрагенты.Колонки.Добавить("КПП");
	Контрагенты.Колонки.Добавить("КодСтраны");
	Контрагенты.Колонки.Добавить("КодРегион");
	Контрагенты.Колонки.Добавить("Индекс");
	Контрагенты.Колонки.Добавить("Район");
	Контрагенты.Колонки.Добавить("Город");
	Контрагенты.Колонки.Добавить("НаселПункт");
	Контрагенты.Колонки.Добавить("Улица");
	Контрагенты.Колонки.Добавить("Дом");
	Контрагенты.Колонки.Добавить("Корпус");
	Контрагенты.Колонки.Добавить("Литера");
	Контрагенты.Колонки.Добавить("Кварт");
	Контрагенты.Колонки.Добавить("Адрес"); // Адрес для иностранных организация
	
	ДанныеВыгрузки.Вставить("Контрагенты", Контрагенты);
	
	Лицензии = Новый ТаблицаЗначений;
	Лицензии.Колонки.Добавить("ИдЛицензии"); // Уникальный идентификатор
	Лицензии.Колонки.Добавить("П000000000011Серия"); // Серия лицензии
	Лицензии.Колонки.Добавить("П000000000011Номер"); // Номер лицензии
	Лицензии.Колонки.Добавить("П000000000012"); // Дата выдачи
	Лицензии.Колонки.Добавить("П000000000013"); // Дата окончания
	Лицензии.Колонки.Добавить("П000000000014"); // Кем выдана
	Лицензии.Колонки.Добавить("ИдКонтр"); // Уникальный идентификатор в справочнике контрагентов
	
	ДанныеВыгрузки.Вставить("Лицензии", Лицензии);
	
	ПрототипУзла_ОбъемОборота = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ОбъемОборота");
	ВыгруженныеПодразделения = Новый Соответствие;
	
	СтраницыДекларации = мДанныеОтчета.Декларация;
	СтраницыВозвратов = мДанныеОтчета.Возвраты;
	
	Для Каждого СтраницаДекларации Из СтраницыДекларации Цикл
		ДанныеСтраницы = СтраницаДекларации.Данные;
		ДанныеДопСтрокСтраницы = СтраницаДекларации.ДанныеДопСтрок;
		ДополнительныеДанныеСтраницы = СтраницаДекларации.ДополнительныеДанные;
		
		СведенияОбОП = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеСтраницы, "СведенияОбОП");
		ИдентификаторОП = ИдентификаторОП(СведенияОбОП);
		
		Если ИдентификаторОП = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Узел_ОбъемОборота = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемОборота);
		
		ТаблицаВыгрузкиДекларация = ДанныеДопСтрокСтраницы[мИдГруппы12].Скопировать();
		ТаблицаВыгрузкиДекларация.Колонки.Добавить("ПолныйАдрес");
		
		Для Каждого СтрокаДекларации Из ТаблицаВыгрузкиДекларация Цикл
			Постфикс = "_" + Формат(ТаблицаВыгрузкиДекларация.Индекс(СтрокаДекларации) + 1, "ЧГ=0");
			СтрокаДекларации.ПолныйАдрес = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеСтраницы, "П000010000307" + Постфикс);
		КонецЦикла;
		
		ТаблицаВыгрузкиВозвраты = СтраницыВозвратов[0].ДанныеДопСтрок[мИдГруппы22].СкопироватьКолонки();
		ТаблицаВыгрузкиВозвраты.Колонки.Добавить("ПолныйАдрес");
		
		Для Каждого СтраницаВозвратов Из СтраницыВозвратов Цикл
			СведенияОбОПВозврата = ДополнительныеДанныеПоАдресу(СтраницаВозвратов.ДополнительныеДанные, "СведенияОбОП");
			ИдентификаторОПВозврата = ИдентификаторОП(СведенияОбОПВозврата);
			Если ИдентификаторОПВозврата = Неопределено ИЛИ ИдентификаторОПВозврата <> ИдентификаторОП Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаВозврата Из СтраницаВозвратов.ДанныеДопСтрок[мИдГруппы22] Цикл
				НоваяСтрокаВозврата = ТаблицаВыгрузкиВозвраты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВозврата, СтрокаВозврата);
				Постфикс = "_" + Формат(СтраницаВозвратов.ДанныеДопСтрок[мИдГруппы22].Индекс(СтрокаВозврата) + 1, "ЧГ=0");
				НоваяСтрокаВозврата.ПолныйАдрес = ДополнительныеДанныеПоАдресу(СтраницаВозвратов.ДополнительныеДанные, "П000020000307" + Постфикс);
			КонецЦикла;
		КонецЦикла;
		
		ДанныеВыгрузки.Вставить("СведенияОбОП", СведенияОбОП);
		ДанныеВыгрузки.Вставить("ТаблицаВыгрузкиДекларация", ТаблицаВыгрузкиДекларация);
		ДанныеВыгрузки.Вставить("ТаблицаВыгрузкиВозвраты", ТаблицаВыгрузкиВозвраты);
		ЗаполнитьСведенияПоПодразделению(Узел_ОбъемОборота, ДанныеВыгрузки, Параметры);
		
		ВыгруженныеПодразделения.Вставить(ИдентификаторОП, Истина);
		
	КонецЦикла;
	
	ТаблицаВыгрузкиДекларация = СтраницыДекларации[0].ДанныеДопСтрок[мИдГруппы12].СкопироватьКолонки();
	ТаблицаВыгрузкиДекларация.Колонки.Добавить("ПолныйАдрес");
		
	Для Каждого СтраницаВозвратов Из СтраницыВозвратов Цикл
		ДанныеСтраницы = СтраницаВозвратов.Данные;
		ДополнительныеДанныеСтраницы = СтраницаВозвратов.ДополнительныеДанные;
		
		СведенияОбОП = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеСтраницы, "СведенияОбОП");
		ИдентификаторОП = ИдентификаторОП(СведенияОбОП);
		
		Если ИдентификаторОП = Неопределено ИЛИ ВыгруженныеПодразделения.Получить(ИдентификаторОП) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Узел_ОбъемОборота = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемОборота);
		
		ТаблицаВыгрузкиВозвраты = СтраницаВозвратов.ДанныеДопСтрок[мИдГруппы22].Скопировать();
		ТаблицаВыгрузкиВозвраты.Колонки.Добавить("ПолныйАдрес");
		
		Для Каждого СтрокаВозврата Из ТаблицаВыгрузкиВозвраты Цикл
			Постфикс = "_" + Формат(ТаблицаВыгрузкиВозвраты.Индекс(СтрокаВозврата) + 1, "ЧГ=0");
			СтрокаВозврата.ПолныйАдрес = ДополнительныеДанныеПоАдресу(ДополнительныеДанныеСтраницы, "П000020000307" + Постфикс);
		КонецЦикла;
		
		ДанныеВыгрузки.Вставить("СведенияОбОП", СведенияОбОП);
		ДанныеВыгрузки.Вставить("ТаблицаВыгрузкиДекларация", ТаблицаВыгрузкиДекларация);
		ДанныеВыгрузки.Вставить("ТаблицаВыгрузкиВозвраты", ТаблицаВыгрузкиВозвраты);
		ЗаполнитьСведенияПоПодразделению(Узел_ОбъемОборота, ДанныеВыгрузки, Параметры);
		
	КонецЦикла;
	
	УдалитьУзел(ПрототипУзла_ОбъемОборота);
	
	ЗаполнитьСправочникиДекларации(УзелСправочники, ДанныеВыгрузки);
	
КонецПроцедуры

Функция ИдентификаторОП(СведенияОП)
	
	Если СведенияОП <> Неопределено 
		И (ЗначениеЗаполнено(СведенияОП.КПП)
		   Или ЗначениеЗаполнено(СведенияОП.Наименование)
		   Или ЗначениеЗаполнено(СведенияОП.ИНН)) Тогда
		
		Наименование = "";   
		Если ЗначениеЗаполнено(СведенияОП.Наименование) Тогда
		
			Наименование = ВРег(СокрЛП(СведенияОП.Наименование));
			Наименование = СтрЗаменить(Наименование, " ", "");	
			
		КонецЕсли; 
		
		
		Возврат ?(ЗначениеЗаполнено(СведенияОП.КПП), СокрЛП(СведенияОП.КПП), "") + Символы.ПС
	    	+ Наименование + Символы.ПС
			+ ?(ЗначениеЗаполнено(СведенияОП.ИНН), СокрЛП(СведенияОП.ИНН), "");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	ПодчиненныйЭлемент = ПолучитьПодчиненныйЭлемент(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML(ПодчиненныйЭлемент, ЗначениеЭлемента);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПоПодразделению(УзелВыгрузки, ДанныеВыгрузки, Параметры)
	
	СведенияОбОП = ДанныеВыгрузки.СведенияОбОП;
	
	ТаблицаВыгрузкиДекларация = ДанныеВыгрузки.ТаблицаВыгрузкиДекларация.Скопировать();
	ТаблицаВыгрузкиВозвраты = ДанныеВыгрузки.ТаблицаВыгрузкиВозвраты.Скопировать();
	
	НазваниеОрганизации = СведенияОбОП.Наименование;
	КПП = СведенияОбОП.КПП;
	
	Если ПустаяСтрока(НазваниеОрганизации) И ПустаяСтрока(КПП) Тогда
		Возврат;
	КонецЕсли;
	
	Если Число(Лев(Параметры.ВерсияФормата, 3)) >= 431 Тогда		
		// формат 4.31
		УстановитьЗначениеЭлемента(УзелВыгрузки, "Наим", НазваниеОрганизации);			
	Иначе			
		// формат 4.30
		УстановитьЗначениеЭлемента(УзелВыгрузки, "НаимЮЛ", НазваниеОрганизации);		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КПП) Тогда
	    УстановитьЗначениеЭлемента(УзелВыгрузки, "КППЮЛ", КПП);		
	КонецЕсли;
	
	НаличиеЗакупки = Ложь;
	НаличиеВозврата = Ложь;
	
	Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "АдрОрг");
	УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  "643");
	УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     СведенияОбОП.Индекс);
	УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  СведенияОбОП.КодРегиона);
	УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      СведенияОбОП.Район);
	УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      СведенияОбОП.Город);
	УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
	УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      СведенияОбОП.Улица);
	УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        СведенияОбОП.Дом);
	УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     СведенияОбОП.Корпус);
	УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      СведенияОбОП.Квартира);
	
	КодыВидовПродукции = Новый ТаблицаЗначений;
	КодыВидовПродукции.Колонки.Добавить("Код");
	
	ТаблицаВыгрузкиДекларация.Колонки.Добавить("ИдПроизвИмп");
	ТаблицаВыгрузкиДекларация.Колонки.Добавить("ИдПоставщика");
	ТаблицаВыгрузкиДекларация.Колонки.Добавить("ИдЛицензии");
	
	Для Каждого СтрокаВыгрузки Из ТаблицаВыгрузкиДекларация Цикл
		Если ПустаяСтрока(СтрокаВыгрузки.П000010000302) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВыгрузки.ИдПроизвИмп = ПолучитьИдентификаторПроизводителяИмпортера(ДанныеВыгрузки, СтрокаВыгрузки, мИдГруппы12);
		СтрокаВыгрузки.ИдПоставщика = ПолучитьИдентификаторПоставщика(ДанныеВыгрузки, СтрокаВыгрузки, мИдГруппы12);
		СтрокаВыгрузки.ИдЛицензии = ПолучитьИдентификаторЛицензии(ДанныеВыгрузки, СтрокаВыгрузки, мИдГруппы12);
	КонецЦикла;
	
	ТаблицаВыгрузкиВозвраты.Колонки.Добавить("ИдПроизвИмп");
	ТаблицаВыгрузкиВозвраты.Колонки.Добавить("ИдПоставщика");
	ТаблицаВыгрузкиВозвраты.Колонки.Добавить("ИдЛицензии");
	
	КодыВидовПродукции = ТаблицаВыгрузкиДекларация.Скопировать( , "П000010000302");
	
	Для Каждого СтрокаВыгрузки Из ТаблицаВыгрузкиВозвраты Цикл
		Если ПустаяСтрока(СтрокаВыгрузки.П000020000302) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВыгрузки.ИдПроизвИмп = ПолучитьИдентификаторПроизводителяИмпортера(ДанныеВыгрузки, СтрокаВыгрузки, мИдГруппы22);
		СтрокаВыгрузки.ИдПоставщика = ПолучитьИдентификаторПоставщика(ДанныеВыгрузки, СтрокаВыгрузки, мИдГруппы22);
		СтрокаВыгрузки.ИдЛицензии = ПолучитьИдентификаторЛицензии(ДанныеВыгрузки, СтрокаВыгрузки, мИдГруппы22);
		
		НовыйКодВидаПродукции = КодыВидовПродукции.Добавить();
		НовыйКодВидаПродукции.П000010000302 = СтрокаВыгрузки.П000020000302;
	КонецЦикла;
	
	КодыВидовПродукции.Свернуть("П000010000302");
	КодыВидовПродукции = КодыВидовПродукции.ВыгрузитьКолонку("П000010000302");
	
	ПрототипУзла_Оборот = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "Оборот");
	
	НомерПП_КодВидаПродукции = 0;
	Для Каждого КодВидаПродукции Из КодыВидовПродукции Цикл
		Если ПустаяСтрока(КодВидаПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Узел_Оборот = НовыйУзелИзПрототипа(ПрототипУзла_Оборот);
		
		НомерПП_КодВидаПродукции = НомерПП_КодВидаПродукции + 1;
		УстановитьЗначениеЭлемента(Узел_Оборот, "ПN", НомерПП_КодВидаПродукции);
		УстановитьЗначениеЭлемента(Узел_Оборот, "П000000000003", КодВидаПродукции);
		
		УсловияОтбора = Новый Структура;
		УсловияОтбора.Вставить("П000010000302", КодВидаПродукции);
		СтрокиПоставокПоПродукции = ТаблицаВыгрузкиДекларация.НайтиСтроки(УсловияОтбора);
		ДанныеПоставокПоПродукции = ТаблицаВыгрузкиДекларация.Скопировать(СтрокиПоставокПоПродукции);
		
		УсловияОтбора = Новый Структура;
		УсловияОтбора.Вставить("П000020000302", КодВидаПродукции);
		СтрокиВозвратовПоПродукции = ТаблицаВыгрузкиВозвраты.НайтиСтроки(УсловияОтбора);
		ДанныеВозвратовПоПродукции = ТаблицаВыгрузкиВозвраты.Скопировать(СтрокиВозвратовПоПродукции);
		
		ПроизводителиИмпортеры = ДанныеПоставокПоПродукции.Скопировать( , "ИдПроизвИмп");
		Для Каждого СтрокаВыгрузки Из ДанныеВозвратовПоПродукции Цикл
			НовыйПроизводительИмпортер = ПроизводителиИмпортеры.Добавить();
			НовыйПроизводительИмпортер.ИдПроизвИмп = СтрокаВыгрузки.ИдПроизвИмп;
		КонецЦикла;
		
		ПроизводителиИмпортеры.Свернуть("ИдПроизвИмп");
		ПроизводителиИмпортеры = ПроизводителиИмпортеры.ВыгрузитьКолонку("ИдПроизвИмп");
		
		ПрототипУзла_СведПроизвИмпорт = ПолучитьПодчиненныйЭлемент(Узел_Оборот, "СведПроизвИмпорт");
		
		НомерПП_ПроизводителиИмпортеры = 0;
		Для Каждого ПроизводительИмпортер Из ПроизводителиИмпортеры Цикл
			Узел_СведПроизвИмпорт = НовыйУзелИзПрототипа(ПрототипУзла_СведПроизвИмпорт);
			
			НомерПП_ПроизводителиИмпортеры = НомерПП_ПроизводителиИмпортеры + 1;
			УстановитьЗначениеЭлемента(Узел_СведПроизвИмпорт, "ПN", НомерПП_ПроизводителиИмпортеры);
			УстановитьЗначениеЭлемента(Узел_СведПроизвИмпорт, "ИдПроизвИмп", ПроизводительИмпортер);
			
			УсловияОтбора = Новый Структура;
			УсловияОтбора.Вставить("ИдПроизвИмп", ПроизводительИмпортер);
			
			СтрокиПоставокПоПроизводителямИмпортерам = ДанныеПоставокПоПродукции.НайтиСтроки(УсловияОтбора);
			ДанныеПоставокПоПроизводителямИмпортерам = ДанныеПоставокПоПродукции.Скопировать(СтрокиПоставокПоПроизводителямИмпортерам);
			
			СтрокиВозвратовПоПроизводителямИмпортерам = ДанныеВозвратовПоПродукции.НайтиСтроки(УсловияОтбора);
			ДанныеВозвратовПоПроизводителямИмпортерам = ДанныеВозвратовПоПродукции.Скопировать(СтрокиВозвратовПоПроизводителямИмпортерам);
			
			Поставщики = ДанныеПоставокПоПроизводителямИмпортерам.Скопировать( , "ИдПоставщика, ИдЛицензии");
			Для Каждого СтрокаВыгрузки Из ДанныеВозвратовПоПродукции Цикл
				НовыйПоставщик = Поставщики.Добавить();
				НовыйПоставщик.ИдПоставщика = СтрокаВыгрузки.ИдПоставщика;
				НовыйПоставщик.ИдЛицензии = СтрокаВыгрузки.ИдЛицензии;
			КонецЦикла;
			
			Поставщики.Свернуть("ИдПоставщика, ИдЛицензии");
			
			ПрототипУзла_Поставщик = ПолучитьПодчиненныйЭлемент(Узел_СведПроизвИмпорт, "Поставщик");
			
			НомерПП_Поставщик = 0;
			Для Каждого Поставщик Из Поставщики Цикл
				Узел_Поставщик = НовыйУзелИзПрототипа(ПрототипУзла_Поставщик);
				
				НомерПП_Поставщик = НомерПП_Поставщик + 1;
				УстановитьЗначениеЭлемента(Узел_Поставщик, "ПN", НомерПП_Поставщик);
				УстановитьЗначениеЭлемента(Узел_Поставщик, "ИдПоставщика", Поставщик.ИдПоставщика);
				УстановитьЗначениеЭлемента(Узел_Поставщик, "ИдЛицензии", Поставщик.ИдЛицензии);
				
				УсловияОтбора = Новый Структура;
				УсловияОтбора.Вставить("ИдПоставщика", Поставщик.ИдПоставщика);
				УсловияОтбора.Вставить("ИдЛицензии", Поставщик.ИдЛицензии);
				
				ПрототипУзла_Закупка = ПолучитьПодчиненныйЭлемент(Узел_Поставщик, "Закупка");
				
				СтрокиПоПоставщику = ДанныеПоставокПоПроизводителямИмпортерам.НайтиСтроки(УсловияОтбора);
				Для Каждого СтрокаПоПоставщику Из СтрокиПоПоставщику Цикл
					Узел_Закупка = НовыйУзелИзПрототипа(ПрототипУзла_Закупка);
					УстановитьЗначениеЭлемента(Узел_Закупка, "П000000000015", ?(ЗначениеЗаполнено(СтрокаПоПоставщику.П000010000314), СтрокаПоПоставщику.П000010000314, ""));
					УстановитьЗначениеЭлемента(Узел_Закупка, "П000000000016", СтрокаПоПоставщику.П000010000315);
					УстановитьЗначениеЭлемента(Узел_Закупка, "П000000000017", СтрокаПоПоставщику.П000010000316);
					УстановитьЗначениеЭлемента(Узел_Закупка, "П000000000018", СтрокаПоПоставщику.П000010000317);
					УстановитьЗначениеЭлемента(Узел_Закупка, "П000000000019", СтрокаПоПоставщику.П000010000318);
					УстановитьЗначениеЭлемента(Узел_Закупка, "П000000000020", СтрокаПоПоставщику.П000010000319);
					УстановитьЗначениеЭлемента(Узел_Закупка, "П000000000021", СтрокаПоПоставщику.П000010000320);
					
					НаличиеЗакупки = Истина;
				КонецЦикла;
				УдалитьУзел(ПрототипУзла_Закупка);
				
				ПрототипУзла_Возврат = ПолучитьПодчиненныйЭлемент(Узел_Поставщик, "Возврат");
				
				СтрокиПоПоставщику = ДанныеВозвратовПоПроизводителямИмпортерам.НайтиСтроки(УсловияОтбора);
				Для Каждого СтрокаПоПоставщику Из СтрокиПоПоставщику Цикл
					Узел_Возврат = НовыйУзелИзПрототипа(ПрототипУзла_Возврат);
					УстановитьЗначениеЭлемента(Узел_Возврат, "П000000000015", ?(ЗначениеЗаполнено(СтрокаПоПоставщику.П000020000314), СтрокаПоПоставщику.П000020000314, ""));
					УстановитьЗначениеЭлемента(Узел_Возврат, "П000000000016", СтрокаПоПоставщику.П000020000315);
					УстановитьЗначениеЭлемента(Узел_Возврат, "П000000000017", СтрокаПоПоставщику.П000020000316);
					УстановитьЗначениеЭлемента(Узел_Возврат, "П000000000018", СтрокаПоПоставщику.П000020000317);
					УстановитьЗначениеЭлемента(Узел_Возврат, "П000000000019", СтрокаПоПоставщику.П000020000318);
					УстановитьЗначениеЭлемента(Узел_Возврат, "П000000000020", СтрокаПоПоставщику.П000020000319);
					УстановитьЗначениеЭлемента(Узел_Возврат, "П000000000021", СтрокаПоПоставщику.П000020000320);
					
					НаличиеВозврата = Истина;
				КонецЦикла;
				УдалитьУзел(ПрототипУзла_Возврат);
				
			КонецЦикла;
			УдалитьУзел(ПрототипУзла_Поставщик);
			
		КонецЦикла;
		УдалитьУзел(ПрототипУзла_СведПроизвИмпорт);
		
	КонецЦикла;
	УдалитьУзел(ПрототипУзла_Оборот);
	
	УстановитьЗначениеЭлемента(УзелВыгрузки, "НаличиеЗакупки", ?(НаличиеЗакупки, "true", "false"));
	УстановитьЗначениеЭлемента(УзелВыгрузки, "НаличиеВозврата", ?(НаличиеВозврата, "true", "false"));
	
КонецПроцедуры

Функция ПолучитьИдентификаторПроизводителяИмпортера(ДанныеВыгрузки, СтрокаСведений, Префикс)
	
	Результат = 0;
	
	ПроизводителиИмпортеры = ДанныеВыгрузки.ПроизводителиИмпортеры;
	
	УсловияОтбора = Новый Структура;
	УсловияОтбора.Вставить("П000000000004", СтрокаСведений[Префикс + "03"]);
	УсловияОтбора.Вставить("П000000000005", СтрокаСведений[Префикс + "04"]);
	УсловияОтбора.Вставить("П000000000006", СтрокаСведений[Префикс + "05"]);
	
	НайденныеСтроки = ПроизводителиИмпортеры.НайтиСтроки(УсловияОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Результат = НайденныеСтроки[0].ИДПроизвИмп;
		
	Иначе
		НоваяСтрока = ПроизводителиИмпортеры.Добавить();
		
		Идентификатор = ПроизводителиИмпортеры.Индекс(НоваяСтрока) + 1;
		
		НоваяСтрока.ИДПроизвИмп   = Идентификатор;
		НоваяСтрока.П000000000004 = СтрокаСведений[Префикс + "03"];
		НоваяСтрока.П000000000005 = СтрокаСведений[Префикс + "04"];
		НоваяСтрока.П000000000006 = СтрокаСведений[Префикс + "05"];
		
		Результат = Идентификатор;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИдентификаторПоставщика(ДанныеВыгрузки, СтрокаСведений, Префикс)
	
	Результат = 0;
	
	Контрагенты = ДанныеВыгрузки.Контрагенты;
	
	ЭтоРоссийскийКонтрагент = НЕ ЗначениеЗаполнено(ДополнительныеДанныеПоАдресу(СтрокаСведений.ПолныйАдрес, "Страна"));
	
	УсловияОтбора = Новый Структура;
	
	УсловияОтбора.Вставить("Наименование", СтрокаСведений[Префикс + "06"]);
	
	УсловияОтбора.Вставить("ИНН", "");
	УсловияОтбора.Вставить("КПП", "");
	
	УсловияОтбора.Вставить("КодСтраны",  "");
	УсловияОтбора.Вставить("КодРегион",  "");
	УсловияОтбора.Вставить("Индекс",     "");
	УсловияОтбора.Вставить("Район",      "");
	УсловияОтбора.Вставить("Город",      "");
	УсловияОтбора.Вставить("НаселПункт", "");
	УсловияОтбора.Вставить("Улица",      "");
	УсловияОтбора.Вставить("Дом",        "");
	УсловияОтбора.Вставить("Корпус",     "");
	УсловияОтбора.Вставить("Литера",     "");
	УсловияОтбора.Вставить("Кварт",      "");
	
	УсловияОтбора.Вставить("КодСтраны", "");
	УсловияОтбора.Вставить("Адрес",     "");
	
	АдресКонтрагента = СтрокаСведений.ПолныйАдрес;
	
	ИНН = СокрЛП(СтрокаСведений[Префикс + "08"]);
	КПП = СокрЛП(СтрокаСведений[Префикс + "09"]);
	
	Если ЭтоРоссийскийКонтрагент Тогда
		УсловияОтбора.Вставить("ИНН", ИНН);
		УсловияОтбора.Вставить("КПП", КПП);
		Если АдресКонтрагента <> Неопределено Тогда
			УсловияОтбора.КодСтраны  = АдресКонтрагента.Страна;
			УсловияОтбора.КодРегион  = АдресКонтрагента.Регион;
			УсловияОтбора.Индекс     = АдресКонтрагента.Индекс;
			УсловияОтбора.Район      = АдресКонтрагента.Район;
			УсловияОтбора.Город      = АдресКонтрагента.Город;
			УсловияОтбора.НаселПункт = АдресКонтрагента.НаселенныйПункт;
			УсловияОтбора.Улица      = АдресКонтрагента.Улица;
			УсловияОтбора.Дом        = АдресКонтрагента.Дом;
			УсловияОтбора.Корпус     = АдресКонтрагента.Корпус;
			УсловияОтбора.Кварт      = АдресКонтрагента.Квартира;
		КонецЕсли;
	Иначе
		Если АдресКонтрагента <> Неопределено Тогда
			УсловияОтбора.КодСтраны = АдресКонтрагента.Страна;
			УсловияОтбора.Адрес     = АдресКонтрагента.Адрес;
			УсловияОтбора.ИНН       = ИНН;
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтроки = Контрагенты.НайтиСтроки(УсловияОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Результат = НайденныеСтроки[0].ИдКонтр;
		
	Иначе
		НоваяСтрока = Контрагенты.Добавить();
		
		Идентификатор = Контрагенты.Индекс(НоваяСтрока) + 1;
		
		НоваяСтрока.ИдКонтр = Идентификатор;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, УсловияОтбора);
		
		Результат = Идентификатор;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИдентификаторЛицензии(ДанныеВыгрузки, СтрокаСведений, Префикс)
	
	Результат = 0;
	
	Лицензии = ДанныеВыгрузки.Лицензии;
	
	ИдКонтр = ПолучитьИдентификаторПоставщика(ДанныеВыгрузки, СтрокаСведений, Префикс);
	
	УсловияОтбора = Новый Структура;
	УсловияОтбора.Вставить("П000000000011Серия", СтрокаСведений[Префикс + "21"]);
	УсловияОтбора.Вставить("П000000000011Номер", СтрокаСведений[Префикс + "22"]);
	
	УсловияОтбора.Вставить("П000000000012", СтрокаСведений[Префикс + "11"]);  // дата начала
	УсловияОтбора.Вставить("П000000000013", СтрокаСведений[Префикс + "12"]);  // дата конца
	
	УсловияОтбора.Вставить("ИдКонтр", ИдКонтр);
	
	ЛицензияУказана = НЕ ПустаяСтрока(УсловияОтбора.П000000000011Серия)
	              ИЛИ НЕ ПустаяСтрока(УсловияОтбора.П000000000011Номер)
	              ИЛИ ЗначениеЗаполнено(УсловияОтбора.П000000000012);
	
	Если ЛицензияУказана Тогда
		НайденныеСтроки = Лицензии.НайтиСтроки(УсловияОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Результат = НайденныеСтроки[0].ИдЛицензии;
			
		Иначе
			НоваяСтрока = Лицензии.Добавить();
			
			Идентификатор = Лицензии.Индекс(НоваяСтрока) + 1;
			
			НоваяСтрока.ИдЛицензии = Идентификатор;
			НоваяСтрока.П000000000011Серия = СтрокаСведений[Префикс + "21"];
			НоваяСтрока.П000000000011Номер = СтрокаСведений[Префикс + "22"];
			НоваяСтрока.П000000000012 = СтрокаСведений[Префикс + "11"];
			НоваяСтрока.П000000000013 = СтрокаСведений[Префикс + "12"];
			НоваяСтрока.П000000000014 = СтрокаСведений[Префикс + "13"];
			НоваяСтрока.ИдКонтр = ИдКонтр;
			
			Результат = Идентификатор;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСправочникиДекларации(Узел_Справочники, ДанныеВыгрузки)
	
	ПрототипУзла_Контрагенты = ПолучитьПодчиненныйЭлемент(Узел_Справочники, "Поставщики");
	Для Каждого СтрокаКонтрагента Из ДанныеВыгрузки.Контрагенты Цикл
		Узел_Контрагенты = НовыйУзелИзПрототипа(ПрототипУзла_Контрагенты);
		
		УстановитьЗначениеЭлемента(Узел_Контрагенты, "ИдПостав", СтрокаКонтрагента.ИдКонтр);
		УстановитьЗначениеЭлемента(Узел_Контрагенты, "П000000000007", СтрокаКонтрагента.Наименование);
		
		Узел_Резидент = ПолучитьПодчиненныйЭлемент(Узел_Контрагенты, "Резидент");
		Узел_Иностр = ПолучитьПодчиненныйЭлемент(Узел_Контрагенты, "Иностр");
		
		ЭтоКонтрагентРФ = НЕ ЗначениеЗаполнено(СтрокаКонтрагента.КодСтраны);
		Если ЭтоКонтрагентРФ Тогда
			
			УсловияОтбораЛицензий = Новый Структура("ИдКонтр", СтрокаКонтрагента.ИдКонтр);
			ЛицензииКонтрагента = ДанныеВыгрузки.Лицензии.НайтиСтроки(УсловияОтбораЛицензий);
			
			ПрототипУзла_Лицензии = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "Лицензии");
			Для Каждого Лицензия Из ЛицензииКонтрагента Цикл
				Узел_Лицензии = НовыйУзелИзПрототипа(ПрототипУзла_Лицензии);
				Узел_Лицензия = ПолучитьПодчиненныйЭлемент(Узел_Лицензии, "Лицензия");
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ИдЛицензии", Лицензия.ИдЛицензии);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "П000000000011", Лицензия.П000000000011Серия + "," + Лицензия.П000000000011Номер);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "П000000000012", Лицензия.П000000000012);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "П000000000013", Лицензия.П000000000013);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "П000000000014", Лицензия.П000000000014);
			КонецЦикла;
			УдалитьУзел(ПрототипУзла_Лицензии);
			
			Узел_П000000000008 = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "П000000000008");
			УстановитьЗначениеЭлемента(Узел_П000000000008, "КодСтраны",  643);
			УстановитьЗначениеЭлемента(Узел_П000000000008, "Индекс",     СтрокаКонтрагента.Индекс);
			УстановитьЗначениеЭлемента(Узел_П000000000008, "КодРегион",  СтрокаКонтрагента.КодРегион);
			УстановитьЗначениеЭлемента(Узел_П000000000008, "Район",      СтрокаКонтрагента.Район);
			УстановитьЗначениеЭлемента(Узел_П000000000008, "Город",      СтрокаКонтрагента.Город);
			УстановитьЗначениеЭлемента(Узел_П000000000008, "НаселПункт", СтрокаКонтрагента.НаселПункт);
			УстановитьЗначениеЭлемента(Узел_П000000000008, "Улица",      СтрокаКонтрагента.Улица);
			УстановитьЗначениеЭлемента(Узел_П000000000008, "Дом",        СтрокаКонтрагента.Дом);
			УстановитьЗначениеЭлемента(Узел_П000000000008, "Корпус",     СтрокаКонтрагента.Корпус);
			УстановитьЗначениеЭлемента(Узел_П000000000008, "Литера",     СтрокаКонтрагента.Литера);
			УстановитьЗначениеЭлемента(Узел_П000000000008, "Кварт",      СтрокаКонтрагента.Кварт);
			
			ИНН = СокрЛП(СтрокаКонтрагента.ИНН);
			КПП = СокрЛП(СтрокаКонтрагента.КПП);
			
			УзелЮЛ = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "ЮЛ");
			УзелФЛ = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "ФЛ");
			
			ЭтоФизЛицо = СтрДлина(ИНН) = 12 И ПустаяСтрока(КПП);
			Если ЭтоФизЛицо Тогда
				УдалитьУзел(УзелЮЛ);
				УстановитьЗначениеЭлемента(УзелФЛ, "П000000000009", ИНН);
			Иначе
				УстановитьЗначениеЭлемента(УзелЮЛ, "П000000000009", ИНН);
				УстановитьЗначениеЭлемента(УзелЮЛ, "П000000000010", КПП);
				УдалитьУзел(УзелФЛ);
			КонецЕсли;
			
			УдалитьУзел(Узел_Иностр);
		Иначе
			УдалитьУзел(Узел_Резидент);
			
			УстановитьЗначениеЭлемента(Узел_Иностр, "П000000000081", СтрокаКонтрагента.КодСтраны);
			УстановитьЗначениеЭлемента(Узел_Иностр, "П000000000082", СтрокаКонтрагента.Адрес);
			
			ИдентификационныйНомер = СокрЛП(СтрокаКонтрагента.ИНН);
			
			Если Число(Лев(ПараметрыВыгрузки.ВерсияФормата, 3)) < 431 Тогда
			
				ЭтоБЕЛАРУСЬ = (СтрокаКонтрагента.КодСтраны = "112");
				Если ЭтоБЕЛАРУСЬ Тогда
					Узел_Беларусь = ПолучитьПодчиненныйЭлемент(Узел_Иностр, "Беларусь");
					УстановитьЗначениеЭлемента(Узел_Беларусь, "УчНомер", ИдентификационныйНомер);
				КонецЕсли;
				
				ЭтоКАЗАХСТАН = (СтрокаКонтрагента.КодСтраны = "398");
				Если ЭтоКАЗАХСТАН Тогда
					Узел_Казахстан = ПолучитьПодчиненныйЭлемент(Узел_Иностр, "Казахстан");
					УстановитьЗначениеЭлемента(Узел_Казахстан, "РегНомер", ИдентификационныйНомер);
				КонецЕсли;	
				
			Иначе
				
				УстановитьЗначениеЭлемента(Узел_Иностр, "Номер", ИдентификационныйНомер);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	УдалитьУзел(ПрототипУзла_Контрагенты);
	
	ПрототипУзла_ПроизводителиИмпортеры = ПолучитьПодчиненныйЭлемент(Узел_Справочники, "ПроизводителиИмпортеры");
	Для Каждого СтрокаПроизводителяИмпортера Из ДанныеВыгрузки.ПроизводителиИмпортеры Цикл
		Узел_ПроизводителиИмпортеры = НовыйУзелИзПрототипа(ПрототипУзла_ПроизводителиИмпортеры);
		
		УстановитьЗначениеЭлемента(Узел_ПроизводителиИмпортеры, "ИдПроизвИмп", СтрокаПроизводителяИмпортера.ИдПроизвИмп);
		УстановитьЗначениеЭлемента(Узел_ПроизводителиИмпортеры, "П000000000004", СтрокаПроизводителяИмпортера.П000000000004);
		УстановитьЗначениеЭлемента(Узел_ПроизводителиИмпортеры, "П000000000005", СтрокаПроизводителяИмпортера.П000000000005);
		УстановитьЗначениеЭлемента(Узел_ПроизводителиИмпортеры, "П000000000006", СтрокаПроизводителяИмпортера.П000000000006);
	КонецЦикла;
	УдалитьУзел(ПрототипУзла_ПроизводителиИмпортеры);
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если СвойствоОпределено(Параметры, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(Параметры, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, Параметры);
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И СвойствоОпределено(Параметры, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если СвойствоОпределено(Параметры, Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Формирование XML: Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Формирование XML: Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML();
	
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры);
	
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, "windows-1251");
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// Преобразовываем, при необходимости, значение показателя к типу "Строка".
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// Проставляем значение в табличные документы.
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Проставляем значение в многостраничные разделы.
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыВыгрузитьПакет(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// сохраняем при необходимости
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РезультатВыгрузки = РегламентированнаяОтчетность.КонтекстЭДОЛокальный().ВыгрузитьПакетФСРАР(мСохраненныйДок.Ссылка, Истина);
	Если ЗначениеЗаполнено(РезультатВыгрузки) Тогда
		Сообщить("Пакет успешно выгружен в файл """ + РезультатВыгрузки + """.", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОтправить(Кнопка)
	
	// сохраняем при необходимости
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетность.КонтекстЭДОЛокальный().ОтправитьОбъектВФСРАР(мСохраненныйДок.Ссылка, Кнопка, Справочники.ВидыОтправляемыхДокументов.ЗакупкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПолучитьРезультат(Кнопка)
	
	Если мСохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.КонтекстЭДОЛокальный().ОбновитьРезультатОтправкиФСРАР(мСохраненныйДок.Ссылка, Справочники.ВидыОтправляемыхДокументов.ЗакупкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции) Тогда
		// покажем протокол текущей отправки
		ПоказатьПротоколТекущейОтправки()
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_КоманднаяПанельФормыПоказатьРезультат(Кнопка)
	
	// покажем протокол текущей отправки
	ПоказатьПротоколТекущейОтправки();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоказатьОтправки(Кнопка)
	
	СсылкаФСРАР = ?(мСохраненныйДок <> Неопределено, мСохраненныйДок.Ссылка, Документы.РегламентированныйОтчет.ПустаяСсылка());
	РегламентированнаяОтчетность.КонтекстЭДОЛокальный().ПоказатьОтправкиФСРАР(СсылкаФСРАР);
	
КонецПроцедуры

Процедура КнопкаОбновитьСостояниеОтправкиНажатие(Элемент)
	
	Если мСохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОтправки = РегламентированнаяОтчетность.КонтекстЭДОЛокальный().ПолучитьРеквизитыОтправкиФСРАР(мСохраненныйДок.Ссылка);
	Если РеквизитыОтправки <> Неопределено Тогда
		РегламентированнаяОтчетность.КонтекстЭДОЛокальный().ОбновитьРезультатОтправкиФСРАР(мСохраненныйДок.Ссылка, Справочники.ВидыОтправляемыхДокументов.ЗакупкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаОткрытьПротоколОтправкиНажатие(Элемент)
	
	Если мСохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// покажем протокол текущей отправки
	ПоказатьПротоколТекущейОтправки();
	
КонецПроцедуры

Процедура ПоказатьПротоколТекущейОтправки()
	
	Если мСохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОтправки = РегламентированнаяОтчетность.КонтекстЭДОЛокальный().ПолучитьРеквизитыОтправкиФСРАР(мСохраненныйДок.Ссылка, Истина);
	
	Если РеквизитыОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаголовокПротокола = "Протокол обработки";
	РегламентированнаяОтчетность.ПоказатьПротоколОбработки(РеквизитыОтправки.Протокол.Получить(), ЗаголовокПротокола);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

//Андрей
Процедура ЗаполнитьАвто() Экспорт 
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Запрашиваем подтверждение у пользователя и очищаем отчет.
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетность.роОчистить(ЭтаФорма, Ложь);
	
	// Здесь необходимо разместить вызовы процедур заполнения отчета.
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	РедакцияКонфигурации = Лев(РегламентированнаяОтчетность.РедакцияКонфигурации(),1);
	СписокОрганизаций = Новый СписокЗначений;
	
	СписокОрганизаций.Добавить(Организация.Ссылка, Организация.Наименование);
	ЗаполнитьАвтоБухгалтерия(СписокОрганизаций);
	
	Расчет();
	//УстановитьДоступностьПолейТаблицы1();
	//УстановитьДоступностьПолейТаблицы2();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры

Процедура ЗаполнитьАвтоБухгалтерия(СписокОрганизаций) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Хозрасчетный.Товары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет41";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КорСчет", 		ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	Запрос.УстановитьПараметр("ЮрАдрес",		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Запрос.УстановитьПараметр("Счет", 			ПланыСчетов.Хозрасчетный.Товары);
	Запрос.УстановитьПараметр("ВидСубконто", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("СписокОрганизаций", 	СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаНач", 		мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон", 		КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ПустаяДата",		'00010101000000');
	Запрос.УстановитьПараметр("ПустаяСтрока",	"");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000010000101,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000010000102,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК П000010000103,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.ИНН
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.ИНН
	|	КОНЕЦ КАК П000010000104,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.КПП
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.КПП
	|	КОНЕЦ КАК П000010000105,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор.Контрагент.НаименованиеПолное КАК СТРОКА(200)) КАК П000010000106,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(100)) КАК П000010000107,
	|	ХозрасчетныйОбороты.Регистратор.Контрагент.ИНН КАК П000010000108,
	|	ХозрасчетныйОбороты.Регистратор.Контрагент.КПП КАК П000010000109,
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.СерияНомер, """") КАК П000010000110,
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.Период, """") КАК П000010000111,
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.ДатаОкончания, """") КАК П000010000112,
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.КемВыдана, """") КАК П000010000113,
	|	"""" КАК П000010000114,
	|	"""" КАК П000010000115,
	|	"""" КАК П000010000116,
	|	ХозрасчетныйОбороты.Регистратор.Дата КАК П000010000117,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента = &ПустаяСтрока
	|			ТОГДА ХозрасчетныйОбороты.Регистратор.Номер
	|		ИНАЧЕ ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента
	|	КОНЕЦ КАК П000010000118,
	|	"""" КАК П000010000119,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОбороты.КоличествоОборот * СведенияОбАлкогольнойПродукции.КоэффПересчетаДал
	|		КОНЕЦ) КАК П000010000120,
	|	ХозрасчетныйОбороты.Регистратор.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В ИЕРАРХИИ (&Счет), &ВидСубконто, Организация В (&СписокОрганизаций), КорСчет В ИЕРАРХИИ (&КорСчет), ) КАК ХозрасчетныйОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|			ПО ХозрасчетныйОбороты.Регистратор.Контрагент = КонтактнаяИнформация.Объект
	|				И (КонтактнаяИнформация.Вид = &ЮрАдрес)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции.СрезПоследних(&ДатаКон, ) КАК ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних
	|			ПО ХозрасчетныйОбороты.Регистратор.Контрагент = ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.Поставщик
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = ХозрасчетныйОбороты.Субконто1
	|ГДЕ
	|	ХозрасчетныйОбороты.КоличествоОборотДт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор.Контрагент,
	|	СведенияОбАлкогольнойПродукции.КодВида169,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.ИНН
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.ИНН
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.КПП
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.КПП
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор.Контрагент.НаименованиеПолное КАК СТРОКА(200)),
	|	ХозрасчетныйОбороты.Регистратор.Контрагент.ИНН,
	|	ХозрасчетныйОбороты.Регистратор.Контрагент.КПП,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента = &ПустаяДата
	|			ТОГДА ХозрасчетныйОбороты.Регистратор.Дата
	|		ИНАЧЕ ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента = &ПустаяСтрока
	|			ТОГДА ХозрасчетныйОбороты.Регистратор.Номер
	|		ИНАЧЕ ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(100)),
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.СерияНомер, """"),
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.Период, """"),
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.ДатаОкончания, """"),
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.КемВыдана, """"),
	|	ХозрасчетныйОбороты.Регистратор.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000010000102,
	|	П000010000106";
	
	ИмяРаздела="Декларация";
	СтраницыРаздела = мСтруктураМногостраничныхРазделов[ИмяРаздела];
	
	АктивнаяСтраница = СтраницыРаздела.Найти(Истина, "АктивнаяСтраница");
	
	Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные) <> Тип("Структура") Тогда
		АктивнаяСтраница.ДополнительныеДанные = Новый Структура;
	КонецЕсли;
	
	ДополнительныеДанныеСтраницы = АктивнаяСтраница.ДополнительныеДанные;
	
	СведенияОбПоставщике = Неопределено;
	ИмяЭлементаСтруктуры = "П000010000107";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаполнения1 = мСтруктураМногострочныхРазделов.П0000100001.СкопироватьКолонки();
	НС = 1;
	
	Стр=Новый Структура("Организация,Номер",ЭтотОбъект.Организация,0);
	Отбор=Новый Структура("Поставщик");
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		СтрокаЗаполнения = ТаблицаЗаполнения1.Добавить();
		СтрокаЗаполнения.П000010000100 = НС;
		ЗаполнитьЗначенияСвойств(СтрокаЗаполнения, СтрокаЗапроса);
		Стр.Номер=СтрокаЗапроса.П000010000118;
		СтрокаЗаполнения.П000010000118=ПривестиНомерНаПечать(СтрокаЗапроса.П000010000118);
		Если НЕ ДополнительныеДанныеСтраницы.Свойство(ИмяЭлементаСтруктуры+"_"+Формат(НС,"ЧГ=0"), СведенияОбПоставщике) ИЛИ СведенияОбПоставщике = Неопределено Тогда
		
			СведенияОбПоставщике = Новый Структура;
			СведенияОбПоставщике.Вставить("Страна",				"");
			СведенияОбПоставщике.Вставить("Индекс",				"");
			СведенияОбПоставщике.Вставить("Регион",			"");
			СведенияОбПоставщике.Вставить("Район",				"");
			СведенияОбПоставщике.Вставить("Город",				"");
			СведенияОбПоставщике.Вставить("НаселенныйПункт",	"");
			СведенияОбПоставщике.Вставить("Улица",				"");
			СведенияОбПоставщике.Вставить("Дом",				"");
			СведенияОбПоставщике.Вставить("Корпус",				"");
			СведенияОбПоставщике.Вставить("Квартира",			"");
			СведенияОбПоставщике.Вставить("Адрес",				"");
			СведенияОбПоставщике.Вставить("ТипДома",			"");
			СведенияОбПоставщике.Вставить("ТипКорпуса",			"");
			СведенияОбПоставщике.Вставить("ТипКвартиры",		"");
		КонецЕсли;
		СтрокаОшибок="";
		ПолучитьСведенияОбАдресеКонтрагнета(СтрокаЗапроса.Контрагент.Ссылка,СведенияОбПоставщике,СтрокаОшибок);
		Если СтрокаЗапроса.Контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если СтрДлина(СтрокаЗапроса.Контрагент.ИНН)<12 Тогда
				СтрокаОшибок=СтрокаОшибок+Символы.ПС+"-Длина ИНН меньше требуемой";
			КонецЕсли;
		Иначе
			Если СтрДлина(СтрокаЗапроса.Контрагент.ИНН)<10 Тогда
				СтрокаОшибок=СтрокаОшибок+Символы.ПС+"-Длина ИНН меньше требуемой";
			КонецЕсли;
			Если СтрДлина(СтрокаЗапроса.Контрагент.КПП)<9 Тогда
				СтрокаОшибок=СтрокаОшибок+Символы.ПС+"-Длина КПП меньше требуемой";
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
			Сообщить("Строка "+Строка(НС)+". У контрагента "+СтрокаЗапроса.Контрагент.Наименование+" не верно заполнены обязательные данные:"+СтрокаОшибок);
		КонецЕсли;
		АктивнаяСтраница.ДополнительныеДанные.Вставить(ИмяЭлементаСтруктуры+"_"+Формат(НС,"ЧГ=0"), СведенияОбПоставщике);
		АктивнаяСтраница.ДополнительныеДанные.Вставить(СтрЗаменить(ИмяЭлементаСтруктуры,"П0000100001", "П0000100003")+"_"+Формат(НС,"ЧГ=0"), СведенияОбПоставщике);
		
		Отбор.Поставщик=СтрокаЗапроса.Контрагент.Ссылка;
		СвОЛиц=РегистрыСведений.ЛицензииПоставщиковАлкогольнойПродукции.СрезПоследних(ЭтотОбъект.мДатаКонцаПериодаОтчета,Отбор);
		Если СвОЛиц.Количество() Тогда
			Лиц=СвОЛиц.Получить(0);
			СерияНомер=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Лиц.СерияНомер," ");
			СтрокаЗаполнения.П000010000121=СерияНомер[0];
			СтрокаЗаполнения.П000010000122=СерияНомер[1];
			СтрокаЗаполнения.П000010000111=Лиц.Период;
			СтрокаЗаполнения.П000010000112=Лиц.ДатаОкончания;
			СтрокаЗаполнения.П000010000113=Лиц.КемВыдана;
		КонецЕсли;
		НС = НС + 1;
	КонецЦикла;
	
	ВывестиСведенияПодразделения(СведенияОПодразделении(Организация), "Декларация");
	ВывестиРазделВТабличныйДокумент("П0000100001", ТаблицаЗаполнения1);
	
	ТаблицаЗаполнения13 = ТаблицаЗаполнения1.Скопировать();
	//ТаблицаЗаполнения13.Колонки.Добавить("П000010000312", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4));
	//ТаблицаЗаполнения13.Колонки.Добавить("П000010000316", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4));
	
	Для Каждого Колонка Из ТаблицаЗаполнения13.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "П0000100001", "П0000100003");
	КонецЦикла;
	
	ВывестиРазделВТабличныйДокумент("П0000100003", ТаблицаЗаполнения13);
	Запрос.УстановитьПараметр("Счет", 		ПланыСчетов.Хозрасчетный.Товары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000020000101,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000020000102,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК П000020000103,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.ИНН
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.ИНН
	|	КОНЕЦ КАК П000020000104,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.КПП
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.КПП
	|	КОНЕЦ КАК П000020000105,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор.Контрагент.НаименованиеПолное КАК СТРОКА(200)) КАК П000020000106,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(100)) КАК П000020000107,
	|	ХозрасчетныйОбороты.Регистратор.Контрагент.ИНН КАК П000020000108,
	|	ХозрасчетныйОбороты.Регистратор.Контрагент.КПП КАК П000020000109,
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.СерияНомер, """") КАК П000020000110,
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.Период, """") КАК П000020000111,
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.ДатаОкончания, """") КАК П000020000112,
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.КемВыдана, """") КАК П000020000113,
	|	"""" КАК П000020000114,
	|	"""" КАК П000020000115,
	|	"""" КАК П000020000116,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйОбороты.Регистратор.Дата
	|		ИНАЧЕ ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента
	|	КОНЕЦ КАК П000020000117,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйОбороты.Регистратор.Номер
	|		ИНАЧЕ ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента
	|	КОНЕЦ КАК П000020000118,
	|	"""" КАК П000020000119,
	|	СУММА((ЕСТЬNULL(ХозрасчетныйОбороты.КоличествоОборотДт, 0) - ЕСТЬNULL(ХозрасчетныйОбороты.КоличествоОборотКт, 0)) * СведенияОбАлкогольнойПродукции.КоэффПересчетаДал) КАК П000020000120,
	|	ХозрасчетныйОбороты.Регистратор.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В ИЕРАРХИИ (&Счет), &ВидСубконто, Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|			ПО ХозрасчетныйОбороты.Регистратор.Контрагент = КонтактнаяИнформация.Объект
	|				И (КонтактнаяИнформация.Вид = &ЮрАдрес)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции.СрезПоследних(&ДатаКон, ) КАК ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних
	|			ПО ХозрасчетныйОбороты.Регистратор.Контрагент = ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.Поставщик
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = ХозрасчетныйОбороты.Субконто1
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор.Контрагент,
	|	СведенияОбАлкогольнойПродукции.КодВида169,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.ИНН
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.ИНН
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА СведенияОбАлкогольнойПродукции.Номенклатура.Производитель.КПП
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.Номенклатура.Импортер.КПП
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор.Контрагент.НаименованиеПолное КАК СТРОКА(200)),
	|	ХозрасчетныйОбороты.Регистратор.Контрагент.ИНН,
	|	ХозрасчетныйОбороты.Регистратор.Контрагент.КПП,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента = &ПустаяДата
	|			ТОГДА ХозрасчетныйОбороты.Регистратор.Дата
	|		ИНАЧЕ ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(100)),
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.СерияНомер, """"),
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.Период, """"),
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.ДатаОкончания, """"),
	|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.КемВыдана, """"),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйОбороты.Регистратор.Дата
	|		ИНАЧЕ ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйОбороты.Регистратор.Номер
	|		ИНАЧЕ ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000020000102,
	|	П000020000106";
	
	ИмяРаздела="Возвраты";
	СтраницыРаздела = мСтруктураМногостраничныхРазделов[ИмяРаздела];
	
	АктивнаяСтраница = СтраницыРаздела.Найти(Истина, "АктивнаяСтраница");
	
	Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные) <> Тип("Структура") Тогда
		АктивнаяСтраница.ДополнительныеДанные = Новый Структура;
	КонецЕсли;
	
	ДополнительныеДанныеСтраницы = АктивнаяСтраница.ДополнительныеДанные;
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаполнения1 = мСтруктураМногострочныхРазделов.П0000200001.СкопироватьКолонки();
	НС = 1;
	ИмяЭлементаСтруктуры = "П000020000107";
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		СтрокаЗаполнения = ТаблицаЗаполнения1.Добавить();
		СтрокаЗаполнения.П000020000100 = НС;
		ЗаполнитьЗначенияСвойств(СтрокаЗаполнения, СтрокаЗапроса);
		СтрокаЗаполнения.П000020000118=ПривестиНомерНаПечать(СтрокаЗапроса.П000020000118);
		Если НЕ ДополнительныеДанныеСтраницы.Свойство(ИмяЭлементаСтруктуры+"_"+Формат(НС,"ЧГ=0"), СведенияОбПоставщике) ИЛИ СведенияОбПоставщике = Неопределено Тогда
		
			СведенияОбПоставщике = Новый Структура;
			СведенияОбПоставщике.Вставить("Страна",				"");
			СведенияОбПоставщике.Вставить("Индекс",				"");
			СведенияОбПоставщике.Вставить("Регион",				"");
			СведенияОбПоставщике.Вставить("Район",				"");
			СведенияОбПоставщике.Вставить("Город",				"");
			СведенияОбПоставщике.Вставить("НаселенныйПункт",	"");
			СведенияОбПоставщике.Вставить("Улица",				"");
			СведенияОбПоставщике.Вставить("Дом",				"");
			СведенияОбПоставщике.Вставить("Корпус",				"");
			СведенияОбПоставщике.Вставить("Квартира",			"");
			СведенияОбПоставщике.Вставить("Адрес",				"");
			СведенияОбПоставщике.Вставить("ТипДома",			"");
			СведенияОбПоставщике.Вставить("ТипКорпуса",			"");
			СведенияОбПоставщике.Вставить("ТипКвартиры",		"");
		КонецЕсли;
		СтрокаОшибок="";
		ПолучитьСведенияОбАдресеКонтрагнета(СтрокаЗапроса.Контрагент.Ссылка,СведенияОбПоставщике,СтрокаОшибок);
		Если СтрокаЗапроса.Контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если СтрДлина(СтрокаЗапроса.Контрагент.ИНН)<12 Тогда
				СтрокаОшибок=СтрокаОшибок+Символы.ПС+"-Длина ИНН меньше требуемой";
			КонецЕсли;
		Иначе
			Если СтрДлина(СтрокаЗапроса.Контрагент.ИНН)<10 Тогда
				СтрокаОшибок=СтрокаОшибок+Символы.ПС+"-Длина ИНН меньше требуемой";
			КонецЕсли;
			Если СтрДлина(СтрокаЗапроса.Контрагент.КПП)<9 Тогда
				СтрокаОшибок=СтрокаОшибок+Символы.ПС+"-Длина КПП меньше требуемой";
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
			Сообщить("Строка "+Строка(НС)+". У контрагента "+СтрокаЗапроса.Контрагент.Наименование+" не верно заполнены обязательные данные:"+СтрокаОшибок);
		КонецЕсли;
		АктивнаяСтраница.ДополнительныеДанные.Вставить(ИмяЭлементаСтруктуры+"_"+Формат(НС,"ЧГ=0"), СведенияОбПоставщике);
		АктивнаяСтраница.ДополнительныеДанные.Вставить(СтрЗаменить(ИмяЭлементаСтруктуры,"П0000200001", "П0000200003")+"_"+Формат(НС,"ЧГ=0"), СведенияОбПоставщике);
		
		
		Отбор.Поставщик=СтрокаЗапроса.Контрагент.Ссылка;
		СвОЛиц=РегистрыСведений.ЛицензииПоставщиковАлкогольнойПродукции.СрезПоследних(ЭтотОбъект.мДатаКонцаПериодаОтчета,Отбор);
		Если СвОЛиц.Количество() Тогда
			Лиц=СвОЛиц.Получить(0);
			СерияНомер=ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Лиц.СерияНомер," ");
			СтрокаЗаполнения.П000020000121=СерияНомер[0];
			СтрокаЗаполнения.П000020000122=СерияНомер[1];
			СтрокаЗаполнения.П000020000111=Лиц.Период;
			СтрокаЗаполнения.П000020000112=Лиц.ДатаОкончания;
			СтрокаЗаполнения.П000020000113=Лиц.КемВыдана;
		КонецЕсли;
		НС = НС + 1;
	КонецЦикла;
	
	ВывестиСведенияПодразделения(СведенияОПодразделении(Организация), "Возвраты");
	ВывестиРазделВТабличныйДокумент("П0000200001", ТаблицаЗаполнения1);
	
	ТаблицаЗаполнения13 = ТаблицаЗаполнения1.Скопировать();
	//ТаблицаЗаполнения13.Колонки.Добавить("П000010000312", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4));
	//ТаблицаЗаполнения13.Колонки.Добавить("П000010000316", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 4));
	
	Для Каждого Колонка Из ТаблицаЗаполнения13.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "П0000200001", "П0000200003");
	КонецЦикла;
	
	ВывестиРазделВТабличныйДокумент("П0000200003", ТаблицаЗаполнения13);
КонецПроцедуры

Процедура ВывестиСведенияПодразделения(СведенияОПодразделении, ИмяРаздела)
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ДатаПодписи, Ложь);
	Иначе
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация);
	КонецЕсли;
	ИНН = СведенияОбОрганизации.ИНН;
	
	СтраницыРаздела = мСтруктураМногостраничныхРазделов[ИмяРаздела];
	ПолеТабличногоДокумента = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
	
	Если СтраницыРаздела.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
		СтраницыРаздела.Колонки.Добавить("ДополнительныеДанные");
	КонецЕсли;
	
	АктивнаяСтраница = СтраницыРаздела.Найти(Истина, "АктивнаяСтраница");
	
	Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные) <> Тип("Структура") Тогда
		АктивнаяСтраница.ДополнительныеДанные = Новый Структура;
	КонецЕсли;
	
	СведенияОбОП = Неопределено;
	ИмяЭлементаСтруктуры = "СведенияОбОП";
	
	Если НЕ АктивнаяСтраница.ДополнительныеДанные.Свойство(ИмяЭлементаСтруктуры, СведенияОбОП)
		ИЛИ СведенияОбОП = Неопределено Тогда
		
		СведенияОбОП = Новый Структура;
		
		СведенияОбОП.Вставить("Наименование", "");
		СведенияОбОП.Вставить("ИНН",          "");
		СведенияОбОП.Вставить("КПП",          "");
		
		СведенияОбОП.Вставить("Индекс",          "");
		СведенияОбОП.Вставить("КодРегиона",          "");
		СведенияОбОП.Вставить("Район",           "");
		СведенияОбОП.Вставить("Город",           "");
		СведенияОбОП.Вставить("НаселенныйПункт", "");
		СведенияОбОП.Вставить("Улица",           "");
		СведенияОбОП.Вставить("Дом",             "");
		СведенияОбОП.Вставить("Корпус",          "");
		СведенияОбОП.Вставить("Квартира",        "");
		
		СведенияОбОП.Вставить("ПредставлениеАдреса", "");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СведенияОбОП, СведенияОПодразделении);
	ЗаполнитьЗначенияСвойств(СведенияОбОП, СведенияОПодразделении.ЭлементыАдреса);
	СведенияОбОП.ПредставлениеАдреса = СведенияОПодразделении.Адрес;
	СведенияОбОП.ИНН = ИНН;
	
	АктивнаяСтраница.ДополнительныеДанные.Вставить(ИмяЭлементаСтруктуры, СведенияОбОП);
	
	ВыводитьРеквизиты = (НЕ ПустаяСтрока(СведенияОбОП.Наименование) 
	                ИЛИ НЕ ПустаяСтрока(СведенияОбОП.ИНН) 
	                ИЛИ НЕ ПустаяСтрока(СведенияОбОП.КПП)
	                ИЛИ НЕ ПустаяСтрока(СведенияОбОП.ПредставлениеАдреса));
	
	Если ВыводитьРеквизиты Тогда
		НаименованиеОП = "";
		Если НЕ ПустаяСтрока(СведенияОбОП.Наименование) Тогда
			НаименованиеОП = СведенияОбОП.Наименование;
		КонецЕсли;
		Если НЕ ПустаяСтрока(СведенияОбОП.ИНН) Тогда
			НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", ", ") + "ИНН " + СведенияОбОП.ИНН;
		КонецЕсли;
		Если НЕ ПустаяСтрока(СведенияОбОП.КПП) Тогда
			НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", ", ") + "КПП " + СведенияОбОП.КПП;
		КонецЕсли;
		Если НЕ ПустаяСтрока(СведенияОбОП.ПредставлениеАдреса) Тогда
			НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", Символы.ПС) + СведенияОбОП.ПредставлениеАдреса;
		КонецЕсли;
	Иначе
		НаименованиеОП = "";
	КонецЕсли;
	
	ПолеТабличногоДокумента.Области.ОбособленноеПодразделение.Значение = НаименованиеОП;
	
КонецПроцедуры

Функция СведенияОПодразделении(Подразделение)
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	ЭлементыАдреса = Новый Структура();
	ЭлементыАдреса.Вставить("Индекс",          "");
	ЭлементыАдреса.Вставить("КодРегиона",          "");
	ЭлементыАдреса.Вставить("Район",           "");
	ЭлементыАдреса.Вставить("Город",           "");
	ЭлементыАдреса.Вставить("НаселенныйПункт", "");
	ЭлементыАдреса.Вставить("Улица",           "");
	ЭлементыАдреса.Вставить("Дом",             "");
	ЭлементыАдреса.Вставить("Корпус",          "");
	ЭлементыАдреса.Вставить("Квартира",        "");
	ЭлементыАдреса.Вставить("ТипДома",         "");
	ЭлементыАдреса.Вставить("ТипКорпуса",      "");
	ЭлементыАдреса.Вставить("ТипКвартиры",     "");
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		
		Возврат Новый Структура("Наименование, КПП, Адрес, ЭлементыАдреса", "", "", "", ЭлементыАдреса);
		
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.Организации") Тогда
		
		Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Подразделение, ДатаПодписи, Ложь);
		Иначе
			СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Подразделение);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", Подразделение);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	КонтактнаяИнформация.Представление,
		               |	КонтактнаяИнформация.Поле1,
		               |	КонтактнаяИнформация.Поле2,
		               |	КонтактнаяИнформация.Поле3,
		               |	КонтактнаяИнформация.Поле4,
		               |	КонтактнаяИнформация.Поле5,
		               |	КонтактнаяИнформация.Поле6,
		               |	КонтактнаяИнформация.Поле7,
		               |	КонтактнаяИнформация.Поле8,
		               |	КонтактнаяИнформация.Поле9,
		               |	КонтактнаяИнформация.ТипДома,
		               |	КонтактнаяИнформация.ТипКорпуса,
		               |	КонтактнаяИнформация.ТипКвартиры
		               |ИЗ
		               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	КонтактнаяИнформация.Объект = &Объект
		               |	И КонтактнаяИнформация.Тип = &Тип
		               |	И КонтактнаяИнформация.Вид = &Вид";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			КонтактнаяИнформация = РезультатЗапроса.Выгрузить()[0];
			Адрес = КонтактнаяИнформация.Представление;
			
			ЭлементыАдреса.Индекс          = КонтактнаяИнформация.Поле1;
			ЭлементыАдреса.КодРегиона          = РегламентированнаяОтчетность.КодРегионаПоНазванию(КонтактнаяИнформация.Поле2);
			ЭлементыАдреса.Район           = КонтактнаяИнформация.Поле3;
			ЭлементыАдреса.Город           = КонтактнаяИнформация.Поле4;
			ЭлементыАдреса.НаселенныйПункт = КонтактнаяИнформация.Поле5;
			ЭлементыАдреса.Улица           = КонтактнаяИнформация.Поле6;
			ЭлементыАдреса.Дом             = КонтактнаяИнформация.Поле7;
			ЭлементыАдреса.Корпус          = КонтактнаяИнформация.Поле8;
			ЭлементыАдреса.Квартира        = КонтактнаяИнформация.Поле9;
			ЭлементыАдреса.ТипДома         = КонтактнаяИнформация.ТипДома;
			ЭлементыАдреса.ТипКорпуса      = КонтактнаяИнформация.ТипКорпуса;
			ЭлементыАдреса.ТипКвартиры     = КонтактнаяИнформация.ТипКвартиры;
		Иначе
			Адрес = "";
		КонецЕсли;
		
		Возврат Новый Структура("Наименование, КПП, Адрес, ЭлементыАдреса", СведенияОбОрганизации.ПолноеНаименование, СведенияОбОрганизации.КПП, Адрес, ЭлементыАдреса);
		
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		Наименование = Подразделение.НаименованиеПолное;
		КПП = ?(ЗначениеЗаполнено(Подразделение.РегистрацияВИФНС), Подразделение.РегистрацияВИФНС.КПП, Подразделение.КПП);
		Адрес = "";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", Подразделение);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ФактАдресПодразделенияОрганизации);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	КонтактнаяИнформация.Представление,
		               |	КонтактнаяИнформация.Поле1,
		               |	КонтактнаяИнформация.Поле2,
		               |	КонтактнаяИнформация.Поле3,
		               |	КонтактнаяИнформация.Поле4,
		               |	КонтактнаяИнформация.Поле5,
		               |	КонтактнаяИнформация.Поле6,
		               |	КонтактнаяИнформация.Поле7,
		               |	КонтактнаяИнформация.Поле8,
		               |	КонтактнаяИнформация.Поле9,
		               |	КонтактнаяИнформация.ТипДома,
		               |	КонтактнаяИнформация.ТипКорпуса,
		               |	КонтактнаяИнформация.ТипКвартиры
		               |ИЗ
		               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	КонтактнаяИнформация.Объект = &Объект
		               |	И КонтактнаяИнформация.Тип = &Тип
		               |	И КонтактнаяИнформация.Вид = &Вид";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			КонтактнаяИнформация = РезультатЗапроса.Выгрузить()[0];
			Адрес = КонтактнаяИнформация.Представление;
			
			ЭлементыАдреса.Индекс          = КонтактнаяИнформация.Поле1;
			ЭлементыАдреса.КодРегиона      = РегламентированнаяОтчетность.КодРегионаПоНазванию(КонтактнаяИнформация.Поле2);
			ЭлементыАдреса.Район           = КонтактнаяИнформация.Поле3;
			ЭлементыАдреса.Город           = КонтактнаяИнформация.Поле4;
			ЭлементыАдреса.НаселенныйПункт = КонтактнаяИнформация.Поле5;
			ЭлементыАдреса.Улица           = КонтактнаяИнформация.Поле6;
			ЭлементыАдреса.Дом             = КонтактнаяИнформация.Поле7;
			ЭлементыАдреса.Корпус          = КонтактнаяИнформация.Поле8;
			ЭлементыАдреса.Квартира        = КонтактнаяИнформация.Поле9;
			ЭлементыАдреса.ТипДома         = КонтактнаяИнформация.ТипДома;
			ЭлементыАдреса.ТипКорпуса      = КонтактнаяИнформация.ТипКорпуса;
			ЭлементыАдреса.ТипКвартиры     = КонтактнаяИнформация.ТипКвартиры;
		Иначе
			Адрес = "";
		КонецЕсли;
		
		Возврат Новый Структура("Наименование, КПП, Адрес, ЭлементыАдреса", Наименование, КПП, Адрес, ЭлементыАдреса);
		
	Иначе
		
		Возврат Новый Структура("Наименование, КПП, Адрес, ЭлементыАдреса", "", "", "", ЭлементыАдреса);
		
	КонецЕсли;
	
КонецФункции

Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	ЗаполнитьАвто();
КонецПроцедуры

Процедура ПолучитьСведенияОбАдресе(Объект,ТипАдрес,Адрес,ЭлементыАдреса)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ТипАдрес);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	КонтактнаяИнформация.Поле5,
	               |	КонтактнаяИнформация.Поле6,
	               |	КонтактнаяИнформация.Поле7,
	               |	КонтактнаяИнформация.Поле8,
	               |	КонтактнаяИнформация.Поле9,
	               |	КонтактнаяИнформация.ТипДома,
	               |	КонтактнаяИнформация.ТипКорпуса,
	               |	КонтактнаяИнформация.ТипКвартиры
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		КонтактнаяИнформация = РезультатЗапроса.Выгрузить()[0];
		Адрес = КонтактнаяИнформация.Представление;
		
		ЭлементыАдреса.Индекс          = КонтактнаяИнформация.Поле1;
		ЭлементыАдреса.КодРегиона      = РегламентированнаяОтчетность.КодРегионаПоНазванию(КонтактнаяИнформация.Поле2);
		ЭлементыАдреса.Район           = КонтактнаяИнформация.Поле3;
		ЭлементыАдреса.Город           = КонтактнаяИнформация.Поле4;
		ЭлементыАдреса.НаселенныйПункт = КонтактнаяИнформация.Поле5;
		ЭлементыАдреса.Улица           = КонтактнаяИнформация.Поле6;
		ЭлементыАдреса.Дом             = КонтактнаяИнформация.Поле7;
		ЭлементыАдреса.Корпус          = КонтактнаяИнформация.Поле8;
		ЭлементыАдреса.Квартира        = КонтактнаяИнформация.Поле9;
		ЭлементыАдреса.ТипДома         = КонтактнаяИнформация.ТипДома;
		ЭлементыАдреса.ТипКорпуса      = КонтактнаяИнформация.ТипКорпуса;
		ЭлементыАдреса.ТипКвартиры     = КонтактнаяИнформация.ТипКвартиры;
	Иначе
		Адрес = "";
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьСведенияОбАдресеКонтрагнета(Контрагент,СтруктураАдреса,СтрокаОшибок)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	КонтактнаяИнформация.Поле5,
	               |	КонтактнаяИнформация.Поле6,
	               |	КонтактнаяИнформация.Поле7,
	               |	КонтактнаяИнформация.Поле8,
	               |	КонтактнаяИнформация.Поле9,
	               |	КонтактнаяИнформация.ТипДома,
	               |	КонтактнаяИнформация.ТипКорпуса,
	               |	КонтактнаяИнформация.ТипКвартиры
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		КонтактнаяИнформация = РезультатЗапроса.Выгрузить()[0];
		Адрес = КонтактнаяИнформация.Представление;
		Если ЗначениеЗаполнено(КонтактнаяИнформация.Поле2) ИЛИ 
			ЗначениеЗаполнено(КонтактнаяИнформация.Поле3) ИЛИ 
			ЗначениеЗаполнено(КонтактнаяИнформация.Поле4) ИЛИ 
			ЗначениеЗаполнено(КонтактнаяИнформация.Поле5) ИЛИ 
			ЗначениеЗаполнено(КонтактнаяИнформация.Поле6) ИЛИ 
			ЗначениеЗаполнено(КонтактнаяИнформация.Поле7) ИЛИ 
			ЗначениеЗаполнено(КонтактнаяИнформация.Поле8) ИЛИ 
			ЗначениеЗаполнено(КонтактнаяИнформация.Поле9) Тогда
			Если Не ЗначениеЗаполнено(КонтактнаяИнформация.Поле2) Тогда
				СтрокаОшибок=СтрокаОшибок+Символы.ПС+"-Не заполнено поле Регион";
			КонецЕсли;
			//СтруктураАдреса.Страна			= "643";
			СтруктураАдреса.Индекс          = КонтактнаяИнформация.Поле1;
			СтруктураАдреса.Регион  	    = РегламентированнаяОтчетность.КодРегионаПоНазванию(КонтактнаяИнформация.Поле2);
			СтруктураАдреса.Район           = КонтактнаяИнформация.Поле3;
			СтруктураАдреса.Город           = КонтактнаяИнформация.Поле4;
			СтруктураАдреса.НаселенныйПункт = КонтактнаяИнформация.Поле5;
			СтруктураАдреса.Улица           = КонтактнаяИнформация.Поле6;
			СтруктураАдреса.Дом             = КонтактнаяИнформация.Поле7;
			СтруктураАдреса.Корпус          = КонтактнаяИнформация.Поле8;
			СтруктураАдреса.Квартира        = КонтактнаяИнформация.Поле9;
			СтруктураАдреса.ТипДома         = КонтактнаяИнформация.ТипДома;
			СтруктураАдреса.ТипКорпуса      = КонтактнаяИнформация.ТипКорпуса;
			СтруктураАдреса.ТипКвартиры     = КонтактнаяИнформация.ТипКвартиры;
			СтруктураАдреса.Адрес			= Адрес;
		Иначе //Иностранный Адрес
			//Сообщить("Для контрагента "+Контрагент.НаименованиеПолное+" необходимо заполнить страну",СтатусСообщения.Внимание);
			СтруктураАдреса.Страна			= Справочники.КлассификаторСтранМира.НайтиПоНаименованию(КонтактнаяИнформация.Поле1).Код;
			Если Не ЗначениеЗаполнено(СтруктураАдреса.Страна) Тогда
				СтрокаОшибок=СтрокаОшибок+Символы.ПС+"-Не заполнено поле Страна";
			КонецЕсли;
			СтруктураАдреса.Индекс          = "";
			СтруктураАдреса.Регион  	    = "";
			СтруктураАдреса.Район           = "";
			СтруктураАдреса.Город           = "";
			СтруктураАдреса.НаселенныйПункт = "";
			СтруктураАдреса.Улица           = "";
			СтруктураАдреса.Дом             = "";
			СтруктураАдреса.Корпус          = "";
			СтруктураАдреса.Квартира        = "";
			СтруктураАдреса.ТипДома         = "";
			СтруктураАдреса.ТипКорпуса      = "";
			СтруктураАдреса.ТипКвартиры     = "";
			СтруктураАдреса.Адрес			= Адрес;
		КонецЕсли;
	Иначе
		СтрокаОшибок=СтрокаОшибок+Символы.ПС+"-Не задан ЮРИДИЧЕСКИЙ АДРЕС";
	КонецЕсли;
КонецПроцедуры

Функция ПривестиНомерНаПечать(Номер)
	ТемпНомер=Номер;
	Если ЗначениеЗаполнено(ТемпНомер) Тогда
		Пока НЕ ((Лев(ТемпНомер,1)>="1" И Лев(ТемпНомер,1)<="9")) Цикл
			ТемпНомер=Сред(ТемпНомер,2);
		КонецЦикла;
		Возврат ТемпНомер;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции
//Андрей


мСоставПоказателей = "СоставПоказателей2012Кв3";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВидыДеятельности = Новый ТаблицаЗначений;
мВидыДеятельности.Колонки.Добавить("Код",,, 5);
мВидыДеятельности.Колонки.Добавить("Название",,, 70);

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мКодыВидовПродукции = Новый ТаблицаЗначений;
мКодыВидовПродукции.Колонки.Добавить("Код",,, 5);
мКодыВидовПродукции.Колонки.Добавить("Название",,, 70);

ОписаниеТиповСтрока  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
ОписаниеТиповПоказательВДекалитрах = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 5);
// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп

мИдГруппы11  = "П0000100001";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокГруппы11 = 1;

// Структура строк многострочного раздела на странице
// к листу декларации.
СтруктураГруппы11 = Новый ТаблицаЗначений;
СтруктураГруппы11.Колонки.Добавить("П000010000100", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6));
СтруктураГруппы11.Колонки.Добавить("П000010000101", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000010000102", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000010000103", ОписаниеТиповСтрока);
СтруктураГруппы11.Колонки.Добавить("П000010000104", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000010000105", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000010000106", ОписаниеТиповСтрока);
СтруктураГруппы11.Колонки.Добавить("П000010000107", ОписаниеТиповСтрока);
СтруктураГруппы11.Колонки.Добавить("П000010000108", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000010000109", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000010000121", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000010000122", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000010000111", ОписаниеТиповДата);
СтруктураГруппы11.Колонки.Добавить("П000010000112", ОписаниеТиповДата);
СтруктураГруппы11.Колонки.Добавить("П000010000113", ОписаниеТиповСтрока);
СтруктураГруппы11.Колонки.Добавить("П000010000114", ОписаниеТиповДата);
СтруктураГруппы11.Колонки.Добавить("П000010000115", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000010000116", ОписаниеТиповПоказательВДекалитрах);
СтруктураГруппы11.Колонки.Добавить("П000010000117", ОписаниеТиповДата);
СтруктураГруппы11.Колонки.Добавить("П000010000118", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000010000119", ОписаниеТиповСтрока254);
СтруктураГруппы11.Колонки.Добавить("П000010000120", ОписаниеТиповПоказательВДекалитрах);

// Структура многострочных разделов формы.
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы11, СтруктураГруппы11);

// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы11, КолИсхСтрокГруппы11);

мИдГруппы12  = "П0000100003";

КолИсхСтрокГруппы12 = 1;

СтруктураГруппы12 = Новый ТаблицаЗначений;
СтруктураГруппы12.Колонки.Добавить("П000010000300", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6));
СтруктураГруппы12.Колонки.Добавить("П000010000301", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000010000302", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000010000303", ОписаниеТиповСтрока);
СтруктураГруппы12.Колонки.Добавить("П000010000304", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000010000305", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000010000306", ОписаниеТиповСтрока);
СтруктураГруппы12.Колонки.Добавить("П000010000307", ОписаниеТиповСтрока);
СтруктураГруппы12.Колонки.Добавить("П000010000308", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000010000309", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000010000321", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000010000322", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000010000311", ОписаниеТиповДата);
СтруктураГруппы12.Колонки.Добавить("П000010000312", ОписаниеТиповДата);
СтруктураГруппы12.Колонки.Добавить("П000010000313", ОписаниеТиповСтрока);
СтруктураГруппы12.Колонки.Добавить("П000010000314", ОписаниеТиповДата);
СтруктураГруппы12.Колонки.Добавить("П000010000315", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000010000316", ОписаниеТиповПоказательВДекалитрах);
СтруктураГруппы12.Колонки.Добавить("П000010000317", ОписаниеТиповДата);
СтруктураГруппы12.Колонки.Добавить("П000010000318", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000010000319", ОписаниеТиповСтрока254);
СтруктураГруппы12.Колонки.Добавить("П000010000320", ОписаниеТиповПоказательВДекалитрах);

мСтруктураМногострочныхРазделов.Вставить(мИдГруппы12, СтруктураГруппы12);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы12, КолИсхСтрокГруппы12);

мИдГруппы21  = "П0000200001";

КолИсхСтрокИдГруппы21 = 1;

СтруктураГруппы21 = Новый ТаблицаЗначений;
СтруктураГруппы21.Колонки.Добавить("П000020000100", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6));
СтруктураГруппы21.Колонки.Добавить("П000020000101", ОписаниеТиповСтрока254);
СтруктураГруппы21.Колонки.Добавить("П000020000102", ОписаниеТиповСтрока254);
СтруктураГруппы21.Колонки.Добавить("П000020000103", ОписаниеТиповСтрока);
СтруктураГруппы21.Колонки.Добавить("П000020000104", ОписаниеТиповСтрока254);
СтруктураГруппы21.Колонки.Добавить("П000020000105", ОписаниеТиповСтрока254);
СтруктураГруппы21.Колонки.Добавить("П000020000106", ОписаниеТиповСтрока);
СтруктураГруппы21.Колонки.Добавить("П000020000107", ОписаниеТиповСтрока);
СтруктураГруппы21.Колонки.Добавить("П000020000108", ОписаниеТиповСтрока254);
СтруктураГруппы21.Колонки.Добавить("П000020000109", ОписаниеТиповСтрока254);
СтруктураГруппы21.Колонки.Добавить("П000020000121", ОписаниеТиповСтрока254);
СтруктураГруппы21.Колонки.Добавить("П000020000122", ОписаниеТиповСтрока254);
СтруктураГруппы21.Колонки.Добавить("П000020000111", ОписаниеТиповДата);
СтруктураГруппы21.Колонки.Добавить("П000020000112", ОписаниеТиповДата);
СтруктураГруппы21.Колонки.Добавить("П000020000113", ОписаниеТиповСтрока);
СтруктураГруппы21.Колонки.Добавить("П000020000114", ОписаниеТиповДата);
СтруктураГруппы21.Колонки.Добавить("П000020000115", ОписаниеТиповСтрока254);
СтруктураГруппы21.Колонки.Добавить("П000020000116", ОписаниеТиповПоказательВДекалитрах);
СтруктураГруппы21.Колонки.Добавить("П000020000117", ОписаниеТиповДата);
СтруктураГруппы21.Колонки.Добавить("П000020000118", ОписаниеТиповСтрока254);
СтруктураГруппы21.Колонки.Добавить("П000020000119", ОписаниеТиповСтрока254);
СтруктураГруппы21.Колонки.Добавить("П000020000120", ОписаниеТиповПоказательВДекалитрах);

мСтруктураМногострочныхРазделов.Вставить(мИдГруппы21, СтруктураГруппы21);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы21, КолИсхСтрокИдГруппы21);

мИдГруппы22  = "П0000200003";

КолИсхСтрокГруппы22 = 1;

СтруктураГруппы22 = Новый ТаблицаЗначений;
СтруктураГруппы22.Колонки.Добавить("П000020000300", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6));
СтруктураГруппы22.Колонки.Добавить("П000020000301", ОписаниеТиповСтрока254);
СтруктураГруппы22.Колонки.Добавить("П000020000302", ОписаниеТиповСтрока254);
СтруктураГруппы22.Колонки.Добавить("П000020000303", ОписаниеТиповСтрока);
СтруктураГруппы22.Колонки.Добавить("П000020000304", ОписаниеТиповСтрока254);
СтруктураГруппы22.Колонки.Добавить("П000020000305", ОписаниеТиповСтрока254);
СтруктураГруппы22.Колонки.Добавить("П000020000306", ОписаниеТиповСтрока);
СтруктураГруппы22.Колонки.Добавить("П000020000307", ОписаниеТиповСтрока);
СтруктураГруппы22.Колонки.Добавить("П000020000308", ОписаниеТиповСтрока254);
СтруктураГруппы22.Колонки.Добавить("П000020000309", ОписаниеТиповСтрока254);
СтруктураГруппы22.Колонки.Добавить("П000020000321", ОписаниеТиповСтрока254);
СтруктураГруппы22.Колонки.Добавить("П000020000322", ОписаниеТиповСтрока254);
СтруктураГруппы22.Колонки.Добавить("П000020000311", ОписаниеТиповДата);
СтруктураГруппы22.Колонки.Добавить("П000020000312", ОписаниеТиповДата);
СтруктураГруппы22.Колонки.Добавить("П000020000313", ОписаниеТиповСтрока);
СтруктураГруппы22.Колонки.Добавить("П000020000314", ОписаниеТиповДата);
СтруктураГруппы22.Колонки.Добавить("П000020000315", ОписаниеТиповСтрока254);
СтруктураГруппы22.Колонки.Добавить("П000020000316", ОписаниеТиповПоказательВДекалитрах);
СтруктураГруппы22.Колонки.Добавить("П000020000317", ОписаниеТиповДата);
СтруктураГруппы22.Колонки.Добавить("П000020000318", ОписаниеТиповСтрока254);
СтруктураГруппы22.Колонки.Добавить("П000020000319", ОписаниеТиповСтрока254);
СтруктураГруппы22.Колонки.Добавить("П000020000320", ОписаниеТиповПоказательВДекалитрах);

мСтруктураМногострочныхРазделов.Вставить(мИдГруппы22, СтруктураГруппы22);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы22, КолИсхСтрокГруппы22);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // Зеленый
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // Желтый
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//    - структура, элементы которой содержат данные дополнительных строк страницы, где
//      в качестве ключа используется имя многострочного блока, а в качестве значения-
//      таблица значений показателей многострочного блока.
//

ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление", ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("ДополнительныеДанные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

ТаблицаСтраницыРазделаДляМногострочныхРазделов = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

ТаблицаСтраницыЛицензии = ТаблицаСтраницыРаздела.Скопировать();

ТаблицаСтраницыДекларация = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыДекларация.Добавить();
СтрПерваяСтраница.Представление = "Новая страница";
СтрПерваяСтраница.ДанныеДопСтрок = Неопределено; // В разделе есть многострочность
СтрПерваяСтраница.АктивнаяСтраница = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

ТаблицаСтраницыВозвраты = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыВозвраты.Добавить();
СтрПерваяСтраница.Представление = "Новая страница";
СтрПерваяСтраница.ДанныеДопСтрок = Неопределено; // В разделе есть многострочность
СтрПерваяСтраница.АктивнаяСтраница = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

мСтруктураМногостраничныхРазделов = Новый Структура;
мСтруктураМногостраничныхРазделов.Вставить("Лицензии", ТаблицаСтраницыЛицензии);
мСтруктураМногостраничныхРазделов.Вставить("Декларация", ТаблицаСтраницыДекларация);
мСтруктураМногостраничныхРазделов.Вставить("Возвраты", ТаблицаСтраницыВозвраты);

мВерсияФормы = "13/09/2012";

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

НаименованиеОтчетаДляВыгрузки = "";

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
