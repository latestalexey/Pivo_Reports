Перем СертификатАбонентаОтпечаток;
Перем СертификатСубъектаРФОтпечаток;
Перем СертификатФСРАРОтпечаток;
Перем СертификатАбонента;
Перем СертификатСубъектаРФ;
Перем СертификатФСРАР;
Перем СертификатыАбонента;
Перем СертификатыСубъектовРФ;
Перем СертификатыФСРАР;
Перем СертификатыЛичные;
Перем СертификатыДругиеПользователи;
Перем Крипт;
Перем ДвДанные;

Функция ПроверитьЗаполнениеПараметров()
	
	ОписаниеОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		Предупреждение("Не указан каталог выгрузки!");
		ТекущийЭлемент = ЭлементыФормы.КаталогВыгрузки;
		Возврат Ложь;
	КонецЕсли;
	
	Если (СертификатАбонента = Неопределено И ЗначениеЗаполнено(СертификатАбонентаОтпечаток))
		ИЛИ (СертификатСубъектаРФ = Неопределено И ЗначениеЗаполнено(СертификатСубъектаРФОтпечаток))
		ИЛИ (СертификатФСРАР = Неопределено И ЗначениеЗаполнено(СертификатФСРАРОтпечаток)) Тогда
		
		СертификатыОбщие = ПолучитьСертификатыОбщие();
		Если СертификатАбонента = Неопределено И ЗначениеЗаполнено(СертификатАбонентаОтпечаток) Тогда
			СертификатАбонента = СертификатыОбщие.Найти(СертификатАбонентаОтпечаток, "Отпечаток");
		КонецЕсли;
		Если СертификатСубъектаРФ = Неопределено И ЗначениеЗаполнено(СертификатСубъектаРФОтпечаток) Тогда
			СертификатСубъектаРФ = СертификатыОбщие.Найти(СертификатСубъектаРФОтпечаток, "Отпечаток");
		КонецЕсли;
		Если СертификатФСРАР = Неопределено И ЗначениеЗаполнено(СертификатФСРАРОтпечаток) Тогда
			СертификатФСРАР = СертификатыОбщие.Найти(СертификатФСРАРОтпечаток, "Отпечаток");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СертификатАбонента = Неопределено Тогда
		Если ЗначениеЗаполнено(СертификатАбонентаОтпечаток) Тогда
			Предупреждение("Сертификат абонента не зарегистрирован в системном хранилище сертификатов!");
		Иначе
			Предупреждение("Не выбран сертификат абонента!");
		КонецЕсли;
		ТекущийЭлемент = ЭлементыФормы.СертификатАбонентаПредставление;
		Возврат Ложь;
	КонецЕсли;
	
	Если СертификатСубъектаРФ = Неопределено Тогда
		Если ЗначениеЗаполнено(СертификатСубъектаРФОтпечаток) Тогда
			Предупреждение("Сертификат субъекта РФ не зарегистрирован в системном хранилище сертификатов!");
		Иначе
			Предупреждение("Не выбран сертификат субъекта РФ!");
		КонецЕсли;
		ТекущийЭлемент = ЭлементыФормы.СертификатСубъектаРФПредставление;
		Возврат Ложь;
	КонецЕсли;
	
	Если СертификатФСРАР = Неопределено Тогда
		Если ЗначениеЗаполнено(СертификатФСРАРОтпечаток) Тогда
			Предупреждение("Сертификат ФСРАР не зарегистрирован в системном хранилище сертификатов!");
		Иначе
			Предупреждение("Не выбран сертификат ФСРАР!");
		КонецЕсли;
		ТекущийЭлемент = ЭлементыФормы.СертификатФСРАРПредставление;
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СертификатСубъектаРФ.Отпечаток) И ЗначениеЗаполнено(СертификатФСРАР.Отпечаток)
		И (СертификатСубъектаРФ.Отпечаток = СертификатФСРАР.Отпечаток) Тогда
		Предупреждение("Сертификат Субъекта РФ и сертификат ФСРАР не должны совпадать!");
		Возврат Ложь;
	КонецЕсли;
	
	Состояние("Проверка сертификата абонента ...");
	РезультатПроверки = ПроверитьСертификат(СертификатАбонента, ОписаниеОшибки);
	Если РезультатПроверки = Неопределено Тогда
		Сообщить("Не удалось проверить сертификат абонента.", СтатусСообщения.Важное);
		Возврат Ложь;
	ИначеЕсли НЕ РезультатПроверки Тогда
		Сообщить("Ошибка проверки сертификата абонента!
				|Вероятно, не установлен сертификат головного удостоверяющего центра или вышестоящие сертификаты.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Состояние("Проверка сертификата субъекта РФ ...");
	РезультатПроверки = ПроверитьСертификат(СертификатСубъектаРФ, ОписаниеОшибки);
	Если РезультатПроверки = Неопределено Тогда
		Сообщить("Не удалось проверить сертификат субъекта РФ.", СтатусСообщения.Важное);
		Возврат Ложь;
	ИначеЕсли НЕ РезультатПроверки Тогда
		Сообщить("Ошибка проверки сертификата субъекта РФ!
				|Вероятно, не установлен сертификат головного удостоверяющего центра.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Состояние("Проверка сертификата ФСРАР ...");
	РезультатПроверки = ПроверитьСертификат(СертификатФСРАР, ОписаниеОшибки);
	Если РезультатПроверки = Неопределено Тогда
		Сообщить("Не удалось проверить сертификат ФСРАР.", СтатусСообщения.Важное);
		Возврат Ложь;
	ИначеЕсли НЕ РезультатПроверки Тогда
		Сообщить("Ошибка проверки сертификата ФСРАР!
				|Вероятно, не установлен сертификат головного удостоверяющего центра.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектКаталогВыгрузки = Новый Файл(КаталогВыгрузки);
	Если НЕ ОбъектКаталогВыгрузки.Существует() Тогда
		Предупреждение("Выбранный каталог выгрузки не существует!");
		ТекущийЭлемент = ЭлементыФормы.КаталогВыгрузки;
		Возврат Ложь;
	ИначеЕсли НЕ ОбъектКаталогВыгрузки.ЭтоКаталог() Тогда
		Предупреждение("В поле ""Каталог выгрузки"" необходимо указать именно каталог, а не файл!");
		ТекущийЭлемент = ЭлементыФормы.КаталогВыгрузки;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если НЕ ПроверитьЗаполнениеПараметров() Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьЗначение("ФормированиеПакетаФСРАР_КаталогВыгрузки", КаталогВыгрузки);
	
	Если Прав(КаталогВыгрузки, 1) <> "\" Тогда
		КаталогВыгрузки = КаталогВыгрузки + "\";
	КонецЕсли;
	
	Закрыть(Новый Структура("СертификатАбонента, СертификатСубъектаРФ, СертификатФСРАР, КаталогВыгрузки", СертификатАбонента, СертификатСубъектаРФ, СертификатФСРАР, КаталогВыгрузки));
	
КонецПроцедуры

Процедура КаталогВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Укажите каталог выгрузки";
	Диалог.Каталог = КаталогВыгрузки;
	Если Диалог.Выбрать() Тогда
		КаталогВыгрузки = Диалог.Каталог;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСертификатВСистемномОкне(Сертификат)
	
	Крипт = РегламентированнаяОтчетность.СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт <> Неопределено Тогда
		СерийныйНомер = Сертификат.СерийныйНомер;
		Поставщик = Сертификат.Поставщик;
		Крипт.ПоказатьСертификат(СерийныйНомер, Поставщик);
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатАбонентаПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СертификатАбонента) Тогда
		ПоказатьСертификатВСистемномОкне(СертификатАбонента);
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатСубъектаРФПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СертификатСубъектаРФ) Тогда
		ПоказатьСертификатВСистемномОкне(СертификатСубъектаРФ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатФСРАРПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СертификатФСРАР) Тогда
		ПоказатьСертификатВСистемномОкне(СертификатФСРАР);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтмена(Кнопка)
	
	Закрыть();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИнициализацияФормы(Отказ);
	
КонецПроцедуры

Процедура ИнициализацияФормы(Отказ)
	
	СертификатАбонентаОтпечаток = "";
	СертификатСубъектаРФОтпечаток = "";
	СертификатФСРАРОтпечаток = "";
	СертификатАбонента = Неопределено;
	СертификатСубъектаРФ = Неопределено;
	СертификатФСРАР = Неопределено;
	
	// создаем объект для работы с криптографией
	Крипт = РегламентированнаяОтчетность.СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// создаем объект для работы с двоичными данными
	ДвДанные = РегламентированнаяОтчетность.СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗапросНастроекОбмена = Новый Запрос;
	ЗапросНастроекОбмена.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
								 |	НастройкиОбменаФСРАР.ИспользоватьОбмен,
								 |	НастройкиОбменаФСРАР.СертификатАбонентаОтпечаток,
								 |	НастройкиОбменаФСРАР.СертификатСубъектаРФОтпечаток,
								 |	НастройкиОбменаФСРАР.СертификатФСРАРОтпечаток
								 |ИЗ
								 |	РегистрСведений.НастройкиОбменаФСРАР КАК НастройкиОбменаФСРАР
								 |ГДЕ
								 |	НастройкиОбменаФСРАР.Организация = &Организация";
	ЗапросНастроекОбмена.УстановитьПараметр("Организация", Организация);
	РезультатЗапросаНастроекОбмена = ЗапросНастроекОбмена.Выполнить();
	Если НЕ РезультатЗапросаНастроекОбмена.Пустой() Тогда
		
		НастройкиОбмена = РезультатЗапросаНастроекОбмена.Выгрузить()[0];
		Если НастройкиОбмена.ИспользоватьОбмен Тогда
			СертификатАбонентаОтпечаток = НастройкиОбмена.СертификатАбонентаОтпечаток;
			СертификатСубъектаРФОтпечаток = НастройкиОбмена.СертификатСубъектаРФОтпечаток;
			СертификатФСРАРОтпечаток = НастройкиОбмена.СертификатФСРАРОтпечаток;
		КонецЕсли;
		
	КонецЕсли;
	
	СертификатыОбщие = ПолучитьСертификатыОбщие();
	
	// подбираем сертификат абонента
	Состояние("Поиск сертификата абонента ...");
	СертификатыАбонента = ПолучитьСертификатыАбонента();
	Если ЗначениеЗаполнено(СертификатАбонентаОтпечаток) Тогда
		СертификатАбонента = СертификатыОбщие.Найти(СертификатАбонентаОтпечаток, "Отпечаток");
	Иначе
		
		Если СертификатыАбонента.Количество() = 1 Тогда
			СертификатАбонентаОтпечаток = СертификатыАбонента[0].Отпечаток;
			СертификатАбонента = СертификатыАбонента[0];
		КонецЕсли;
		
	КонецЕсли;
	ЭлементыФормы.СертификатАбонентаПредставление.ТолькоПросмотр = (СертификатыАбонента.Количество() = 1
		И СертификатыАбонента[0].Отпечаток = СертификатАбонентаОтпечаток);
	ОтобразитьСертификатВПолеВвода(ЭлементыФормы.СертификатАбонентаПредставление, СертификатАбонентаОтпечаток, СертификатАбонента);
	
	// подбираем сертификат субъекта РФ
	Состояние("Поиск сертификата субъекта РФ ...");
	СертификатыСубъектовРФ = ПолучитьСертификатыСубъектовРФ();
	Если ЗначениеЗаполнено(СертификатСубъектаРФОтпечаток) Тогда
		СертификатСубъектаРФ = СертификатыОбщие.Найти(СертификатСубъектаРФОтпечаток, "Отпечаток");
	Иначе
		
		Если СертификатыСубъектовРФ.Количество() = 1 Тогда
			СертификатСубъектаРФОтпечаток = СертификатыСубъектовРФ[0].Отпечаток;
			СертификатСубъектаРФ = СертификатыСубъектовРФ[0];
		КонецЕсли;
		
	КонецЕсли;
	ЭлементыФормы.СертификатСубъектаРФПредставление.ТолькоПросмотр = (СертификатыСубъектовРФ.Количество() = 1
		И СертификатыСубъектовРФ[0].Отпечаток = СертификатСубъектаРФОтпечаток);
	ОтобразитьСертификатВПолеВвода(ЭлементыФормы.СертификатСубъектаРФПредставление, СертификатСубъектаРФОтпечаток, СертификатСубъектаРФ);
	
	// подбираем сертификат ФСРАР
	Состояние("Поиск сертификата ФСРАР ...");
	СертификатыФСРАР = ПолучитьСертификатыФСРАР();
	Если ЗначениеЗаполнено(СертификатФСРАРОтпечаток) Тогда
		СертификатФСРАР = СертификатыОбщие.Найти(СертификатФСРАРОтпечаток, "Отпечаток");
	Иначе
	
		Если СертификатыФСРАР.Количество() = 1 Тогда
			СертификатФСРАРОтпечаток = СертификатыФСРАР[0].Отпечаток;
			СертификатФСРАР = СертификатыФСРАР[0];
		КонецЕсли;
	
	КонецЕсли;
	ЭлементыФормы.СертификатФСРАРПредставление.ТолькоПросмотр = (СертификатыФСРАР.Количество() = 1
		И СертификатыФСРАР[0].Отпечаток = СертификатФСРАРОтпечаток);
	ОтобразитьСертификатВПолеВвода(ЭлементыФормы.СертификатФСРАРПредставление, СертификатФСРАРОтпечаток, СертификатФСРАР);
	
	// восстанавливаем каталог выгрузки
	сохрКаталогФормированияПакетаФСРАР = ВосстановитьЗначение("ФормированиеПакетаФСРАР_КаталогВыгрузки");
	Если ЗначениеЗаполнено(сохрКаталогФормированияПакетаФСРАР) Тогда
		КаталогВыгрузки = сохрКаталогФормированияПакетаФСРАР;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьСертификатВПолеВвода(ПолеВвода, СертификатОтпечаток, Знач Сертификат)
	
	Если НЕ ЗначениеЗаполнено(СертификатОтпечаток) Тогда
		ПолеВвода.ЦветТекстаПоля = Новый Цвет;
		ПолеВвода.Значение = "";
		ПолеВвода.Подсказка = "Сертификат не выбран";
		Возврат;
	КонецЕсли;
	
	Если Сертификат = Неопределено Тогда
		ПолеВвода.ЦветТекстаПоля = Новый Цвет(255, 0, 0);
		ПолеВвода.Значение = СертификатОтпечаток;
		ПолеВвода.Подсказка = "Сертификат не зарегистрирован в системном хранилище сертификатов!";
		Возврат;
	КонецЕсли;
	
	ПредставлениеСертификата = ПолноеПредставлениеСертификата(Сертификат);
	ТекДата = ТекущаяДата();
	Если ТекДата > Сертификат.ДействителенПо Тогда
		ПолеВвода.ЦветТекстаПоля = Новый Цвет(255, 0, 0);
		ПолеВвода.Значение = ПредставлениеСертификата;
		ПолеВвода.Подсказка = "Отпечаток: " + Сертификат.Отпечаток + "
							  |ПЕРИОД ДЕЙСТВИЯ СЕРТИФИКАТА ИСТЕК!";
	ИначеЕсли ТекДата < Сертификат.ДействителенС Тогда
		ПолеВвода.ЦветТекстаПоля = Новый Цвет(255, 0, 0);
		ПолеВвода.Значение = ПредставлениеСертификата;
		ПолеВвода.Подсказка = "Отпечаток: " + Сертификат.Отпечаток + "
							  |ПЕРИОД ДЕЙСТВИЯ СЕРТИФИКАТА ЕЩЕ НЕ НАСТУПИЛ!";
	Иначе
		ПолеВвода.ЦветТекстаПоля = Новый Цвет;
		ПолеВвода.Значение = ПредставлениеСертификата;
		ПолеВвода.Подсказка = "Отпечаток: " + Сертификат.Отпечаток;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолноеПредставлениеСертификата(Сертификат)
	
	Возврат СокрЛП(Сертификат.Наименование) + " (" + Сертификат.ДействителенС + " - " + Сертификат.ДействителенПо + ")";
	
КонецФункции

Функция ПолучитьСертификатыОбщие()
	
	ТаблицаСертификатовАбонента = Новый ТаблицаЗначений;
	ТаблицаСертификатовАбонента.Колонки.Добавить("Отпечаток");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Субъект");
	ТаблицаСертификатовАбонента.Колонки.Добавить("СерийныйНомер");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Поставщик");
	ТаблицаСертификатовАбонента.Колонки.Добавить("ДействителенС");
	ТаблицаСертификатовАбонента.Колонки.Добавить("ДействителенПо");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Наименование");
	
	// перебираем сертификаты хранилища
	Пока Крипт.ПолучитьСледующийСертификат("MY") Цикл
		
		ОтпечатокСертификата = Крипт.Отпечаток;
		
		НовСтрХранилище = ТаблицаСертификатовАбонента.Добавить();
		НовСтрХранилище.Отпечаток = Отпечаток16ИзBase64(ОтпечатокСертификата, ДвДанные);
		НовСтрХранилище.Субъект = РазобратьСтрокуСубъекта(Крипт.Субъект);
		НовСтрХранилище.СерийныйНомер = Крипт.СерийныйНомер;
		НовСтрХранилище.Поставщик = Крипт.Поставщик;
		НовСтрХранилище.ДействителенС = Крипт.ДействителенС;
		НовСтрХранилище.ДействителенПо = Крипт.ДействителенДо;
		НовСтрХранилище.Наименование = Крипт.ИмяСертификата;
		
	КонецЦикла;
	
	Пока Крипт.ПолучитьСледующийСертификат("AddressBook") Цикл
		
		ОтпечатокСертификата = Крипт.Отпечаток;
		
		НовСтрХранилище = ТаблицаСертификатовАбонента.Добавить();
		НовСтрХранилище.Отпечаток = Отпечаток16ИзBase64(ОтпечатокСертификата, ДвДанные);
		НовСтрХранилище.Субъект = РазобратьСтрокуСубъекта(Крипт.Субъект);
		НовСтрХранилище.СерийныйНомер = Крипт.СерийныйНомер;
		НовСтрХранилище.Поставщик = Крипт.Поставщик;
		НовСтрХранилище.ДействителенС = Крипт.ДействителенС;
		НовСтрХранилище.ДействителенПо = Крипт.ДействителенДо;
		НовСтрХранилище.Наименование = Крипт.ИмяСертификата;
		
	КонецЦикла;
	
	
	Возврат ТаблицаСертификатовАбонента;
	
КонецФункции

Функция ПолучитьСертификатыСубъектовРФ()
	
	//КлючИздателя = "CenterInform";
	//КлючИздателя2 = "Удостоверяющий центр ФСРАР";
	
	ТаблицаСертификатовАбонента = Новый ТаблицаЗначений;
	ТаблицаСертификатовАбонента.Колонки.Добавить("Отпечаток");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Субъект");
	ТаблицаСертификатовАбонента.Колонки.Добавить("СерийныйНомер");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Поставщик");
	ТаблицаСертификатовАбонента.Колонки.Добавить("ДействителенС");
	ТаблицаСертификатовАбонента.Колонки.Добавить("ДействителенПо");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Наименование");
	
	СертификатыДругиеПользователи = ТаблицаСертификатовАбонента.Скопировать();
	
	ТекДата = ТекущаяДата();
	
	// перебираем сертификаты хранилища
	Пока Крипт.ПолучитьСледующийСертификат("AddressBook") Цикл
		
		Издатель = Крипт.Поставщик;
		ОтпечатокСертификата = Крипт.Отпечаток;
		ДействителенС = Крипт.ДействителенС;
		ДействителенПо = Крипт.ДействителенДо;
		Субъект = Крипт.Субъект;
		ИмяСертификата = Крипт.ИмяСертификата;
		
		Если ДействителенС > ТекДата ИЛИ ДействителенПо < ТекДата Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрХранилище = СертификатыДругиеПользователи.Добавить();
		НовСтрХранилище.Отпечаток = Отпечаток16ИзBase64(ОтпечатокСертификата, ДвДанные);
		НовСтрХранилище.Субъект = РазобратьСтрокуСубъекта(Субъект);
		НовСтрХранилище.СерийныйНомер = Крипт.СерийныйНомер;
		НовСтрХранилище.Поставщик = Крипт.Поставщик;
		НовСтрХранилище.ДействителенС = ДействителенС;
		НовСтрХранилище.ДействителенПо = ДействителенПо;
		НовСтрХранилище.Наименование = ИмяСертификата;
		
		//Если Найти(Издатель, КлючИздателя) = 0 И Найти(Издатель, КлючИздателя2) = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		
		НовСтр = ТаблицаСертификатовАбонента.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, НовСтрХранилище);
		
	КонецЦикла;
	
	ТаблицаСертификатовАбонента.Сортировать("ДействителенС УБЫВ");
	СертификатыДругиеПользователи.Сортировать("Наименование");
	
	Возврат ТаблицаСертификатовАбонента;
	
КонецФункции

Функция ПолучитьСертификатыФСРАР()
	
	//КлючИздателя = "Удостоверяющий центр ФСРАР";
	
	ТаблицаСертификатовАбонента = Новый ТаблицаЗначений;
	ТаблицаСертификатовАбонента.Колонки.Добавить("Отпечаток");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Субъект");
	ТаблицаСертификатовАбонента.Колонки.Добавить("СерийныйНомер");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Поставщик");
	ТаблицаСертификатовАбонента.Колонки.Добавить("ДействителенС");
	ТаблицаСертификатовАбонента.Колонки.Добавить("ДействителенПо");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Наименование");
	
	СертификатыДругиеПользователи = ТаблицаСертификатовАбонента.Скопировать();
	
	ТекДата = ТекущаяДата();
	
	// перебираем сертификаты хранилища
	Пока Крипт.ПолучитьСледующийСертификат("AddressBook") Цикл
		
		Издатель = Крипт.Поставщик;
		ОтпечатокСертификата = Крипт.Отпечаток;
		ДействителенС = Крипт.ДействителенС;
		ДействителенПо = Крипт.ДействителенДо;
		Субъект = Крипт.Субъект;
		ИмяСертификата = Крипт.ИмяСертификата;
		
		Если ДействителенС > ТекДата ИЛИ ДействителенПо < ТекДата Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрХранилище = СертификатыДругиеПользователи.Добавить();
		НовСтрХранилище.Отпечаток = Отпечаток16ИзBase64(ОтпечатокСертификата, ДвДанные);
		НовСтрХранилище.Субъект = РазобратьСтрокуСубъекта(Субъект);
		НовСтрХранилище.СерийныйНомер = Крипт.СерийныйНомер;
		НовСтрХранилище.Поставщик = Крипт.Поставщик;
		НовСтрХранилище.ДействителенС = ДействителенС;
		НовСтрХранилище.ДействителенПо = ДействителенПо;
		НовСтрХранилище.Наименование = ИмяСертификата;
		
		//Если Найти(Издатель, КлючИздателя) = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		
		НовСтр = ТаблицаСертификатовАбонента.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, НовСтрХранилище);
		
	КонецЦикла;
	
	ТаблицаСертификатовАбонента.Сортировать("ДействителенС УБЫВ");
	СертификатыДругиеПользователи.Сортировать("Наименование");
	
	Возврат ТаблицаСертификатовАбонента;
	
КонецФункции

Функция ПолучитьСертификатыАбонента()
	
	ТаблицаСертификатовАбонента = Новый ТаблицаЗначений;
	ТаблицаСертификатовАбонента.Колонки.Добавить("Отпечаток");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Субъект");
	ТаблицаСертификатовАбонента.Колонки.Добавить("СерийныйНомер");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Поставщик");
	ТаблицаСертификатовАбонента.Колонки.Добавить("ДействителенС");
	ТаблицаСертификатовАбонента.Колонки.Добавить("ДействителенПо");
	ТаблицаСертификатовАбонента.Колонки.Добавить("Наименование");
	
	СертификатыЛичные = ТаблицаСертификатовАбонента.Скопировать();
	
	ТекДата = ТекущаяДата();
	
	// перебираем сертификаты хранилища
	Пока Крипт.ПолучитьСледующийСертификат("MY") Цикл
		
		ОтпечатокСертификата = Крипт.Отпечаток;
		ДействителенС = Крипт.ДействителенС;
		ДействителенПо = Крипт.ДействителенДо;
		ИмяСертификата = Крипт.ИмяСертификата;
		Субъект = Крипт.Субъект;
		
		Если ДействителенС > ТекДата ИЛИ ДействителенПо < ТекДата Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрХранилище = СертификатыЛичные.Добавить();
		НовСтрХранилище.Отпечаток = Отпечаток16ИзBase64(ОтпечатокСертификата, ДвДанные);
		НовСтрХранилище.Субъект = РазобратьСтрокуСубъекта(Субъект);
		НовСтрХранилище.СерийныйНомер = Крипт.СерийныйНомер;
		НовСтрХранилище.Поставщик = Крипт.Поставщик;
		НовСтрХранилище.ДействителенС = ДействителенС;
		НовСтрХранилище.ДействителенПо = ДействителенПо;
		НовСтрХранилище.Наименование = ИмяСертификата;
		
		НовСтр = ТаблицаСертификатовАбонента.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, НовСтрХранилище);
		
	КонецЦикла;
	
	ТаблицаСертификатовАбонента.Сортировать("ДействителенС УБЫВ");
	СертификатыЛичные.Сортировать("Наименование");
	
	Возврат ТаблицаСертификатовАбонента;
	
КонецФункции

Процедура РазобратьСоставляющую(СтрСоставляющая, Результат)
	
	// расщепляем текущую составляющую и добавляем в структуру Результат
	Для ВнутрИнд = 1 По СтрДлина(СтрСоставляющая) Цикл
		Если Сред(СтрСоставляющая, ВнутрИнд, 1) = "=" Тогда
			ДоРазделителя = СокрЛП(Лев(СтрСоставляющая, ВнутрИнд - 1));
			ПослеРазделителя = СокрЛП(Сред(СтрСоставляющая, ВнутрИнд + 1));
			Если НЕ ПустаяСтрока(ДоРазделителя) И НЕ ПустаяСтрока(ПослеРазделителя) Тогда
				Результат.Вставить(ДоРазделителя, ПослеРазделителя);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьСтрокуСубъекта(СтрокаСубъект)
	
	Результат = Новый Соответствие;
	ПоследнийРазделитель = 0;
	
	ДлинаСтрокиСубъект = СтрДлина(СтрокаСубъект);
	Для Инд = 1 По ДлинаСтрокиСубъект Цикл
		ТекСимвол = Сред(СтрокаСубъект, Инд, 1);
		Если ТекСимвол = "," Тогда
			ТекСоставляющая = Сред(СтрокаСубъект, ПоследнийРазделитель + 1, Инд - (ПоследнийРазделитель + 1));
			ПоследнийРазделитель = Инд;
			РазобратьСоставляющую(ТекСоставляющая, Результат);
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследнийРазделитель <> ДлинаСтрокиСубъект Тогда
		РазобратьСоставляющую(СокрЛП(Сред(СтрокаСубъект, ПоследнийРазделитель + 1)), Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Отпечаток16ИзBase64(ОтпечатокBase64, ДвДанные= Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ОтпечатокBase64) Тогда
		Возврат ОтпечатокBase64;
	КонецЕсли;
	
	ДвДанные.Очистить();
	ДвДанные.ДобавитьИзСтрокиBase64(ОтпечатокBase64, Истина);
	ДвДанные.ТекущаяПозиция = 0;
	
	Возврат нрег(ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные));
	
КонецФункции

Функция ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные)
	
	Соответствие16 = Новый Соответствие;
	Соответствие16.Вставить(0, "0");
	Соответствие16.Вставить(1, "1");
	Соответствие16.Вставить(2, "2");
	Соответствие16.Вставить(3, "3");
	Соответствие16.Вставить(4, "4");
	Соответствие16.Вставить(5, "5");
	Соответствие16.Вставить(6, "6");
	Соответствие16.Вставить(7, "7");
	Соответствие16.Вставить(8, "8");
	Соответствие16.Вставить(9, "9");
	Соответствие16.Вставить(10, "a");
	Соответствие16.Вставить(11, "b");
	Соответствие16.Вставить(12, "c");
	Соответствие16.Вставить(13, "d");
	Соответствие16.Вставить(14, "e");
	Соответствие16.Вставить(15, "f");
	
	Отпечаток = "";
	Для Инд = 1 По 20 Цикл
		Байт = ДвДанные.ПолучитьЧисло(1);
		Представление16_1 = Соответствие16[Цел(Байт / 16)];
		Представление16_2 = Соответствие16[Байт % 16];
		Отпечаток =  Отпечаток + Представление16_1 + Представление16_2;
	КонецЦикла;
	
	Возврат Отпечаток;
	
КонецФункции

Процедура СертификатАбонентаПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = ВыбратьСертификат(?(СертификатыАбонента.Количество() = 0, СертификатыЛичные, СертификатыАбонента), СертификатАбонента);
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		СертификатАбонентаОтпечаток = РезультатВыбора.Отпечаток;
		СертификатАбонента = РезультатВыбора;
		ОтобразитьСертификатВПолеВвода(Элемент, СертификатАбонентаОтпечаток, СертификатАбонента);
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатСубъектаРФПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = ВыбратьСертификат(?(СертификатыСубъектовРФ.Количество() = 0, СертификатыДругиеПользователи, СертификатыСубъектовРФ), СертификатСубъектаРФ);
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		СертификатСубъектаРФОтпечаток = РезультатВыбора.Отпечаток;
		СертификатСубъектаРФ = РезультатВыбора;
		ОтобразитьСертификатВПолеВвода(Элемент, СертификатСубъектаРФОтпечаток, СертификатСубъектаРФ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатФСРАРПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = ВыбратьСертификат(?(СертификатыФСРАР.Количество() = 0, СертификатыДругиеПользователи, СертификатыФСРАР), СертификатФСРАР);
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		СертификатФСРАРОтпечаток = РезультатВыбора.Отпечаток;
		СертификатФСРАР = РезультатВыбора;
		ОтобразитьСертификатВПолеВвода(Элемент, СертификатФСРАРОтпечаток, СертификатФСРАР);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьСертификат(СписокСертификатов, ТекущийСертификат)
	
	ФормаВыбораСертификата = Отчеты.РегламентированныйОтчетАлкоПриложение11.ПолучитьФорму("ФормаВыбораСертификата");
	ФормаВыбораСертификата.Сертификаты = СписокСертификатов;
	ФормаВыбораСертификата.ТекущийСертификат = ТекущийСертификат;
	Возврат ФормаВыбораСертификата.ОткрытьМодально();
	
КонецФункции

Функция ПроверитьСертификат(Сертификат, ОписаниеОшибки = Неопределено)
	
	Попытка
		Возврат Крипт.ПроверитьСертификат(Сертификат.СерийныйНомер, Сертификат.Поставщик, , );
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура СертификатАбонентаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура СертификатСубъектаРФПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура СертификатФСРАРПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры
