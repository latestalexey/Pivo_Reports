#Если Клиент Тогда
Перем мРазмещениеПоложениеВыбранныхПолей Экспорт;
//Перем ТекстЗапроса Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА
//***КМН***
Функция ОбработкаКопированияТЧ()
	
КонецФункции
//---КМН---

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Документ КАК Документ,
	|	ВложенныйЗапрос.Склад КАК Склад,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.КоличествоПриход_СоСклада КАК КоличествоПриход_СоСклада,
	|	ВложенныйЗапрос.КоличествоРасход_СоСклада КАК КоличествоРасход_СоСклада,
	|	ВложенныйЗапрос.РазницаМеждуПланомИСборкой КАК ДельтаПеремещения,
	|	ВложенныйЗапрос.КоличествоПриход_НаСклад КАК КоличествоПриход_НаСклад,
	|	ВложенныйЗапрос.КоличествоРасход_НаСклад КАК КоличествоРасход_НаСклад,
	|	ВложенныйЗапрос.РазницаМеждуСборкойИПремкой КАК ДельтаПрихода,
	|	ВложенныйЗапрос.Регистратор КАК Регистратор
	|{ВЫБРАТЬ
	|	Документ.*,
	|	Склад.*,
	|	Номенклатура.*,
	|	КоличествоПриход_СоСклада,
	|	КоличествоРасход_СоСклада,
	|	ДельтаПеремещения,
	|	КоличествоПриход_НаСклад,
	|	КоличествоРасход_НаСклад,
	|	ДельтаПрихода,
	|	Регистратор.*}
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Документ КАК Документ,
	|		ВложенныйЗапрос.Склад КАК Склад,
	|		ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|		СУММА(ВложенныйЗапрос.КоличествоПриход_СоСклада) КАК КоличествоПриход_СоСклада,
	|		СУММА(ВложенныйЗапрос.КоличествоРасход_СоСклада) КАК КоличествоРасход_СоСклада,
	|		СУММА(ВложенныйЗапрос.РазницаМеждуПланомИСборкой) КАК РазницаМеждуПланомИСборкой,
	|		СУММА(ВложенныйЗапрос.КоличествоПриход_НаСклад) КАК КоличествоПриход_НаСклад,
	|		СУММА(ВложенныйЗапрос.КоличествоРасход_НаСклад) КАК КоличествоРасход_НаСклад,
	|		СУММА(ВложенныйЗапрос.РазницаМеждуСборкойИПремкой) КАК РазницаМеждуСборкойИПремкой,
	|		ВложенныйЗапрос.Регистратор КАК Регистратор
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТоварыКПередачеСоСкладовОстаткиИОбороты.ДокументПередачи КАК Документ,
	|			ТоварыКПередачеСоСкладовОстаткиИОбороты.Склад КАК Склад,
	|			ТоварыКПередачеСоСкладовОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|			ТоварыКПередачеСоСкладовОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход_СоСклада,
	|			ТоварыКПередачеСоСкладовОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход_СоСклада,
	|			ТоварыКПередачеСоСкладовОстаткиИОбороты.КоличествоКонечныйОстаток КАК РазницаМеждуПланомИСборкой,
	|			0 КАК КоличествоПриход_НаСклад,
	|			0 КАК КоличествоРасход_НаСклад,
	|			0 КАК РазницаМеждуСборкойИПремкой,
	|			ТоварыКПередачеСоСкладовОстаткиИОбороты.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрНакопления.ТоварыКПередачеСоСкладов.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор, , ДокументПередачи ССЫЛКА Документ.ПеремещениеТоваров {(Номенклатура).*, (Склад).*, (ДокументПередачи).* КАК Документ}) КАК ТоварыКПередачеСоСкладовОстаткиИОбороты
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТоварыКПолучениюНаСкладыОстаткиИОбороты.ДокументПолучения,
	|			ТоварыКПолучениюНаСкладыОстаткиИОбороты.Склад,
	|			ТоварыКПолучениюНаСкладыОстаткиИОбороты.Номенклатура,
	|			0,
	|			0,
	|			0,
	|			ТоварыКПолучениюНаСкладыОстаткиИОбороты.КоличествоПриход,
	|			ТоварыКПолучениюНаСкладыОстаткиИОбороты.КоличествоРасход,
	|			ТоварыКПолучениюНаСкладыОстаткиИОбороты.КоличествоКонечныйОстаток,
	|			ТоварыКПолучениюНаСкладыОстаткиИОбороты.Регистратор
	|		ИЗ
	|			РегистрНакопления.ТоварыКПолучениюНаСклады.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор, , ДокументПолучения ССЫЛКА Документ.ПеремещениеТоваров {(Номенклатура).*, (Склад).*, (ДокументПолучения).* КАК Документ}) КАК ТоварыКПолучениюНаСкладыОстаткиИОбороты) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Документ,
	|		ВложенныйЗапрос.Склад,
	|		ВложенныйЗапрос.Номенклатура,
	|		ВложенныйЗапрос.Регистратор) КАК ВложенныйЗапрос
	|{ГДЕ
	|	ВложенныйЗапрос.КоличествоПриход_СоСклада,
	|	ВложенныйЗапрос.КоличествоРасход_СоСклада,
	|	ВложенныйЗапрос.РазницаМеждуПланомИСборкой,
	|	ВложенныйЗапрос.КоличествоПриход_НаСклад,
	|	ВложенныйЗапрос.КоличествоРасход_НаСклад,
	|	ВложенныйЗапрос.РазницаМеждуСборкойИПремкой}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ
	|{УПОРЯДОЧИТЬ ПО
	|	Документ.*,
	|	Склад.*,
	|	Номенклатура.*}
	|ИТОГИ
	|	СУММА(КоличествоПриход_СоСклада),
	|	СУММА(КоличествоРасход_СоСклада),
	|	СУММА(ДельтаПеремещения),
	|	СУММА(КоличествоПриход_НаСклад),
	|	СУММА(КоличествоРасход_НаСклад),
	|	СУММА(ДельтаПрихода)
	|ПО
	|	ОБЩИЕ
	|{ИТОГИ ПО
	|	Документ.*,
	|	Склад.*,
	|	Номенклатура.*}
	|АВТОУПОРЯДОЧИВАНИЕ";

	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("Документ", "Документ", "Организация", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.Покупатель", "Покупатель", "Покупатель", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.ДоговорПокупателя", "ДоговорПокупателя", "Договор покупателя", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов);
	//    УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.Номенклатура", "Номенклатура", "Номенклатура", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
	//    УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры);
	//    УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.ЗаказПокупателя", "ЗаказПокупателя", "Заказ покупателя", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВложенныйЗапрос.ЗаказПокупателя", "ЗаказПокупателя", "Заказ покупателя", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Документ", "Документ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Склад", "Склад");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Номенклатура", "Номенклатура");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КоличествоПриход_СоСклада", "Планируемое кол-во товара для перемещения");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КоличествоРасход_СоСклада", "Кол-во товара собранное на складе для перемещения");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДельтаПеремещения", "Разница между планируемым и србранным кол-вом товара");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КоличествоРасход_НаСклад", "Планируемое кол-во товара на склад");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КоличествоПриход_НаСклад", "Кол-во товара принятое на складе");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДельтаПрихода", "Разница между планируемым и принятым кол-вом товара");

	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ХарактеристикаНоменклатуры", "Характеристика номенклатуры");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗаказПокупателя", "Заказ покупателя");
	
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Количество", "Количество (ед. хранения)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КоличествоЕдиницОтчетов", "Количество (ед. отчетов)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КоличествоБазовыхЕдиниц", "Количество (базовых ед.)");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтоимостьБезНДС", "Стоимость продажи без НДС");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("НДС", "НДС продажи");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Стоимость", "Стоимость продажи с НДС");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Себестоимость", "Себестоимость");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВаловаяПрибыль", "Валовая прибыль");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Эффективность", "Эффективность, %");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Рентабельность", "Рентабельность, %");

	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
//	ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоПриход_СоСклада", "Планируемое кол-во товара для перемещения", Истина, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоРасход_СоСклада", "Кол-во товара собранное на складе для перемещения", Истина, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	УниверсальныйОтчет.ДобавитьПоказатель("ДельтаПеремещения", "Разница между планируемым и собранным кол-вом товара", Истина, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоРасход_НаСклад", "Планируемое кол-во прихода товара на склад", Истина, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоПриход_НаСклад", "Кол-во товара принятое на складе", Истина, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");
	УниверсальныйОтчет.ДобавитьПоказатель("ДельтаПрихода", "Разница между планируемым и принятым кол-вом товара", Истина, "ЧЦ=15; ЧДЦ=3", "Количество", "Количество");

	//УниверсальныйОтчет.ДобавитьПоказатель("НДС", "НДС", Ложь, "ЧЦ=15; ЧДЦ=2", "СтоимостьПродажи");
	//УниверсальныйОтчет.ДобавитьПоказатель("Стоимость", "С НДС", Истина, "ЧЦ=15; ЧДЦ=2", "СтоимостьПродажи");
	
	//УниверсальныйОтчет.ДобавитьПоказатель("Себестоимость", "Себестоимость  (" + ВалютаУпр + ")", Ложь, "ЧЦ=15; ЧДЦ=2");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("ВаловаяПрибыль", "Валовая прибыль (" + ВалютаУпр + ")", Истина, "ЧЦ=15; ЧДЦ=2");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("Эффективность", "Эффективность, %", Ложь, "ЧЦ=15; ЧДЦ=2");
	//УниверсальныйОтчет.ДобавитьПоказатель("Рентабельность", "Рентабельность, %", Истина, "ЧЦ=15; ЧДЦ=2");

	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Документ");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Склад");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Документ");
	УниверсальныйОтчет.ДобавитьОтбор("Склад");
	УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");

	//УниверсальныйОтчет.ДобавитьОтбор("Покупатель");
	//УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	Отказ = Ложь;
//	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(Не ЗначениеЗаполнено(УниверсальныйОтчет.ДатаКон), ТекущаяДата(), УниверсальныйОтчет.ДатаКон), Отказ);
//	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("НеВключатьНДСВСтоимостьПартий", ?(Отказ, Ложь, УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий));
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	//ДополнительныеПараметры = Структура ("ДокПеремещение");
	//ДополнительныеПараметры.Вставить("ДокПеремещение",);
	//***КМН*** 09092016
	//УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	Расшифровка.Вставить("ЗагрузитьРОТвПОТ","Загрузить Расходный оредр в Приходный ордер");
	Расшифровка.Вставить("ЗагрузитьПОТвРОТ","Загрузить Приходный ордер в Расходный ордер");
	Расшифровка.Вставить("ЗагрузитьРОТвПеремещение","Загрузить Расходный ордер в Перемещение");
	//---КМН---
	ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;
Процедура ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Отчет, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		Выбор = УниверсальныйОтчет.ПолеНачалоВыбора(Расшифровка,, Истина);
		
		Если Выбор = Неопределено ИЛИ Выбор.Количество() = 0 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ВыполнятьРасшифровку = Ложь;
		
		Для каждого ВыбранноеЗначение из Выбор Цикл
			
			Если ЗначениеЗаполнено(ВыбранноеЗначение.Значение) Тогда
				//Сообщить(Расшифровка.Документ);

				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ТоварыКПередачеСоСкладовОбороты.ДокументПередачи КАК Документ,
				               |	ТоварыКПередачеСоСкладовОбороты.Регистратор
				               |ИЗ
				               |	РегистрНакопления.ТоварыКПередачеСоСкладов.Обороты(&ДатаНач, &ДатаКон, Регистратор, ДокументПередачи = &ДокПеремещения) КАК ТоварыКПередачеСоСкладовОбороты
				               |
				               |ОБЪЕДИНИТЬ ВСЕ
				               |
				               |ВЫБРАТЬ
				               |	ТоварыКПолучениюНаСкладыОбороты.ДокументПолучения,
				               |	ТоварыКПолучениюНаСкладыОбороты.Регистратор
				               |ИЗ
				               |	РегистрНакопления.ТоварыКПолучениюНаСклады.Обороты(&ДатаНач, &ДатаКон, Регистратор, ДокументПолучения = &ДокПеремещения) КАК ТоварыКПолучениюНаСкладыОбороты
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	ТоварыКПолучениюНаСкладыОбороты.ДокументПолучения,
				               |	ТоварыКПолучениюНаСкладыОбороты.Регистратор";
				Запрос.УстановитьПараметр("ДатаНач",НачалоДня(УниверсальныйОтчет.ДатаНач));
				Запрос.УстановитьПараметр("ДатаКон",КонецДня(УниверсальныйОтчет.ДатаКон));
				Запрос.УстановитьПараметр("ДокПеремещения",РасшиФровка.Документ);
				ТЗ = Запрос.Выполнить().Выгрузить();
				Если ТЗ.Количество() = 0 Тогда
					Сообщить("Нет данных для расшифровки!");
					Возврат;
				КонецЕсли;
				ТЗ.Свернуть("Документ,Регистратор");
				
				Если ВыбранноеЗначение.Значение = "Загрузить Расходный оредр в Приходный ордер" Тогда
					Для Каждого Стр Из ТЗ Цикл
						Ссылка = Стр.Регистратор;
						Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
							ОбъектПриемника = Ссылка.ПолучитьОбъект();
						КонецЕсли;
						Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
							//ОбъектРОТ = Ссылка.ПолучитьОбъект();
							СсылкаИсточника = Ссылка;
						КонецЕсли;
					КонецЦикла;
					
					// Приемник - ОБЪЕКТ
					// Источник - Ссылка
					ПерезаполнениеДокумента(ОбъектПриемника,СсылкаИсточника);
					//ОбъектПОТ.Товары.Загрузить(ССылкаРОТ.Товары.Выгрузить());
					//Форма = ОбъектПОТ.ПолучитьФорму();
					//Форма.Открыть();
					//Сообщить("РОТ в ПОТ");
				ИначеЕсли ВыбранноеЗначение.Значение = "Загрузить Приходный ордер в Расходный ордер" Тогда
					Для Каждого Стр Из ТЗ Цикл
						Ссылка = Стр.Регистратор;
						Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
							ОбъектПриемника = Ссылка.ПолучитьОбъект();
						КонецЕсли;
						Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
							//ОбъектРОТ = Ссылка.ПолучитьОбъект();
							СсылкаИсточника = Ссылка;
						КонецЕсли;
					КонецЦикла;
					
					// Приемник - ОБЪЕКТ
					// Источник - Ссылка
					ПерезаполнениеДокумента(ОбъектПриемника,СсылкаИсточника);
	
					//Сообщить("ПОТ в РОТ");
				ИначеЕсли ВыбранноеЗначение.Значение = "Загрузить Расходный ордер в Перемещение" Тогда
					Для Каждого Стр Из ТЗ Цикл
						Ссылка = Стр.Регистратор;
						Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
							ОбъектПриемника = Ссылка.ПолучитьОбъект();
						КонецЕсли;
						Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
							//ОбъектРОТ = Ссылка.ПолучитьОбъект();
							СсылкаИсточника = Ссылка;
						КонецЕсли;
					КонецЦикла;
					
					// Приемник - ОБЪЕКТ
					// Источник - Ссылка
					ПерезаполнениеДокумента(ОбъектПриемника,СсылкаИсточника);

					//Сообщить("РОТ в Перемещение");
				Иначе // стандартный алгоритм
					ОткрытьЗначение(ВыбранноеЗначение.Значение);
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.ПутьКДанным) Тогда
				
				ВыполнятьРасшифровку = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ВыполнятьРасшифровку Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если Строка(Отчет) = "ВнешняяОбработкаОбъект." + Отчет.Метаданные().Имя Тогда
					
			ОтчетРасшифровка = ВнешниеОбработки.Создать(Отчет.ИспользуемоеИмяФайла);
					
		ИначеЕсли Строка(Отчет) = "ВнешнийОтчетОбъект." + Отчет.Метаданные().Имя Тогда
					
			ОтчетРасшифровка = ВнешниеОтчеты.Создать(Отчет.ИспользуемоеИмяФайла);
			
		Иначе
			
			ОтчетРасшифровка = Отчеты[Отчет.Метаданные().Имя].Создать();
			
		КонецЕсли;
				
		//Сообщить(ОтчетРасшифровка);
		ОтчетРасшифровкаУниверсальный = Ложь;
		
		УниверсальныйОтчетРасшифровка = ?(ОтчетРасшифровкаУниверсальный, ОтчетРасшифровка, ОтчетРасшифровка.УниверсальныйОтчет);
		УниверсальныйОтчетТекущий = ?(ОтчетРасшифровкаУниверсальный, Отчет, Отчет.УниверсальныйОтчет);
		
		
		УниверсальныйОтчетРасшифровка.Интервалы = УниверсальныйОтчетТекущий.Интервалы.Скопировать();
		УниверсальныйОтчетРасшифровка.ВариантОформления = УниверсальныйОтчетТекущий.ВариантОформления;
		УниверсальныйОтчетРасшифровка.ИмяРегистра = УниверсальныйОтчетТекущий.ИмяРегистра;
		УниверсальныйОтчетРасшифровка.ИспользоватьСвойстваИКатегории = УниверсальныйОтчетТекущий.ИспользоватьСвойстваИКатегории;
		УниверсальныйОтчетРасшифровка.ВыводитьОбщиеИтоги = УниверсальныйОтчетТекущий.ВыводитьОбщиеИтоги;
		УниверсальныйОтчетРасшифровка.ОтрицательноеКрасным = УниверсальныйОтчетТекущий.ОтрицательноеКрасным;
		УниверсальныйОтчетРасшифровка.ПоказыватьЗаголовок = УниверсальныйОтчетТекущий.ПоказыватьЗаголовок;
		УниверсальныйОтчетРасшифровка.БыстрыйОтборРазвернут = УниверсальныйОтчетТекущий.БыстрыйОтборРазвернут;
		УниверсальныйОтчетРасшифровка.мРежимФормыНастройкиБезГруппировокКолонок = УниверсальныйОтчетТекущий.мРежимФормыНастройкиБезГруппировокКолонок;
		УниверсальныйОтчетРасшифровка.мВосстанавливатьНастройкиПриОткрытии = Ложь;
		УниверсальныйОтчетРасшифровка.мНастройкаПериода = УниверсальныйОтчетТекущий.мНастройкаПериода;
		УниверсальныйОтчетРасшифровка.ДатаНач = УниверсальныйОтчетТекущий.ДатаНач;
		УниверсальныйОтчетРасшифровка.ДатаКон = УниверсальныйОтчетТекущий.ДатаКон;
		
		Если ОтчетРасшифровкаУниверсальный Тогда
			
			ОтчетРасшифровка.УстановитьНачальныеНастройки(Истина);
			
		Иначе
			
			ОтчетРасшифровка.УстановитьНачальныеНастройки(ДополнительныеПараметры);
			
		КонецЕсли;
		
		СкопироватьРазмещениеПоложениеВыбранныхПолей(УниверсальныйОтчетРасшифровка.мРазмещениеПоложениеВыбранныхПолей, УниверсальныйОтчетТекущий.мРазмещениеПоложениеВыбранныхПолей);
		
		УниверсальныйОтчетРасшифровка.Показатели = УниверсальныйОтчетТекущий.Показатели.Скопировать();
		
		УниверсальныйОтчетРасшифровка.ОчиститьНастройкиПостроителя();
		
		Для каждого ИзмерениеСтроки из УниверсальныйОтчетТекущий.ПостроительОтчета.ИзмеренияСтроки Цикл
			
			УниверсальныйОтчетРасшифровка.ДобавитьИзмерениеСтроки(ИзмерениеСтроки.ПутьКДанным);
			
		КонецЦикла;
		
		Для каждого ИзмерениеКолонки из УниверсальныйОтчетТекущий.ПостроительОтчета.ИзмеренияКолонки Цикл
			
			УниверсальныйОтчетРасшифровка.ДобавитьИзмерениеКолонки(ИзмерениеКолонки.ПутьКДанным);
			
		КонецЦикла;
		
		Для каждого ВыбранноеПоле из УниверсальныйОтчетТекущий.ПостроительОтчета.ВыбранныеПоля Цикл
			
			УниверсальныйОтчетРасшифровка.ДобавитьДополнительноеПоле(ВыбранноеПоле.ПутьКДанным, ПолучитьРазмещениеВыбранногоПоля(ВыбранноеПоле.Имя), ПолучитьПоложениеВыбранногоПоля(ВыбранноеПоле.Имя));
			
		КонецЦикла;
		
		Для каждого ЭлементПорядка из УниверсальныйОтчетТекущий.ПостроительОтчета.Порядок Цикл
			
			УниверсальныйОтчетРасшифровка.ДобавитьПорядок(ЭлементПорядка.ПутьКДанным, ЭлементПорядка.Направление);
			
		КонецЦикла;
		
		Для каждого ВыбранноеЗначение из Выбор Цикл
			
			Если ЗначениеЗаполнено(ВыбранноеЗначение.ПутьКДанным) Тогда
				
				Если ТипЗнч(ВыбранноеЗначение.ПутьКДанным) = Тип("Массив") Тогда
					
					Для каждого ПутьКДанным из ВыбранноеЗначение.ПутьКДанным Цикл
						
						Если ВыбранноеЗначение.ДетальнаяЗапись И ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 Тогда
							
							УниверсальныйОтчетРасшифровка.ВыводитьДетальныеЗаписи = Истина;
							УниверсальныйОтчетРасшифровка.ДобавитьДополнительноеПоле(ПутьКДанным);
							
						Иначе
							
							УниверсальныйОтчетРасшифровка.ДобавитьИзмерениеСтроки(ПутьКДанным);
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					Если ВыбранноеЗначение.ДетальнаяЗапись И ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 Тогда
						
						УниверсальныйОтчетРасшифровка.ВыводитьДетальныеЗаписи = Истина;
						УниверсальныйОтчетРасшифровка.ДобавитьДополнительноеПоле(ВыбранноеЗначение.ПутьКДанным);
						
					Иначе
						
						УниверсальныйОтчетРасшифровка.ДобавитьИзмерениеСтроки(ВыбранноеЗначение.ПутьКДанным);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
			
		УниверсальныйОтчетТекущий.ПостроительОтчета.НастроитьРасшифровку(УниверсальныйОтчетРасшифровка.ПостроительОтчета, Расшифровка);
		
		Для каждого ЭлементОтбора из УниверсальныйОтчетТекущий.ПостроительОтчета.Отбор Цикл
			
			Если НЕ ЭлементОтбора.Использование Тогда
			
				УниверсальныйОтчетРасшифровка.ДобавитьОтбор(ЭлементОтбора.ПутьКДанным,,,,,, Ложь);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ФормаОтчетРасшифровка = ОтчетРасшифровка.ПолучитьФорму();
		ФормаОтчетРасшифровка.Открыть();
		ФормаОтчетРасшифровка.ОбновитьОтчет();
			
	Иначе
		
		ОткрытьЗначение(Расшифровка);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровкиУниверсальногоОтчета()

Процедура СкопироватьРазмещениеПоложениеВыбранныхПолей(Приемник, Источник)
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ТипЗнч(Приемник) = Тип("Структура") Тогда
			
			Приемник.Очистить();
			
		Иначе
			
			Приемник = Новый Структура;
			
		КонецЕсли;
		
		Для каждого ЭлементИсточника Из Источник Цикл
			
			Приемник.Вставить(ЭлементИсточника.Ключ, Новый Структура("Размещение, Положение", ЭлементИсточника.Значение.Размещение, ЭлементИсточника.Значение.Положение));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СкопироватьРазмещениеПоложениеВыбранныхПолей()

Функция ПолучитьРазмещениеВыбранногоПоля(Имя) Экспорт
	
	РазмещениеПоУмолчанию = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями;
	
	Если ПустаяСтрока(Имя) Тогда
		
		Возврат РазмещениеПоУмолчанию;
		
	Иначе
		
		СтруктураНастройки = Неопределено;
		
		Если НЕ мРазмещениеПоложениеВыбранныхПолей.Свойство(Имя, СтруктураНастройки) Тогда
			
			Возврат РазмещениеПоУмолчанию;
			
		ИначеЕсли ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда
			
			Размещение = Неопределено;
			
			Если НЕ СтруктураНастройки.Свойство("Размещение", Размещение) Тогда
				
				Возврат РазмещениеПоУмолчанию;
				
			Иначе
				
				Возврат Размещение;
				
			КонецЕсли;
			
		Иначе	
			
			Возврат РазмещениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьРазмещениеВыбранногоПоля()

Функция ПолучитьПоложениеВыбранногоПоля(Имя) Экспорт
	
	ПоложениеПоУмолчанию = НСтр("ru='После группировки'");
	
	Если ПустаяСтрока(Имя) Тогда
		
		Возврат ПоложениеПоУмолчанию;
		
	Иначе
		
		СтруктураНастройки = Неопределено;
		
		Если НЕ мРазмещениеПоложениеВыбранныхПолей.Свойство(Имя, СтруктураНастройки) Тогда
			
			Возврат ПоложениеПоУмолчанию;
			
		ИначеЕсли ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда
			
			Положение = Неопределено;
			
			Если НЕ СтруктураНастройки.Свойство("Положение", Положение) Тогда
				
				Возврат ПоложениеПоУмолчанию;
				
			Иначе
				
				Возврат Положение;
				
			КонецЕсли;
			
		Иначе	
			
			Возврат ПоложениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьПоложениеВыбранногоПоля()

//Приемник - Объект
//Истоник - Ссылка
Процедура  ПерезаполнениеДокумента(Приемник,Источник)
	//ТаблЧасть = Приемник.Товары;
	Ответ = Вопрос("Будет перезаполнен документ "+Приемник+", Продолжить?",РежимДиалогаВопрос.ДаНет,"15",,"Перезаполнить документ",КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрИсточник Из Источник.Товары Цикл
		СтрПриемник = Приемник.Товары.Найти(СтрИсточник.Номенклатура,"Номенклатура");
		СтрПриемник.Количество = СтрИсточник.Количество;
		СтрПриемник.КоличествоМест = СтрИсточник.КоличествоМест;
		СтрПриемник.ЕдиницаИзмерения = СтрИсточник.ЕдиницаИзмерения;
		СтрПриемник.ЕдиницаИзмеренияМест = СтрИсточник.ЕдиницаИзмеренияМест;
		СтрПриемник.Качество = СтрИсточник.Качество;
		СтрПриемник.Коэффициент = СтрИсточник.Коэффициент;
		СтрПриемник.ХарактеристикаНоменклатуры = СтрИсточник.ХарактеристикаНоменклатуры;
		СтрПриемник.СерияНоменклатуры = СтрИсточник.СерияНоменклатуры;
	КонецЦикла;
	Попытка
		Приемник.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Табличная часть документа перезаполнена. Документ проведен!!!" );
	Исключение
		Сообщить("Докмент не проведен! Запись не сделала.");		
	КонецПопытки;
	
	Форма=Приемник.ПолучитьФорму();
	Форма.Открыть();
КонецПроцедуры

мРазмещениеПоложениеВыбранныхПолей = Новый Структура;

мСтруктураПредставлениеПолей = Новый Структура;

#КонецЕсли
